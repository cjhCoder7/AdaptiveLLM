{"id": "HumanEval/85", "prompt": "```python\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.08545607328414917, 0.7702789306640625, 0.009363147430121899, 0.028765304014086723, 0.030954059213399887, 0.015493886545300484, 0.01793392188847065, 0.04175468161702156], "true_rank": 1}
{"id": "HumanEval/58", "prompt": "```python\n\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.07104939967393875, 0.6518166065216064, 0.0056298160925507545, 0.17534178495407104, 0.025382276624441147, 0.02342192642390728, 0.008746592327952385, 0.03861163556575775], "true_rank": 1}
{"id": "HumanEval/62", "prompt": "```python\n\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.06844691932201385, 0.7387915849685669, 0.006590983830392361, 0.03270817920565605, 0.012596123851835728, 0.01448809914290905, 0.005487091839313507, 0.12089110910892487], "true_rank": 1}
{"id": "HumanEval/66", "prompt": "```python\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.044327858835458755, 0.7916027307510376, 0.008415616117417812, 0.055675774812698364, 0.015569700859487057, 0.018116077408194542, 0.00675180833786726, 0.059540439397096634], "true_rank": 0}
{"id": "HumanEval/21", "prompt": "```python\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.05703612416982651, 0.8867858052253723, 0.0022591359447687864, 0.015426943078637123, 0.009629402309656143, 0.007916735485196114, 0.0030520902946591377, 0.017893726006150246], "true_rank": 1}
{"id": "HumanEval/95", "prompt": "```python\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.012985007837414742, 0.9638271331787109, 0.0015065523330122232, 0.006143562961369753, 0.0014678587904199958, 0.0011143326992169023, 0.0007487864349968731, 0.012206769548356533], "true_rank": 2}
{"id": "HumanEval/19", "prompt": "```python\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.03974074125289917, 0.7257971167564392, 0.01842326857149601, 0.012829444371163845, 0.020126894116401672, 0.014178024604916573, 0.0041631069034338, 0.1647414118051529], "true_rank": 4}
{"id": "HumanEval/110", "prompt": "```python\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.3526952862739563, 0.5631805658340454, 0.0031450202222913504, 0.036137767136096954, 0.01784471794962883, 0.005623891018331051, 0.003264185506850481, 0.018108554184436798], "true_rank": 5}
{"id": "HumanEval/156", "prompt": "```python\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.3123556673526764, 0.5086865425109863, 0.004098672419786453, 0.015234632417559624, 0.024753449484705925, 0.011526900343596935, 0.025938736274838448, 0.09740541130304337], "true_rank": 0}
{"id": "HumanEval/20", "prompt": "```python\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.23208844661712646, 0.5029876232147217, 0.013311182148754597, 0.04155673086643219, 0.07414799183607101, 0.019033964723348618, 0.015190046280622482, 0.10168404132127762], "true_rank": 1}
{"id": "HumanEval/130", "prompt": "```python\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.9015703201293945, 0.07973290979862213, 0.0010259161936119199, 0.00779342744499445, 0.004485493525862694, 0.0014165010070428252, 0.0010603675618767738, 0.002915116725489497], "true_rank": 1}
{"id": "HumanEval/35", "prompt": "```python\n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.06224764138460159, 0.8514366745948792, 0.006622804328799248, 0.013587020337581635, 0.018685780465602875, 0.011660817079246044, 0.005881591700017452, 0.02987772785127163], "true_rank": 1}
{"id": "HumanEval/79", "prompt": "```python\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.025027943775057793, 0.9052034020423889, 0.004146748688071966, 0.011416829191148281, 0.00625262875109911, 0.0036919338162988424, 0.003223191248252988, 0.04103734716773033], "true_rank": 0}
{"id": "HumanEval/99", "prompt": "```python\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.13660232722759247, 0.4357825219631195, 0.010592591017484665, 0.09123866260051727, 0.03885245695710182, 0.0218514334410429, 0.010376876220107079, 0.2547030746936798], "true_rank": 7}
{"id": "HumanEval/80", "prompt": "```python\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.4082089364528656, 0.3928835391998291, 0.008987050503492355, 0.04924273118376732, 0.029329810291528702, 0.01679830811917782, 0.01151292771100998, 0.08303668349981308], "true_rank": 0}
{"id": "HumanEval/47", "prompt": "```python\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.01292501762509346, 0.9449654817581177, 0.0027969027869403362, 0.015824468806385994, 0.004243421833962202, 0.0038912268355488777, 0.0028047305531799793, 0.012548808939754963], "true_rank": 1}
{"id": "HumanEval/34", "prompt": "```python\n\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.03843434527516365, 0.927104651927948, 0.0026344177313148975, 0.006178460083901882, 0.004972571507096291, 0.0046005938202142715, 0.004636868834495544, 0.011438118293881416], "true_rank": 1}
{"id": "HumanEval/49", "prompt": "```python\n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.41770505905151367, 0.3484122157096863, 0.011088847182691097, 0.03936254605650902, 0.017528673633933067, 0.015022496692836285, 0.014844611287117004, 0.13603557646274567], "true_rank": 1}
{"id": "HumanEval/73", "prompt": "```python\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.09885478019714355, 0.613852858543396, 0.005796209909021854, 0.01663200929760933, 0.12806279957294464, 0.013131029903888702, 0.005340090487152338, 0.11833024770021439], "true_rank": 1}
{"id": "HumanEval/137", "prompt": "```python\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.21064946055412292, 0.6437532305717468, 0.0026175931561738253, 0.06939855962991714, 0.024417787790298462, 0.0032736428547650576, 0.003690060693770647, 0.04219968989491463], "true_rank": 7}
{"id": "HumanEval/27", "prompt": "```python\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.016238221898674965, 0.9765565395355225, 0.0005497346282936633, 0.001066761207766831, 0.0012402517022565007, 0.0008223740151152015, 0.0011985342716798186, 0.0023275543935596943], "true_rank": 1}
{"id": "HumanEval/128", "prompt": "```python\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.3457188606262207, 0.27316349744796753, 0.012247234582901001, 0.05343225225806236, 0.12491022050380707, 0.02127009816467762, 0.011107681319117546, 0.15815024077892303], "true_rank": 1}
{"id": "HumanEval/96", "prompt": "```python\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.5689745545387268, 0.20122689008712769, 0.009955157525837421, 0.09726085513830185, 0.04186887666583061, 0.03290273994207382, 0.021601831540465355, 0.026209169998764992], "true_rank": 1}
{"id": "HumanEval/13", "prompt": "```python\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.1054445430636406, 0.852031946182251, 0.0014267540536820889, 0.015564145520329475, 0.002106268657371402, 0.0016320428112521768, 0.0014236640417948365, 0.02037067897617817], "true_rank": 0}
{"id": "HumanEval/122", "prompt": "```python\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.24906113743782043, 0.3473077118396759, 0.00878250040113926, 0.01496137399226427, 0.05047314241528511, 0.06311921030282974, 0.00641102809458971, 0.25988394021987915], "true_rank": 1}
{"id": "HumanEval/29", "prompt": "```python\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.005843685008585453, 0.9876570701599121, 0.000561382039450109, 0.0011350518325343728, 0.0010785470949485898, 0.0008198672439903021, 0.0005123767768964171, 0.0023920226376503706], "true_rank": 1}
{"id": "HumanEval/44", "prompt": "```python\n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.005359583999961615, 0.9843176603317261, 0.0006775562069378793, 0.004808340687304735, 0.0008177141426131129, 0.0009513543336652219, 0.0006181814824230969, 0.0024495902471244335], "true_rank": 1}
{"id": "HumanEval/92", "prompt": "```python\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.053863346576690674, 0.591178834438324, 0.01349113043397665, 0.10036756843328476, 0.017503559589385986, 0.013142588548362255, 0.013629769906401634, 0.1968231499195099], "true_rank": 0}
{"id": "HumanEval/136", "prompt": "```python\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.2697843015193939, 0.444406121969223, 0.010923718102276325, 0.0559808723628521, 0.14380556344985962, 0.011863608844578266, 0.009682934731245041, 0.05355279892683029], "true_rank": 1}
{"id": "HumanEval/141", "prompt": "```python\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.031371183693408966, 0.9020056128501892, 0.0021689648274332285, 0.004140985198318958, 0.013186492957174778, 0.004106761887669563, 0.002223790157586336, 0.040796298533678055], "true_rank": 4}
{"id": "HumanEval/70", "prompt": "```python\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.15031707286834717, 0.5431221723556519, 0.012859422713518143, 0.05206632241606712, 0.11553933471441269, 0.013949974440038204, 0.012018280103802681, 0.10012741386890411], "true_rank": 0}
{"id": "HumanEval/114", "prompt": "```python\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.10803234577178955, 0.6852936148643494, 0.007149085868149996, 0.06792614609003067, 0.05444579944014549, 0.014905354008078575, 0.006828246638178825, 0.055419422686100006], "true_rank": 3}
{"id": "HumanEval/131", "prompt": "```python\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.5838618874549866, 0.2527831196784973, 0.005957557819783688, 0.08386832475662231, 0.03635846823453903, 0.007949666120111942, 0.005290788132697344, 0.023930184543132782], "true_rank": 1}
{"id": "HumanEval/46", "prompt": "```python\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.7029973864555359, 0.15931721031665802, 0.0043960995972156525, 0.024063337594270706, 0.018469220027327538, 0.024713456630706787, 0.00795517023652792, 0.05808812007308006], "true_rank": 3}
{"id": "HumanEval/118", "prompt": "```python\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.3167855441570282, 0.4011378586292267, 0.008717172779142857, 0.025059809908270836, 0.0336262471973896, 0.034648485481739044, 0.008532527834177017, 0.1714923232793808], "true_rank": 5}
{"id": "HumanEval/138", "prompt": "```python\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.06895056366920471, 0.4225124716758728, 0.06041962280869484, 0.1674240082502365, 0.11868959665298462, 0.016832340508699417, 0.013858985155820847, 0.13131238520145416], "true_rank": 1}
{"id": "HumanEval/42", "prompt": "```python\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.08852286636829376, 0.7994515299797058, 0.005773602053523064, 0.037304844707250595, 0.010745578445494175, 0.008946237154304981, 0.006587853189557791, 0.04266750067472458], "true_rank": 1}
{"id": "HumanEval/68", "prompt": "```python\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.4311832785606384, 0.07365327328443527, 0.012106288224458694, 0.06061819940805435, 0.14742806553840637, 0.03315215930342674, 0.011134627275168896, 0.23072409629821777], "true_rank": 1}
{"id": "HumanEval/75", "prompt": "```python\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.31756216287612915, 0.11365160346031189, 0.05157770216464996, 0.06939119845628738, 0.23376835882663727, 0.015051846392452717, 0.009418170899152756, 0.18957899510860443], "true_rank": 7}
{"id": "HumanEval/112", "prompt": "```python\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.045188095420598984, 0.9119817614555359, 0.0013451870763674378, 0.005287869367748499, 0.011598601005971432, 0.0023479261435568333, 0.0015376517549157143, 0.02071295492351055], "true_rank": 1}
{"id": "HumanEval/74", "prompt": "```python\n\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.2769497334957123, 0.4328022599220276, 0.009176808409392834, 0.08456450700759888, 0.13489370048046112, 0.012972787953913212, 0.008589217439293861, 0.040051016956567764], "true_rank": 0}
{"id": "HumanEval/89", "prompt": "```python\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.030243879184126854, 0.9217541217803955, 0.0022343345917761326, 0.005662527401000261, 0.015297926962375641, 0.002868609968572855, 0.002441196469590068, 0.019497398287057877], "true_rank": 4}
{"id": "HumanEval/109", "prompt": "```python\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.09992475062608719, 0.5741287469863892, 0.004758693277835846, 0.01983099989593029, 0.028127487748861313, 0.008484210819005966, 0.005355397239327431, 0.2593896687030792], "true_rank": 4}
{"id": "HumanEval/82", "prompt": "```python\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.0857100561261177, 0.8594391345977783, 0.00618860125541687, 0.028588667511940002, 0.008522264659404755, 0.0038234025705605745, 0.0021033640950918198, 0.005624493584036827], "true_rank": 1}
{"id": "HumanEval/123", "prompt": "```python\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.34864872694015503, 0.5565539002418518, 0.005042556673288345, 0.017568416893482208, 0.03212226182222366, 0.00563154648989439, 0.003055327106267214, 0.031377267092466354], "true_rank": 3}
{"id": "HumanEval/83", "prompt": "```python\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.14493565261363983, 0.6018702387809753, 0.009885299950838089, 0.035402439534664154, 0.034722700715065, 0.02250446006655693, 0.09284359961748123, 0.057835593819618225], "true_rank": 2}
{"id": "HumanEval/67", "prompt": "```python\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.36228060722351074, 0.41725054383277893, 0.014613846316933632, 0.03019699826836586, 0.04936201125383377, 0.019517118111252785, 0.008929310366511345, 0.09784956276416779], "true_rank": 7}
{"id": "HumanEval/12", "prompt": "```python\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 1, "probability": [0.015576331876218319, 0.9657145738601685, 0.0014972514472901821, 0.003577525494620204, 0.003723254892975092, 0.0019932303112000227, 0.0018164142966270447, 0.006101381499320269], "true_rank": 1}
{"id": "HumanEval/159", "prompt": "```python\n\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.3452205955982208, 0.1737656593322754, 0.015389209613204002, 0.05486017465591431, 0.14627574384212494, 0.04303467646241188, 0.018438376486301422, 0.20301562547683716], "true_rank": 1}
{"id": "HumanEval/158", "prompt": "```python\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "predicted_rank": 0, "probability": [0.6705412268638611, 0.17251688241958618, 0.007883710786700249, 0.034209609031677246, 0.02338232286274433, 0.018656855449080467, 0.007507527247071266, 0.06530184298753738], "true_rank": 0}
{"id": "code_contests/96", "prompt": "# Arena\n\nThere are n heroes fighting in the arena. Initially, the i-th hero has a_i health points.\n\nThe fight in the arena takes place in several rounds. At the beginning of each round, each alive hero deals 1 damage to all other heroes. Hits of all heroes occur simultaneously. Heroes whose health is less than 1 at the end of the round are considered killed.\n\nIf exactly 1 hero remains alive after a certain round, then he is declared the winner. Otherwise, there is no winner.\n\nYour task is to calculate the number of ways to choose the initial health points for each hero a_i, where 1 \u2264 a_i \u2264 x, so that there is no winner of the fight. The number of ways can be very large, so print it modulo 998244353. Two ways are considered different if at least one hero has a different amount of health. For example, [1, 2, 1] and [2, 1, 1] are different.\n\nInput\n\nThe only line contains two integers n and x (2 \u2264 n \u2264 500; 1 \u2264 x \u2264 500).\n\nOutput\n\nPrint one integer \u2014 the number of ways to choose the initial health points for each hero a_i, where 1 \u2264 a_i \u2264 x, so that there is no winner of the fight, taken modulo 998244353. \n\nExamples\n\nInput\n\n\n2 5\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n3 3\n\n\nOutput\n\n\n15\n\n\nInput\n\n\n5 4\n\n\nOutput\n\n\n1024\n\n\nInput\n\n\n13 37\n\n\nOutput\n\n\n976890680\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 1, "probability": [0.2994382977485657, 0.5778239965438843, 0.00850122980773449, 0.007521959953010082, 0.04791828989982605, 0.006061509717255831, 0.015070139430463314, 0.03766460344195366], "true_rank": 0}
{"id": "code_contests/115", "prompt": "# Poisoned Dagger\n\nMonocarp is playing yet another computer game. In this game, his character has to kill a dragon. The battle with the dragon lasts 100^{500} seconds, during which Monocarp attacks the dragon with a poisoned dagger. The i-th attack is performed at the beginning of the a_i-th second from the battle start. The dagger itself does not deal damage, but it applies a poison effect on the dragon, which deals 1 damage during each of the next k seconds (starting with the same second when the dragon was stabbed by the dagger). However, if the dragon has already been poisoned, then the dagger updates the poison effect (i.e. cancels the current poison effect and applies a new one).\n\nFor example, suppose k = 4, and Monocarp stabs the dragon during the seconds 2, 4 and 10. Then the poison effect is applied at the start of the 2-nd second and deals 1 damage during the 2-nd and 3-rd seconds; then, at the beginning of the 4-th second, the poison effect is reapplied, so it deals exactly 1 damage during the seconds 4, 5, 6 and 7; then, during the 10-th second, the poison effect is applied again, and it deals 1 damage during the seconds 10, 11, 12 and 13. In total, the dragon receives 10 damage.\n\nMonocarp knows that the dragon has h hit points, and if he deals at least h damage to the dragon during the battle \u2014 he slays the dragon. Monocarp has not decided on the strength of the poison he will use during the battle, so he wants to find the minimum possible value of k (the number of seconds the poison effect lasts) that is enough to deal at least h damage to the dragon.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of the test case contains two integers n and h (1 \u2264 n \u2264 100; 1 \u2264 h \u2264 10^{18}) \u2014 the number of Monocarp's attacks and the amount of damage that needs to be dealt.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9; a_i < a_{i + 1}), where a_i is the second when the i-th attack is performed.\n\nOutput\n\nFor each test case, print a single integer \u2014 the minimum value of the parameter k, such that Monocarp will cause at least h damage to the dragon.\n\nExample\n\nInput\n\n\n4\n2 5\n1 5\n3 10\n2 4 10\n5 3\n1 2 4 5 7\n4 1000\n3 25 64 1337\n\n\nOutput\n\n\n3\n4\n1\n470\n\nNote\n\nIn the first example, for k=3, damage is dealt in seconds [1, 2, 3, 5, 6, 7].\n\nIn the second example, for k=4, damage is dealt in seconds [2, 3, 4, 5, 6, 7, 10, 11, 12, 13].\n\nIn the third example, for k=1, damage is dealt in seconds [1, 2, 4, 5, 7].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9058240056037903, 0.05746668577194214, 0.003054504282772541, 0.0016789135988801718, 0.01643775776028633, 0.0014110823394730687, 0.0013658377574756742, 0.012761282734572887], "true_rank": 6}
{"id": "code_contests/51", "prompt": "# Consecutive Sum Riddle\n\nTheofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 4, "probability": [0.19263310730457306, 0.0973547175526619, 0.029269050806760788, 0.03919683024287224, 0.6062496900558472, 0.011990826576948166, 0.008640211075544357, 0.014665507711470127], "true_rank": 0}
{"id": "code_contests/131", "prompt": "# Christmas Chocolates\n\nChristmas is coming, Icy has just received a box of chocolates from her grandparents! The box contains n chocolates. The i-th chocolate has a non-negative integer type a_i.\n\nIcy believes that good things come in pairs. Unfortunately, all types of chocolates are distinct (all a_i are distinct). Icy wants to make at least one pair of chocolates the same type. \n\nAs a result, she asks her grandparents to perform some chocolate exchanges. Before performing any chocolate exchanges, Icy chooses two chocolates with indices x and y (1 \u2264 x, y \u2264 n, x \u2260 y).\n\nIn a chocolate exchange, Icy's grandparents choose a non-negative integer k, such that 2^k \u2265 a_x, and change the type of the chocolate x from a_x to 2^k - a_x (that is, perform a_x := 2^k - a_x).\n\nThe chocolate exchanges will be stopped only when a_x = a_y. Note that other pairs of equal chocolate types do not stop the procedure.\n\nIcy's grandparents are smart, so they would choose the sequence of chocolate exchanges that minimizes the number of exchanges needed. Since Icy likes causing trouble, she wants to maximize the minimum number of exchanges needed by choosing x and y appropriately. She wonders what is the optimal pair (x, y) such that the minimum number of exchanges needed is maximized across all possible choices of (x, y).\n\nSince Icy is not good at math, she hopes that you can help her solve the problem.\n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of chocolates.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that all a_i are distinct.\n\nOutput\n\nOutput three integers x, y, and m.\n\nx and y are indices of the optimal chocolates to perform exchanges on. Your output must satisfy 1 \u2264 x, y \u2264 n, x \u2260 y.\n\nm is the number of exchanges needed to obtain a_x = a_y. We can show that m \u2264 10^9 for any pair of chocolates.\n\nIf there are multiple solutions, output any.\n\nExamples\n\nInput\n\n\n5\n5 6 7 8 9\n\n\nOutput\n\n\n2 5 5\n\n\nInput\n\n\n2\n4 8\n\n\nOutput\n\n\n1 2 2\n\nNote\n\nIn the first test case, the minimum number of exchanges needed to exchange a chocolate of type 6 to a chocolate of type 9 is 5. The sequence of exchanges is as follows: 6 \u2192 2 \u2192 0 \u2192 1 \u2192 7 \u2192 9.\n\nIn the second test case, the minimum number of exchanges needed to exchange a chocolate of type 4 to a chocolate of type 8 is 2. The sequence of exchanges is as follows: 4 \u2192 0 \u2192 8.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.7467458248138428, 0.1558125913143158, 0.007742352318018675, 0.010398659855127335, 0.021800247952342033, 0.01703558675944805, 0.007836590521037579, 0.03262808918952942], "true_rank": 0}
{"id": "code_contests/83", "prompt": "# Two Sorts\n\nIntegers from 1 to n (inclusive) were sorted lexicographically (considering integers as strings). As a result, array a_1, a_2, ..., a_n was obtained.\n\nCalculate value of (\u2211_{i = 1}^n ((i - a_i) mod 998244353)) mod 10^9 + 7.\n\nx mod y here means the remainder after division x by y. This remainder is always non-negative and doesn't exceed y - 1. For example, 5 mod 3 = 2, (-1) mod 6 = 5. \n\nInput\n\nThe first line contains the single integer n (1 \u2264 n \u2264 10^{12}).\n\nOutput\n\nPrint one integer \u2014 the required sum.\n\nExamples\n\nInput\n\n\n3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n12\n\n\nOutput\n\n\n994733045\n\n\nInput\n\n\n21\n\n\nOutput\n\n\n978932159\n\n\nInput\n\n\n1000000000000\n\n\nOutput\n\n\n289817887\n\nNote\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\n\n\nFor example, 42 is lexicographically smaller than 6, because they differ in the first digit, and 4 < 6; 42 < 420, because 42 is a prefix of 420.\n\nLet's denote 998244353 as M.\n\nIn the first example, array a is equal to [1, 2, 3]. \n\n  * (1 - 1) mod M = 0 mod M = 0 \n  * (2 - 2) mod M = 0 mod M = 0 \n  * (3 - 3) mod M = 0 mod M = 0 \n\n\n\nAs a result, (0 + 0 + 0) mod 10^9 + 7 = 0\n\nIn the second example, array a is equal to [1, 10, 11, 12, 2, 3, 4, 5, 6, 7, 8, 9]. \n\n  * (1 - 1) mod M = 0 mod M = 0 \n  * (2 - 10) mod M = (-8) mod M = 998244345 \n  * (3 - 11) mod M = (-8) mod M = 998244345 \n  * (4 - 12) mod M = (-8) mod M = 998244345 \n  * (5 - 2) mod M = 3 mod M = 3 \n  * (6 - 3) mod M = 3 mod M = 3 \n  * (7 - 4) mod M = 3 mod M = 3 \n  * (8 - 5) mod M = 3 mod M = 3 \n  * (9 - 6) mod M = 3 mod M = 3 \n  * (10 - 7) mod M = 3 mod M = 3 \n  * (11 - 8) mod M = 3 mod M = 3 \n  * (12 - 9) mod M = 3 mod M = 3 \n\n\n\nAs a result, (0 + 998244345 + 998244345 + 998244345 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3) mod 10^9 + 7 = 2994733059 mod 10^9 + 7 = 994733045\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9398459196090698, 0.00497349863871932, 0.0014645573683083057, 0.013735990040004253, 0.031073393300175667, 0.002568678930401802, 0.0018470233771950006, 0.004490897990763187], "true_rank": 0}
{"id": "code_contests/81", "prompt": "# Difficult Mountain\n\nA group of n alpinists has just reached the foot of the mountain. The initial difficulty of climbing this mountain can be described as an integer d.\n\nEach alpinist can be described by two integers s and a, where s is his skill of climbing mountains and a is his neatness.\n\nAn alpinist of skill level s is able to climb a mountain of difficulty p only if p \u2264 s. As an alpinist climbs a mountain, they affect the path and thus may change mountain difficulty. Specifically, if an alpinist of neatness a climbs a mountain of difficulty p the difficulty of this mountain becomes max(p, a). \n\nAlpinists will climb the mountain one by one. And before the start, they wonder, what is the maximum number of alpinists who will be able to climb the mountain if they choose the right order. As you are the only person in the group who does programming, you are to answer the question.\n\nNote that after the order is chosen, each alpinist who can climb the mountain, must climb the mountain at that time. \n\nInput\n\nThe first line contains two integers n and d (1 \u2264 n \u2264 500 000; 0 \u2264 d \u2264 10^9) \u2014 the number of alpinists and the initial difficulty of the mountain.\n\nEach of the next n lines contains two integers s_i and a_i (0 \u2264 s_i, a_i \u2264 10^9) that define the skill of climbing and the neatness of the i-th alpinist.\n\nOutput\n\nPrint one integer equal to the maximum number of alpinists who can climb the mountain if they choose the right order to do so.\n\nExamples\n\nInput\n\n\n3 2\n2 6\n3 5\n5 7\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n3 3\n2 4\n6 4\n4 6\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n5 0\n1 5\n4 8\n2 7\n7 6\n3 2\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example, alpinists 2 and 3 can climb the mountain if they go in this order. There is no other way to achieve the answer of 2.\n\nIn the second example, alpinist 1 is not able to climb because of the initial difficulty of the mountain, while alpinists 2 and 3 can go up in any order.\n\nIn the third example, the mountain can be climbed by alpinists 5, 3 and 4 in this particular order. There is no other way to achieve optimal answer.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.6507284641265869, 0.23727841675281525, 0.00551742035895586, 0.009023378603160381, 0.028219152241945267, 0.011127153411507607, 0.008592351339757442, 0.049513690173625946], "true_rank": 0}
{"id": "code_contests/44", "prompt": "# Omkar and Mosaic\n\nOmkar is creating a mosaic using colored square tiles, which he places in an n \u00d7 n grid. When the mosaic is complete, each cell in the grid will have either a glaucous or sinoper tile. However, currently he has only placed tiles in some cells. \n\nA completed mosaic will be a mastapeece if and only if each tile is adjacent to exactly 2 tiles of the same color (2 tiles are adjacent if they share a side.) Omkar wants to fill the rest of the tiles so that the mosaic becomes a mastapeece. Now he is wondering, is the way to do this unique, and if it is, what is it?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2000).\n\nThen follow n lines with n characters in each line. The i-th character in the j-th line corresponds to the cell in row i and column j of the grid, and will be S if Omkar has placed a sinoper tile in this cell, G if Omkar has placed a glaucous tile, . if it's empty. \n\nOutput\n\nOn the first line, print UNIQUE if there is a unique way to get a mastapeece, NONE if Omkar cannot create any, and MULTIPLE if there is more than one way to do so. All letters must be uppercase.\n\nIf you print UNIQUE, then print n additional lines with n characters in each line, such that the i-th character in the j^{th} line is S if the tile in row i and column j of the mastapeece is sinoper, and G if it is glaucous. \n\nExamples\n\nInput\n\n\n4\nS...\n..G.\n....\n...S\n\n\nOutput\n\n\nMULTIPLE\n\n\nInput\n\n\n6\nS.....\n....G.\n..S...\n.....S\n....G.\nG.....\n\n\nOutput\n\n\nNONE\n\n\nInput\n\n\n10\n.S....S...\n..........\n...SSS....\n..........\n..........\n...GS.....\n....G...G.\n..........\n......G...\n..........\n\n\nOutput\n\n\nUNIQUE\nSSSSSSSSSS\nSGGGGGGGGS\nSGSSSSSSGS\nSGSGGGGSGS\nSGSGSSGSGS\nSGSGSSGSGS\nSGSGGGGSGS\nSGSSSSSSGS\nSGGGGGGGGS\nSSSSSSSSSS\n\n\nInput\n\n\n1\n.\n\n\nOutput\n\n\nNONE\n\nNote\n\nFor the first test case, Omkar can make the mastapeeces\n\nSSSS\n\nSGGS\n\nSGGS\n\nSSSS\n\nand \n\nSSGG\n\nSSGG\n\nGGSS\n\nGGSS.\n\nFor the second test case, it can be proven that it is impossible for Omkar to add tiles to create a mastapeece.\n\nFor the third case, it can be proven that the given mastapeece is the only mastapeece Omkar can create by adding tiles.\n\nFor the fourth test case, it's clearly impossible for the only tile in any mosaic Omkar creates to be adjacent to two tiles of the same color, as it will be adjacent to 0 tiles total. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9008216261863708, 0.05433846265077591, 0.0023263932671397924, 0.004107371903955936, 0.01850402168929577, 0.0035168530885130167, 0.003300825599581003, 0.013084459118545055], "true_rank": 1}
{"id": "code_contests/19", "prompt": "# Minimal Coverage\n\nYou are given n lengths of segments that need to be placed on an infinite axis with coordinates.\n\nThe first segment is placed on the axis so that one of its endpoints lies at the point with coordinate 0. Let's call this endpoint the \"start\" of the first segment and let's call its \"end\" as that endpoint that is not the start. \n\nThe \"start\" of each following segment must coincide with the \"end\" of the previous one. Thus, if the length of the next segment is d and the \"end\" of the previous one has the coordinate x, the segment can be placed either on the coordinates [x-d, x], and then the coordinate of its \"end\" is x - d, or on the coordinates [x, x+d], in which case its \"end\" coordinate is x + d.\n\nThe total coverage of the axis by these segments is defined as their overall union which is basically the set of points covered by at least one of the segments. It's easy to show that the coverage will also be a segment on the axis. Determine the minimal possible length of the coverage that can be obtained by placing all the segments on the axis without changing their order.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (1 \u2264 n \u2264 10^4) \u2014 the number of segments. The second line of the description contains n space-separated integers a_i (1 \u2264 a_i \u2264 1000) \u2014 lengths of the segments in the same order they should be placed on the axis.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the minimal possible length of the axis coverage.\n\nExample\n\nInput\n\n\n6\n2\n1 3\n3\n1 2 3\n4\n6 2 3 9\n4\n6 8 4 5\n7\n1 2 4 6 7 7 3\n8\n8 6 5 1 2 2 3 6\n\n\nOutput\n\n\n3\n3\n9\n9\n7\n8\n\nNote\n\nIn the third sample test case the segments should be arranged as follows: [0, 6] \u2192 [4, 6] \u2192 [4, 7] \u2192 [-2, 7]. As you can see, the last segment [-2, 7] covers all the previous ones, and the total length of coverage is 9.\n\nIn the fourth sample test case the segments should be arranged as [0, 6] \u2192 [-2, 6] \u2192 [-2, 2] \u2192 [2, 7]. The union of these segments also occupies the area [-2, 7] and has the length of 9.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.6622907519340515, 0.13479264080524445, 0.014839389361441135, 0.022257773205637932, 0.08128759264945984, 0.025284791365265846, 0.021871816366910934, 0.037375327199697495], "true_rank": 0}
{"id": "code_contests/146", "prompt": "# Permutation and Queries\n\nYou are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.45806246995925903, 0.31785959005355835, 0.004538671113550663, 0.008363471366465092, 0.15294255316257477, 0.012565947137773037, 0.006281290203332901, 0.03938598558306694], "true_rank": 3}
{"id": "code_contests/4", "prompt": "# Eye-Pleasing City Park Tour\n\nThere is a city park represented as a tree with n attractions as its vertices and n - 1 rails as its edges. The i-th attraction has happiness value a_i.\n\nEach rail has a color. It is either black if t_i = 0, or white if t_i = 1. Black trains only operate on a black rail track, and white trains only operate on a white rail track. If you are previously on a black train and want to ride a white train, or you are previously on a white train and want to ride a black train, you need to use 1 ticket.\n\nThe path of a tour must be a simple path \u2014 it must not visit an attraction more than once. You do not need a ticket the first time you board a train. You only have k tickets, meaning you can only switch train types at most k times. In particular, you do not need a ticket to go through a path consisting of one rail color.\n\nDefine f(u, v) as the sum of happiness values of the attractions in the tour (u, v), which is a simple path that starts at the u-th attraction and ends at the v-th attraction. Find the sum of f(u,v) for all valid tours (u, v) (1 \u2264 u \u2264 v \u2264 n) that does not need more than k tickets, modulo 10^9 + 7.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 k \u2264 n-1) \u2014 the number of attractions in the city park and the number of tickets you have.\n\nThe second line contains n integers a_1, a_2,\u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the happiness value of each attraction.\n\nThe i-th of the next n - 1 lines contains three integers u_i, v_i, and t_i (1 \u2264 u_i, v_i \u2264 n, 0 \u2264 t_i \u2264 1) \u2014 an edge between vertices u_i and v_i with color t_i. The given edges form a tree.\n\nOutput\n\nOutput an integer denoting the total happiness value for all valid tours (u, v) (1 \u2264 u \u2264 v \u2264 n), modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n5 0\n1 3 2 6 4\n1 2 1\n1 4 0\n3 2 1\n2 5 0\n\n\nOutput\n\n\n45\n\n\nInput\n\n\n3 1\n1 1 1\n1 2 1\n3 2 0\n\n\nOutput\n\n\n10\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8442372679710388, 0.07852207869291306, 0.00721405353397131, 0.010634912177920341, 0.023733170703053474, 0.005902089644223452, 0.003958037588745356, 0.025798438116908073], "true_rank": 1}
{"id": "code_contests/5", "prompt": "# Finding Expected Value\n\nMr. Chanek opened a letter from his fellow, who is currently studying at Singanesia. Here is what it says.\n\nDefine an array b (0 \u2264 b_i < k) with n integers. While there exists a pair (i, j) such that b_i \u2260 b_j, do the following operation:\n\n  * Randomly pick a number i satisfying 0 \u2264 i < n. Note that each number i has a probability of 1/n to be picked. \n  * Randomly Pick a number j satisfying 0 \u2264 j < k. \n  * Change the value of b_i to j. It is possible for b_i to be changed to the same value. \n\n\n\nDenote f(b) as the expected number of operations done to b until all elements of b are equal. \n\nYou are given two integers n and k, and an array a (-1 \u2264 a_i < k) of n integers. \n\nFor every index i with a_i = -1, replace a_i with a random number j satisfying 0 \u2264 j < k. Let c be the number of occurrences of -1 in a. There are k^c possibilites of a after the replacement, each with equal probability of being the final array.\n\nFind the expected value of f(a) modulo 10^9 + 7. \n\nFormally, let M = 10^9 + 7. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q not \u2261 0 \\pmod{M}. Output the integer equal to p \u22c5 q^{-1} mod M. In other words, output such an integer x that 0 \u2264 x < M and x \u22c5 q \u2261 p \\pmod{M}.\n\nAfter reading the letter, Mr. Chanek gave the task to you. Solve it for the sake of their friendship!\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 10^5, 2 \u2264 k \u2264 10^9). \n\nThe second line contains n integers a_1, a_2, \u2026, a_n (-1 \u2264 a_i < k).\n\nOutput\n\nOutput an integer denoting the expected value of f(a) modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n2 2\n0 1\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n2 2\n0 -1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n3 3\n0 1 1\n\n\nOutput\n\n\n12\n\n\nInput\n\n\n3 3\n-1 -1 -1\n\n\nOutput\n\n\n11\n\n\nInput\n\n\n10 9\n-1 0 -1 1 1 2 2 3 3 3\n\n\nOutput\n\n\n652419213\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9586611390113831, 0.026660926640033722, 0.0011824383400380611, 0.0016440830659121275, 0.005145222879946232, 0.0023183277808129787, 0.0014207852073013783, 0.002967046108096838], "true_rank": 0}
{"id": "code_contests/45", "prompt": "# Life of a Flower\n\nPetya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 1, "probability": [0.37214595079421997, 0.37614843249320984, 0.014224043115973473, 0.027992859482765198, 0.026406075805425644, 0.015638703480362892, 0.02243925631046295, 0.14500470459461212], "true_rank": 4}
{"id": "code_contests/77", "prompt": "# Robot Factory\n\nYou have received data from a Bubble bot. You know your task is to make factory facilities, but before you even start, you need to know how big the factory is and how many rooms it has. When you look at the data you see that you have the dimensions of the construction, which is in rectangle shape: N x M. \n\nThen in the next N lines you have M numbers. These numbers represent factory tiles and they can go from 0 to 15. Each of these numbers should be looked in its binary form. Because from each number you know on which side the tile has walls. For example number 10 in it's binary form is 1010, which means that it has a wall from the North side, it doesn't have a wall from the East, it has a wall on the South side and it doesn't have a wall on the West side. So it goes North, East, South, West. \n\nIt is guaranteed that the construction always has walls on it's edges. The input will be correct. \n\nYour task is to print the size of the rooms from biggest to smallest. \n\nInput\n\nThe first line has two numbers which are N and M, the size of the construction. Both are integers: \n\nn (1 \u2264 n \u2264 10^3)\n\nm (1 \u2264 m \u2264 10^3)\n\nNext N x M numbers represent each tile of construction.\n\nOutput\n\nOnce you finish processing the data your output consists of one line sorted from biggest to smallest room sizes. \n\nExample\n\nInput\n\n\n4 5\n9 14 11 12 13\n5 15 11 6 7\n5 9 14 9 14\n3 2 14 3 14\n\n\nOutput\n\n\n9 4 4 2 1 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 1, "probability": [0.29317131638526917, 0.6136729717254639, 0.004708434455096722, 0.00737941125407815, 0.010825089178979397, 0.007722682785242796, 0.006909736432135105, 0.055610291659832], "true_rank": 0}
{"id": "code_contests/90", "prompt": "# Moderate Modular Mode\n\nYouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.5643150210380554, 0.02557222731411457, 0.048621077090501785, 0.01772177778184414, 0.2691710889339447, 0.017867714166641235, 0.020080765709280968, 0.03665037825703621], "true_rank": 0}
{"id": "code_contests/143", "prompt": "# MEX and Increments\n\nDmitry has an array of n non-negative integers a_1, a_2, ..., a_n.\n\nIn one operation, Dmitry can choose any index j (1 \u2264 j \u2264 n) and increase the value of the element a_j by 1. He can choose the same index j multiple times.\n\nFor each i from 0 to n, determine whether Dmitry can make the MEX of the array equal to exactly i. If it is possible, then determine the minimum number of operations to do it.\n\nThe MEX of the array is equal to the minimum non-negative integer that is not in the array. For example, the MEX of the array [3, 1, 0] is equal to 2, and the array [3, 3, 1, 4] is equal to 0.\n\nInput\n\nThe first line of input data contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. \n\nThe descriptions of the test cases follow.\n\nThe first line of the description of each test case contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line of the description of each test case contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 n) \u2014 elements of the array a.\n\nIt is guaranteed that the sum of the values n over all test cases in the test does not exceed 2\u22c510^5.\n\nOutput\n\nFor each test case, output n + 1 integer \u2014 i-th number is equal to the minimum number of operations for which you can make the array MEX equal to i (0 \u2264 i \u2264 n), or -1 if this cannot be done.\n\nExample\n\nInput\n\n\n5\n3\n0 1 3\n7\n0 1 2 3 4 3 2\n4\n3 0 0 0\n7\n4 6 2 3 5 0 5\n5\n4 0 1 0 4\n\n\nOutput\n\n\n1 1 0 -1 \n1 1 2 2 1 0 2 6 \n3 0 1 4 3 \n1 0 -1 -1 -1 -1 -1 -1 \n2 1 0 2 -1 -1 \n\nNote\n\nIn the first set of example inputs, n=3:\n\n  * to get MEX=0, it is enough to perform one increment: a_1++; \n  * to get MEX=1, it is enough to perform one increment: a_2++; \n  * MEX=2 for a given array, so there is no need to perform increments; \n  * it is impossible to get MEX=3 by performing increments. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8960124254226685, 0.08674537390470505, 0.0005969201447442174, 0.0011904375860467553, 0.01299629732966423, 0.0008657742873765528, 0.0006635375320911407, 0.0009291862370446324], "true_rank": 1}
{"id": "code_contests/53", "prompt": "# Make Them Equal\n\nTheofanis has a string s_1 s_2 ... s_n and a character c. He wants to make all characters of the string equal to c using the minimum number of operations.\n\nIn one operation he can choose a number x (1 \u2264 x \u2264 n) and for every position i, where i is not divisible by x, replace s_i with c. \n\nFind the minimum number of operations required to make all the characters equal to c and the x-s that he should use in his operations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains the integer n (3 \u2264 n \u2264 3 \u22c5 10^5) and a lowercase Latin letter c \u2014 the length of the string s and the character the resulting string should consist of.\n\nThe second line of each test case contains a string s of lowercase Latin letters \u2014 the initial string.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, firstly print one integer m \u2014 the minimum number of operations required to make all the characters equal to c.\n\nNext, print m integers x_1, x_2, ..., x_m (1 \u2264 x_j \u2264 n) \u2014 the x-s that should be used in the order they are given.\n\nIt can be proved that under given constraints, an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n3\n4 a\naaaa\n4 a\nbaaa\n4 b\nbzyx\n\n\nOutput\n\n\n0\n1\n2\n2 \n2 3\n\nNote\n\nLet's describe what happens in the third test case: \n\n  1. x_1 = 2: we choose all positions that are not divisible by 2 and replace them, i. e. bzyx \u2192 bzbx; \n  2. x_2 = 3: we choose all positions that are not divisible by 3 and replace them, i. e. bzbx \u2192 bbbb. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9115703701972961, 0.021617811173200607, 0.0026141596026718616, 0.004127002786844969, 0.04625162482261658, 0.0035108993761241436, 0.0022400589659810066, 0.008067993447184563], "true_rank": 0}
{"id": "code_contests/114", "prompt": "# Absent Remainder\n\nYou are given a sequence a_1, a_2, ..., a_n consisting of n pairwise distinct positive integers.\n\nFind \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that: \n\n  * x \u2260 y; \n  * x and y appear in a; \n  * x~mod~y doesn't appear in a. \n\n\n\nNote that some x or y can belong to multiple pairs.\n\n\u230a x \u230b denotes the floor function \u2014 the largest integer less than or equal to x. x~mod~y denotes the remainder from dividing x by y.\n\nIf there are multiple solutions, print any of them. It can be shown that at least one solution always exists.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the sequence.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6).\n\nAll numbers in the sequence are pairwise distinct. The sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nThe answer for each testcase should contain \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that x \u2260 y, x and y appear in a and x~mod~y doesn't appear in a. Print the pairs one after another.\n\nYou can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is x and the second number is y. All pairs should be pairwise distinct.\n\nIf there are multiple solutions, print any of them.\n\nExample\n\nInput\n\n\n4\n2\n1 4\n4\n2 8 3 4\n5\n3 8 5 9 7\n6\n2 7 5 3 4 8\n\n\nOutput\n\n\n4 1\n8 2\n8 4\n9 5\n7 5\n8 7\n4 3\n5 2\n\nNote\n\nIn the first testcase there are only two pairs: (1, 4) and (4, 1). \\left\u230a \\frac 2 2 \\right\u230b=1, so we have to find one pair. 1~mod~4=1, and 1 appears in a, so that pair is invalid. Thus, the only possible answer is a pair (4, 1).\n\nIn the second testcase, we chose pairs 8~mod~2=0 and 8~mod~4=0. 0 doesn't appear in a, so that answer is valid. There are multiple possible answers for that testcase.\n\nIn the third testcase, the chosen pairs are 9~mod~5=4 and 7~mod~5=2. Neither 4, nor 2, appears in a, so that answer is valid.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.6020922660827637, 0.11923479288816452, 0.1469733566045761, 0.022249512374401093, 0.03805205598473549, 0.0331973172724247, 0.017504937946796417, 0.020695777609944344], "true_rank": 0}
{"id": "code_contests/97", "prompt": "# Tree Queries\n\nYou are given a tree consisting of n vertices. Recall that a tree is an undirected connected acyclic graph. The given tree is rooted at the vertex 1.\n\nYou have to process q queries. In each query, you are given a vertex of the tree v and an integer k.\n\nTo process a query, you may delete any vertices from the tree in any order, except for the root and the vertex v. When a vertex is deleted, its children become the children of its parent. You have to process a query in such a way that maximizes the value of c(v) - m \u22c5 k (where c(v) is the resulting number of children of the vertex v, and m is the number of vertices you have deleted). Print the maximum possible value you can obtain.\n\nThe queries are independent: the changes you make to the tree while processing a query don't affect the tree in other queries.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of vertices in the tree.\n\nThen n-1 lines follow, the i-th of them contains two integers x_i and y_i (1 \u2264 x_i, y_i \u2264 n; x_i \u2260 y_i) \u2014 the endpoints of the i-th edge. These edges form a tree.\n\nThe next line contains one integer q (1 \u2264 q \u2264 2 \u22c5 10^5) \u2014 the number of queries.\n\nThen q lines follow, the j-th of them contains two integers v_j and k_j (1 \u2264 v_j \u2264 n; 0 \u2264 k_j \u2264 2 \u22c5 10^5) \u2014 the parameters of the j-th query.\n\nOutput\n\nFor each query, print one integer \u2014 the maximum value of c(v) - m \u22c5 k you can achieve.\n\nExample\n\nInput\n\n\n8\n6 7\n3 2\n8 3\n5 7\n7 4\n7 1\n7 3\n6\n1 0\n1 2\n1 3\n7 1\n5 0\n7 200000\n\n\nOutput\n\n\n5\n2\n1\n4\n0\n4\n\nNote\n\nThe tree in the first example is shown in the following picture:\n\n<image>\n\nAnswers to the queries are obtained as follows:\n\n  1. v=1,k=0: you can delete vertices 7 and 3, so the vertex 1 has 5 children (vertices 2, 4, 5, 6, and 8), and the score is 5 - 2 \u22c5 0 = 5; \n  2. v=1,k=2: you can delete the vertex 7, so the vertex 1 has 4 children (vertices 3, 4, 5, and 6), and the score is 4 - 1 \u22c5 2 = 2. \n  3. v=1,k=3: you shouldn't delete any vertices, so the vertex 1 has only one child (vertex 7), and the score is 1 - 0 \u22c5 3 = 1; \n  4. v=7,k=1: you can delete the vertex 3, so the vertex 7 has 5 children (vertices 2, 4, 5, 6, and 8), and the score is 5 - 1 \u22c5 1 = 4; \n  5. v=5,k=0: no matter what you do, the vertex 5 will have no children, so the score is 0; \n  6. v=7,k=200000: you shouldn't delete any vertices, so the vertex 7 has 4 children (vertices 3, 4, 5, and 6), and the score is 4 - 0 \u22c5 200000 = 4. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 1, "probability": [0.3939548432826996, 0.5307208895683289, 0.0032606644090265036, 0.005528466310352087, 0.028258901089429855, 0.008626197464764118, 0.010865400545299053, 0.01878456212580204], "true_rank": 1}
{"id": "code_contests/118", "prompt": "# Tree Coloring\n\nYou are given a rooted tree consisting of n vertices numbered from 1 to n. The root of the tree is the vertex 1.\n\nYou have to color all vertices of the tree into n colors (also numbered from 1 to n) so that there is exactly one vertex for each color. Let c_i be the color of vertex i, and p_i be the parent of vertex i in the rooted tree. The coloring is considered beautiful if there is no vertex k (k > 1) such that c_k = c_{p_k} - 1, i. e. no vertex such that its color is less than the color of its parent by exactly 1.\n\nCalculate the number of beautiful colorings, and print it modulo 998244353.\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 250000) \u2014 the number of vertices in the tree.\n\nThen n-1 lines follow, the i-th line contains two integers x_i and y_i (1 \u2264 x_i, y_i \u2264 n; x_i \u2260 y_i) denoting an edge between the vertex x_i and the vertex y_i. These edges form a tree.\n\nOutput\n\nPrint one integer \u2014 the number of beautiful colorings, taken modulo 998244353.\n\nExamples\n\nInput\n\n\n5\n1 2\n3 2\n4 2\n2 5\n\n\nOutput\n\n\n42\n\n\nInput\n\n\n5\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n53\n\n\nInput\n\n\n20\n20 19\n20 4\n12 4\n5 8\n1 2\n20 7\n3 10\n7 18\n11 8\n9 10\n17 10\n1 15\n11 16\n14 11\n18 10\n10 1\n14 2\n13 17\n20 6\n\n\nOutput\n\n\n955085064\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9824621677398682, 0.003746915142983198, 0.0010396798606961966, 0.0026637944392859936, 0.0034851639065891504, 0.0024483944289386272, 0.0013918053591623902, 0.0027620878536254168], "true_rank": 0}
{"id": "code_contests/98", "prompt": "# Linear Keyboard\n\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.6930854916572571, 0.11201965808868408, 0.00885346531867981, 0.015087774954736233, 0.07509336620569229, 0.008984610438346863, 0.051934342831373215, 0.03494121879339218], "true_rank": 4}
{"id": "code_contests/111", "prompt": "# MEX counting\n\nFor an array c of nonnegative integers, MEX(c) denotes the smallest nonnegative integer that doesn't appear in it. For example, MEX([0, 1, 3]) = 2, MEX([42]) = 0.\n\nYou are given integers n, k, and an array [b_1, b_2, \u2026, b_n].\n\nFind the number of arrays [a_1, a_2, \u2026, a_n], for which the following conditions hold:\n\n  * 0 \u2264 a_i \u2264 n for each i for each i from 1 to n.\n\n  * |MEX([a_1, a_2, \u2026, a_i]) - b_i| \u2264 k for each i from 1 to n.\n\n\n\n\nAs this number can be very big, output it modulo 998 244 353.\n\nInput\n\nThe first line of the input contains two integers n, k (1 \u2264 n \u2264 2000, 0 \u2264 k \u2264 50).\n\nThe second line of the input contains n integers b_1, b_2, \u2026, b_n (-k \u2264 b_i \u2264 n+k) \u2014 elements of the array b.\n\nOutput\n\nOutput a single integer \u2014 the number of arrays which satisfy the conditions from the statement, modulo 998 244 353.\n\nExamples\n\nInput\n\n\n4 0\n0 0 0 0\n\n\nOutput\n\n\n256\n\n\nInput\n\n\n4 1\n0 0 0 0\n\n\nOutput\n\n\n431\n\n\nInput\n\n\n4 1\n0 0 1 1\n\n\nOutput\n\n\n509\n\n\nInput\n\n\n5 2\n0 0 2 2 0\n\n\nOutput\n\n\n6546\n\n\nInput\n\n\n3 2\n-2 0 4\n\n\nOutput\n\n\n11\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8036971092224121, 0.11213894188404083, 0.003590002888813615, 0.023427842184901237, 0.03730297088623047, 0.00790298730134964, 0.005117671564221382, 0.00682248268276453], "true_rank": 0}
{"id": "code_contests/124", "prompt": "# LEGOndary Grandmaster\n\nAfter getting bored by playing with crayons, you decided to switch to Legos! Today, you're working with a long strip, with height 1 and length n, some positions of which are occupied by 1 by 1 Lego pieces.\n\nIn one second, you can either remove two adjacent Lego pieces from the strip (if both are present), or add two Lego pieces to adjacent positions (if both are absent). You can only add or remove Lego's at two adjacent positions at the same time, as otherwise your chubby fingers run into precision issues.\n\nYou want to know exactly how much time you'll spend playing with Legos. You value efficiency, so given some starting state and some ending state, you'll always spend the least number of seconds to transform the starting state into the ending state. If it's impossible to transform the starting state into the ending state, you just skip it (so you spend 0 seconds).\n\nThe issue is that, for some positions, you don't remember whether there were Legos there or not (in either the starting state, the ending state, or both). Over all pairs of (starting state, ending state) that are consistent with your memory, find the total amount of time it will take to transform the starting state to the ending state. Print this value modulo 1 000 000 007 (10^9 + 7). \n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 2000) \u2014 the size of the Lego strip.\n\nThe second line of each test case contains a string s of length n, consisting of the characters 0, 1, and ? \u2014 your memory of the starting state: \n\n  * 1 represents a position that definitely has a Lego piece, \n  * 0 represents a position that definitely does not have a Lego piece, \n  * and ? represents a position that you don't remember. \n\n\n\nThe third line of each test case contains a string t of length n, consisting of the characters 0, 1, and ? \u2014 your memory of the ending state. It follows a similar format to the starting state.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 2000.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem modulo 1 000 000 007 (10^9 + 7). \n\nExample\n\nInput\n\n\n6\n2\n00\n11\n3\n???\n???\n3\n??1\n0?0\n4\n??0?\n??11\n5\n?????\n0??1?\n10\n?01??01?1?\n??100?1???\n\n\nOutput\n\n\n1\n16\n1\n14\n101\n1674\n\nNote\n\nFor the first test case, 00 is the only possible starting state, and 11 is the only possible ending state. It takes exactly one operation to change 00 to 11.\n\nFor the second test case, some of the possible starting and ending state pairs are: \n\n  * (000, 011) \u2014 takes 1 operation. \n  * (001, 100) \u2014 takes 2 operations. \n  * (010, 000) \u2014 takes 0 operations, as it's impossible to achieve the ending state. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.6005207896232605, 0.27999281883239746, 0.005991686601191759, 0.007480132859200239, 0.05754706636071205, 0.006272363010793924, 0.01925548166036606, 0.022939762100577354], "true_rank": 1}
{"id": "code_contests/56", "prompt": "# Rubik's Cube Coloring (hard version)\n\nIt is the hard version of the problem. The difference is that in this version, there are nodes with already chosen colors.\n\nTheofanis is starving, and he wants to eat his favorite food, sheftalia. However, he should first finish his homework. Can you help him with this problem?\n\nYou have a perfect binary tree of 2^k - 1 nodes \u2014 a binary tree where all vertices i from 1 to 2^{k - 1} - 1 have exactly two children: vertices 2i and 2i + 1. Vertices from 2^{k - 1} to 2^k - 1 don't have any children. You want to color its vertices with the 6 Rubik's cube colors (White, Green, Red, Blue, Orange and Yellow).\n\nLet's call a coloring good when all edges connect nodes with colors that are neighboring sides in the Rubik's cube.\n\n<image>| <image>  \n---|---  \nA picture of Rubik's cube and its 2D map.\n\nMore formally: \n\n  * a white node can not be neighboring with white and yellow nodes; \n  * a yellow node can not be neighboring with white and yellow nodes; \n  * a green node can not be neighboring with green and blue nodes; \n  * a blue node can not be neighboring with green and blue nodes; \n  * a red node can not be neighboring with red and orange nodes; \n  * an orange node can not be neighboring with red and orange nodes; \n\n\n\nHowever, there are n special nodes in the tree, colors of which are already chosen.\n\nYou want to calculate the number of the good colorings of the binary tree. Two colorings are considered different if at least one node is colored with a different color.\n\nThe answer may be too large, so output the answer modulo 10^9+7.\n\nInput\n\nThe first line contains the integers k (1 \u2264 k \u2264 60) \u2014 the number of levels in the perfect binary tree you need to color.\n\nThe second line contains the integer n (1 \u2264 n \u2264 min(2^k - 1, 2000)) \u2014 the number of nodes, colors of which are already chosen.\n\nThe next n lines contains integer v (1 \u2264 v \u2264 2^k - 1) and string s \u2014 the index of the node and the color of the node (s is one of the white, yellow, green, blue, red and orange).\n\nIt is guaranteed that each node v appears in the input at most once.\n\nOutput\n\nPrint one integer \u2014 the number of the different colorings modulo 10^9+7.\n\nExamples\n\nInput\n\n\n3\n2\n5 orange\n2 white\n\n\nOutput\n\n\n1024\n\n\nInput\n\n\n2\n2\n1 white\n2 white\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n10\n3\n1 blue\n4 red\n5 orange\n\n\nOutput\n\n\n328925088\n\nNote\n\nIn the picture below, you can see one of the correct colorings of the first test example.\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9885615706443787, 0.005825252737849951, 0.0005067921010777354, 0.000688502041157335, 0.0017062934348359704, 0.0005949139595031738, 0.0005318020703271031, 0.001584887271746993], "true_rank": 0}
{"id": "code_contests/47", "prompt": "# Minimize Distance\n\nA total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.7346400022506714, 0.16718928515911102, 0.01689477078616619, 0.0074815815314650536, 0.041919585317373276, 0.00916703138500452, 0.004605921451002359, 0.01810188591480255], "true_rank": 0}
{"id": "code_contests/150", "prompt": "# Exact Change\n\nOne day, early in the morning, you decided to buy yourself a bag of chips in the nearby store. The store has chips of n different flavors. A bag of the i-th flavor costs a_i burles.\n\nThe store may run out of some flavors, so you'll decide which one to buy after arriving there. But there are two major flaws in this plan: \n\n  1. you have only coins of 1, 2 and 3 burles; \n  2. since it's morning, the store will ask you to pay in exact change, i. e. if you choose the i-th flavor, you'll have to pay exactly a_i burles. \n\n\n\nCoins are heavy, so you'd like to take the least possible number of coins in total. That's why you are wondering: what is the minimum total number of coins you should take with you, so you can buy a bag of chips of any flavor in exact change?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains the single integer n (1 \u2264 n \u2264 100) \u2014 the number of flavors in the store.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the cost of one bag of each flavor.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum number of coins you need to buy one bag of any flavor you'll choose in exact change.\n\nExample\n\nInput\n\n\n4\n1\n1337\n3\n10 8 10\n5\n1 2 3 4 5\n3\n7 77 777\n\n\nOutput\n\n\n446\n4\n3\n260\n\nNote\n\nIn the first test case, you should, for example, take with you 445 coins of value 3 and 1 coin of value 2. So, 1337 = 445 \u22c5 3 + 1 \u22c5 2.\n\nIn the second test case, you should, for example, take 2 coins of value 3 and 2 coins of value 2. So you can pay either exactly 8 = 2 \u22c5 3 + 1 \u22c5 2 or 10 = 2 \u22c5 3 + 2 \u22c5 2.\n\nIn the third test case, it's enough to take 1 coin of value 3 and 2 coins of value 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8974981307983398, 0.07487773895263672, 0.001986415358260274, 0.0037186446134001017, 0.005172355100512505, 0.0022747903130948544, 0.0032228194177150726, 0.011249061673879623], "true_rank": 0}
{"id": "code_contests/60", "prompt": "# Delete Two Elements\n\nMonocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8135942816734314, 0.06220076233148575, 0.012077083811163902, 0.007686466444283724, 0.057462260127067566, 0.031998924911022186, 0.004829123616218567, 0.010151144117116928], "true_rank": 4}
{"id": "code_contests/0", "prompt": "# Another Sorting Problem\n\nAndi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.39875900745391846, 0.2639732360839844, 0.06529104709625244, 0.02780146710574627, 0.18263524770736694, 0.01379284169524908, 0.011682882905006409, 0.03606428578495979], "true_rank": 6}
{"id": "code_contests/26", "prompt": "# CQXYM Count Permutations\n\nCQXYM is counting permutations length of 2n.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA permutation p(length of 2n) will be counted only if the number of i satisfying p_i<p_{i+1} is no less than n. For example:\n\n  * Permutation [1, 2, 3, 4] will count, because the number of such i that p_i<p_{i+1} equals 3 (i = 1, i = 2, i = 3).\n  * Permutation [3, 2, 1, 4] won't count, because the number of such i that p_i<p_{i+1} equals 1 (i = 3). \n\n\n\nCQXYM wants you to help him to count the number of such permutations modulo 1000000007 (10^9+7).\n\nIn addition, [modulo operation](https://en.wikipedia.org/wiki/Modulo_operation) is to get the remainder. For example:\n\n  * 7 mod 3=1, because 7 = 3 \u22c5 2 + 1, \n  * 15 mod 4=3, because 15 = 4 \u22c5 3 + 3. \n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (t \u2265 1) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains an integer n(1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5\n\nOutput\n\nFor each test case, print the answer in a single line.\n\nExample\n\nInput\n\n\n4\n1\n2\n9\n91234\n\n\nOutput\n\n\n1\n12\n830455698\n890287984\n\nNote\n\nn=1, there is only one permutation that satisfies the condition: [1,2].\n\nIn permutation [1,2], p_1<p_2, and there is one i=1 satisfy the condition. Since 1 \u2265 n, this permutation should be counted. In permutation [2,1], p_1>p_2. Because 0<n, this permutation should not be counted.\n\nn=2, there are 12 permutations: [1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[2,1,3,4],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,4,1,2],[4,1,2,3].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.7674795389175415, 0.21922560036182404, 0.0010722394799813628, 0.0025752787478268147, 0.0028392327949404716, 0.0024608538951724768, 0.0010279191192239523, 0.0033193458802998066], "true_rank": 1}
{"id": "code_contests/142", "prompt": "# New Year's Problem\n\nVlad has n friends, for each of whom he wants to buy one gift for the New Year.\n\nThere are m shops in the city, in each of which he can buy a gift for any of his friends. If the j-th friend (1 \u2264 j \u2264 n) receives a gift bought in the shop with the number i (1 \u2264 i \u2264 m), then the friend receives p_{ij} units of joy. The rectangular table p_{ij} is given in the input.\n\nVlad has time to visit at most n-1 shops (where n is the number of friends). He chooses which shops he will visit and for which friends he will buy gifts in each of them.\n\nLet the j-th friend receive a_j units of joy from Vlad's gift. Let's find the value \u03b1=min\\\\{a_1, a_2, ..., a_n\\}. Vlad's goal is to buy gifts so that the value of \u03b1 is as large as possible. In other words, Vlad wants to maximize the minimum of the joys of his friends.\n\nFor example, let m = 2, n = 2. Let the joy from the gifts that we can buy in the first shop: p_{11} = 1, p_{12}=2, in the second shop: p_{21} = 3, p_{22}=4.\n\nThen it is enough for Vlad to go only to the second shop and buy a gift for the first friend, bringing joy 3, and for the second \u2014 bringing joy 4. In this case, the value \u03b1 will be equal to min\\{3, 4\\} = 3\n\nHelp Vlad choose gifts for his friends so that the value of \u03b1 is as high as possible. Please note that each friend must receive one gift. Vlad can visit at most n-1 shops (where n is the number of friends). In the shop, he can buy any number of gifts.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input.\n\nAn empty line is written before each test case. Then there is a line containing integers m and n (2 \u2264 n, 2 \u2264 n \u22c5 m \u2264 10^5) separated by a space \u2014 the number of shops and the number of friends, where n \u22c5 m is the product of n and m.\n\nThen m lines follow, each containing n numbers. The number in the i-th row of the j-th column p_{ij} (1 \u2264 p_{ij} \u2264 10^9) is the joy of the product intended for friend number j in shop number i.\n\nIt is guaranteed that the sum of the values n \u22c5 m over all test cases in the test does not exceed 10^5.\n\nOutput\n\nPrint t lines, each line must contain the answer to the corresponding test case \u2014 the maximum possible value of \u03b1, where \u03b1 is the minimum of the joys from a gift for all of Vlad's friends.\n\nExample\n\nInput\n\n\n5\n\n2 2\n1 2\n3 4\n\n4 3\n1 3 1\n3 1 1\n1 2 2\n1 1 3\n\n2 3\n5 3 4\n2 5 1\n\n4 2\n7 9\n8 1\n9 6\n10 8\n\n2 4\n6 5 2 1\n7 9 7 2\n\n\nOutput\n\n\n3\n2\n4\n8\n2\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8752385973930359, 0.025315579026937485, 0.0010821128962561488, 0.002262627938762307, 0.08903668075799942, 0.0022001133766025305, 0.0017560062697157264, 0.003108246950432658], "true_rank": 0}
{"id": "code_contests/12", "prompt": "# Managing Telephone Poles\n\nMr. Chanek's city can be represented as a plane. He wants to build a housing complex in the city.\n\nThere are some telephone poles on the plane, which is represented by a grid a of size (n + 1) \u00d7 (m + 1). There is a telephone pole at (x, y) if a_{x, y} = 1.\n\nFor each point (x, y), define S(x, y) as the square of the Euclidean distance between the nearest pole and (x, y). Formally, the square of the Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is (x_2 - x_1)^2 + (y_2 - y_1)^2.\n\nTo optimize the building plan, the project supervisor asks you the sum of all S(x, y) for each 0 \u2264 x \u2264 n and 0 \u2264 y \u2264 m. Help him by finding the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nInput\n\nThe first line contains two integers n and m (0 \u2264 n, m < 2000) \u2014 the size of the grid.\n\nThen (n + 1) lines follow, each containing (m + 1) integers a_{i, j} (0 \u2264 a_{i, j} \u2264 1) \u2014 the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.\n\nOutput\n\nOutput an integer denoting the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nExamples\n\nInput\n\n\n2 2\n101\n000\n000\n\n\nOutput\n\n\n18\n\n\nInput\n\n\n5 4\n10010\n00000\n01000\n00001\n00100\n00010\n\n\nOutput\n\n\n36\n\nNote\n\n<image>\n\nIn the first example, the nearest telephone pole for the points (0,0), (1,0), (2,0), (0,1), (1,1), and (2,1) is at (0, 0). While the nearest telephone pole for the points (0, 2), (1,2), and (2,2) is at (0, 2). Thus, \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}} = (0 + 1 + 4) + (1 + 2 + 5) + (0 + 1 + 4) = 18.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.41834282875061035, 0.38816651701927185, 0.006929838564246893, 0.032363224774599075, 0.1257144659757614, 0.007317329291254282, 0.007037960458546877, 0.01412784680724144], "true_rank": 3}
{"id": "code_contests/70", "prompt": "# Mars\n\nIn the year 2420 humans have finally built a colony on Mars thanks to the work of Elon Tusk. There are 10^9+7 cities arranged in a circle in this colony and none of them are connected yet. Elon Tusk wants to connect some of those cities using only roads of the same size in order to lower the production cost of those roads. Because of that he gave a list on N cites where some cites can appear more than once and Q queries that you need to answer. For the query you need to determine if it is possible to connect all the cities from L_{i} to R_{i} on that list using only roads of length D_{i}. \n\nInput\n\nThe first line contains two integers N and Q (1 \u2264 N, Q \u2264 2\u22c510^5 ) \u2014 the length of the array of cities and the number of queries you need to answer. \n\nThe second lines contains N integers representing the array of cites. Next Q lines contain three integers L, R and D (1 \u2264 L_{i}, R_{i} \u2264 N, 0 \u2264 D_{i} \u2264 10^9+6) \u2014 the range of cities that needs to be connected and the length of the road that you can use. \n\nOutput\n\nThe output contains Q lines. If it is possible to connect all the cities from the i-th query can be connected with roads of length D_{i} the i-th line should contain the word \"Yes\", otherwise it should contain the word \"No\". \n\nExamples\n\nInput\n\n\n9 8\n17 0 12 6 10 8 2 4 5\n2 3 12\n2 3 6\n2 4 6\n4 6 2\n2 8 2\n1 2 17\n1 8 2\n9 9 14\n\n\nOutput\n\n\nYes\nNo\nYes\nYes\nYes\nYes\nNo\nYes\n\n\nInput\n\n\n4 1\n7 21 14 0\n1 4 1000000000\n\n\nOutput\n\n\nYes\n\nNote\n\nIn the 5^{th} query of the first test case we can connect cities in this order 0-2-4-6-8-10-12 this way distance between any two connected cities is 2. In the second test case we can connect cities in this order 21-14-7-0 this way distance between any two connected cities is 10^9 module 10^9+7. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9039934277534485, 0.04923102632164955, 0.004499797243624926, 0.003475917736068368, 0.009376147761940956, 0.003995845559984446, 0.003888232633471489, 0.021539589390158653], "true_rank": 0}
{"id": "code_contests/11", "prompt": "# Longest Array Deconstruction\n\nMr. Chanek gives you a sequence a indexed from 1 to n. Define f(a) as the number of indices where a_i = i. \n\nYou can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the 3-rd element from the sequence [4, 2, 3, 1], the resulting sequence will be [4, 2, 1]. \n\nYou want to remove some elements from a in order to maximize f(a), using zero or more operations. Find the largest possible f(a).\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the initial length of the sequence.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the initial sequence a.\n\nOutput\n\nOutput an integer denoting the largest f(a) that can be obtained by doing zero or more operations.\n\nExamples\n\nInput\n\n\n7\n2 1 4 2 5 3 7\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n4\n4 2 3 1\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example, f(A) = 3 by doing the following operations.\n\n[2,1,4,2,5,3,7] \u2192 [2,1,2,5,3,7] \u2192 [1,2,5,3,7] \u2192 [1,2,5,3] \u2192 [1,2,3]\n\nIn the second example, f(A) = 2 and no additional operation is needed.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.930823564529419, 0.04717899486422539, 0.0016010793624445796, 0.003304113633930683, 0.005727567244321108, 0.002851242898032069, 0.001849115127697587, 0.006664398591965437], "true_rank": 0}
{"id": "code_contests/74", "prompt": "# Bob's Beautiful Array\n\nBob really likes playing with arrays of numbers. That's why for his birthday, his friends bought him a really interesting machine \u2013 an array beautifier. \n\nThe array beautifier takes an array A consisting of N integers, and it outputs a new array B of length N that it constructed based on the array given to it. The array beautifier constructs the new array in the following way: it takes two numbers at different indices from the original array and writes their sum to the end of the new array. It does this step N times - resulting in an output array of length N. During this process, the machine can take the same index multiple times in different steps. \n\nBob was very excited about the gift that his friends gave him, so he put his favorite array in the machine. However, when the machine finished, Bob was not happy with the resulting array. He misses his favorite array very much, and hopes to get it back. \n\nGiven the array that the machine outputted, help Bob find an array that could be the original array that he put in the machine. Sometimes the machine makes mistakes, so it is possible that no appropriate input array exists for the array it has outputted. In such case, let Bob know that his array is forever lost.\n\nInput\n\nThe first line contains one positive integer N (2 \u2264 N \u2264 10^3) \u2013 the length of Bob's array.\n\nThe second line contains N integers B_1, B_2, ..., B_N (1 \u2264 B_i \u2264 10^6) \u2013 the elements of the array the machine outputted.\n\nOutput\n\nIf an appropriate input array exists, print \"YES\", followed by the input array A_1, A_2, ..., A_N (-10^9 \u2264 A_i \u2264 10^9) in the next line. Otherwise, print \"NO\".\n\nExamples\n\nInput\n\n\n2\n5 5\n\n\nOutput\n\n\nYES\n2 3\n\n\nInput\n\n\n3\n1 2 3\n\n\nOutput\n\n\nYES\n0 1 2\n\n\nInput\n\n\n3\n2 4 5\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n4\n1 3 5 7\n\n\nOutput\n\n\nYES\n6 -3 4 1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8626372218132019, 0.11028342694044113, 0.0025653098709881306, 0.002184853423386812, 0.010147467255592346, 0.002905136439949274, 0.0018170780967921019, 0.0074596102349460125], "true_rank": 0}
{"id": "code_contests/100", "prompt": "# Minimum Extraction\n\nYelisey has an array a of n integers.\n\nIf a has length strictly greater than 1, then Yelisei can apply an operation called minimum extraction to it: \n\n  1. First, Yelisei finds the minimal number m in the array. If there are several identical minima, Yelisey can choose any of them. \n  2. Then the selected minimal element is removed from the array. After that, m is subtracted from each remaining element. \n\n\n\nThus, after each operation, the length of the array is reduced by 1.\n\nFor example, if a = [1, 6, -4, -2, -4], then the minimum element in it is a_3 = -4, which means that after this operation the array will be equal to a=[1 {- (-4)}, 6 {- (-4)}, -2 {- (-4)}, -4 {- (-4)}] = [5, 10, 2, 0].\n\nSince Yelisey likes big numbers, he wants the numbers in the array a to be as big as possible.\n\nFormally speaking, he wants to make the minimum of the numbers in array a to be maximal possible (i.e. he want to maximize a minimum). To do this, Yelisey can apply the minimum extraction operation to the array as many times as he wants (possibly, zero). Note that the operation cannot be applied to an array of length 1.\n\nHelp him find what maximal value can the minimal element of the array have after applying several (possibly, zero) minimum extraction operations to the array.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the original length of the array a. The second line of the description lists n space-separated integers a_i (-10^9 \u2264 a_i \u2264 10^9) \u2014 elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer \u2014 the maximal possible minimum in a, which can be obtained by several applications of the described operation to it.\n\nExample\n\nInput\n\n\n8\n1\n10\n2\n0 0\n3\n-1 2 0\n4\n2 10 1 7\n2\n2 3\n5\n3 2 -4 -2 0\n2\n-1 1\n1\n-2\n\n\nOutput\n\n\n10\n0\n2\n5\n2\n2\n2\n-2\n\nNote\n\nIn the first example test case, the original length of the array n = 1. Therefore minimum extraction cannot be applied to it. Thus, the array remains unchanged and the answer is a_1 = 10.\n\nIn the second set of input data, the array will always consist only of zeros.\n\nIn the third set, the array will be changing as follows: [\\color{blue}{-1}, 2, 0] \u2192 [3, \\color{blue}{1}] \u2192 [\\color{blue}{2}]. The minimum elements are highlighted with \\color{blue}{blue}. The maximal one is 2.\n\nIn the fourth set, the array will be modified as [2, 10, \\color{blue}{1}, 7] \u2192 [\\color{blue}{1}, 9, 6] \u2192 [8, \\color{blue}{5}] \u2192 [\\color{blue}{3}]. Similarly, the maximum of the minimum elements is 5.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9261459708213806, 0.03421465680003166, 0.0015967943472787738, 0.002729312516748905, 0.016927218064665794, 0.0029756410513073206, 0.0018742441898211837, 0.013536124490201473], "true_rank": 1}
{"id": "code_contests/95", "prompt": "# Red-Blue Matrix\n\nYou are given a matrix, consisting of n rows and m columns. The j-th cell of the i-th row contains an integer a_{ij}.\n\nFirst, you have to color each row of the matrix either red or blue in such a way that at least one row is colored red and at least one row is colored blue.\n\nThen, you have to choose an integer k (1 \u2264 k < m) and cut the colored matrix in such a way that the first k columns become a separate matrix (the left matrix) and the last m-k columns become a separate matrix (the right matrix).\n\nThe coloring and the cut are called perfect if two properties hold: \n\n  * every red cell in the left matrix contains an integer greater than every blue cell in the left matrix; \n  * every blue cell in the right matrix contains an integer greater than every red cell in the right matrix. \n\n\n\nFind any perfect coloring and cut, or report that there are none.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains two integers n and m (2 \u2264 n, m \u2264 5 \u22c5 10^5; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the matrix, respectively.\n\nThe i-th of the next n lines contains m integers a_{i1}, a_{i2}, ..., a_{im} (1 \u2264 a_{ij} \u2264 10^6).\n\nThe sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase print an answer. If there are no perfect colorings and cuts in the matrix, then print \"NO\".\n\nOtherwise, first, print \"YES\". Then a string, consisting of n characters: the i-th character should be 'R' if the i-th row is colored red and 'B' if it's colored blue. The string should contain at least one 'R' and at least one 'B'. Finally, print an integer k (1 \u2264 k < m) \u2014 the number of columns from the left that are cut.\n\nExample\n\nInput\n\n\n3\n5 5\n1 5 8 8 7\n5 2 1 4 3\n1 6 9 7 5\n9 3 3 3 2\n1 7 9 9 8\n3 3\n8 9 8\n1 5 3\n7 5 7\n2 6\n3 3 3 2 2 2\n1 1 1 4 4 4\n\n\nOutput\n\n\nYES\nBRBRB 1\nNO\nYES\nRB 3\n\nNote\n\nThe coloring and the cut for the first testcase:\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8721352219581604, 0.06396935880184174, 0.006075700279325247, 0.004102608188986778, 0.0242758858948946, 0.005555001087486744, 0.0031935377046465874, 0.02069261483848095], "true_rank": 1}
{"id": "code_contests/108", "prompt": "# Game Master\n\nn players are playing a game. \n\nThere are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. \n\nYou are the game master and want to organize a tournament. There will be a total of n-1 battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. \n\nIn the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of players.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9, a_i \u2260 a_j for i \u2260 j), where a_i is the strength of the i-th player on the first map. \n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9, b_i \u2260 b_j for i \u2260 j), where b_i is the strength of the i-th player on the second map. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a string of length n. i-th character should be \"1\" if the i-th player can win the tournament, or \"0\" otherwise.\n\nExample\n\nInput\n\n\n3\n4\n1 2 3 4\n1 2 3 4\n4\n11 12 20 21\n44 22 11 30\n1\n1000000000\n1000000000\n\n\nOutput\n\n\n0001\n1111\n1\n\nNote\n\nIn the first test case, the 4-th player will beat any other player on any game, so he will definitely win the tournament.\n\nIn the second test case, everyone can be a winner. \n\nIn the third test case, there is only one player. Clearly, he will win the tournament.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8541043400764465, 0.04310081526637077, 0.0030513012316077948, 0.007922516204416752, 0.05530465021729469, 0.004637280944734812, 0.005202693399041891, 0.026676295325160027], "true_rank": 0}
{"id": "code_contests/68", "prompt": "# Bubble Popping\n\nThere are N bubbles in a coordinate plane. Bubbles are so tiny that it can be assumed that each bubble is a point (X_i, Y_i). \n\nQ Bubble Cup finalists plan to play with the bubbles. Each finalist would link to use infinitely long Bubble Cup stick to pop some bubbles. The i-th finalist would like to place the stick in the direction of vector (dxi, dyi), and plays the following game until K_i bubbles are popped. The game starts with finalist placing the stick in the direction of vector (dx_i, dy_i), and sweeping it from the infinity to the left until it hits some bubble, which is immediately popped. It is guaranteed that only one bubble will be hit in this step. After that the finalist starts rotating the stick in the counter clockwise direction with the center of rotation in point where the previous bubble was popped. When the next bubble is hit, it is immediately popped and becomes the new center of rotation. The process continues until K_i bubbles have been popped. It is guaranteed that the stick won't hit two bubbles simultaneously in this process. \n\nFor each finalist find which bubble would be popped the last. Note that each game starts with the configuration of all N bubbles, so the games don't depend on the previous games. \n\nInput\n\nThe first line contains one integer N \u2014 the number of bubbles. (1 \u2264 N \u2264 10^5)\n\nEach of the next N lines contains two integers. The i-th line contains integers X_i and Y_i \u2014 the coordinates of the i-th bubble. (-10^9 \u2264 X_i, Y_i \u2264 10^9, (X_i, Y_i) \u2260 (X_j, Y_j) for i \u2260 j)\n\nThe next line contains one integer Q \u2014 the number of finalists willing to play with the bubbles. (1 \u2264 Q \u2264 10^5)\n\nEach of the next Q lines contains 3 integers. The i-th line contains integers dx_i, dy_i and K_i. (-10^9 \u2264 dx_i, dy_i \u2264 10^9, 1 \u2264 K_i \u2264 N)\n\nOutput\n\nFor each of the Q finalists, print the index of the bubble which would be popped last, in the separate line. \n\nExamples\n\nInput\n\n\n4\n0 0\n1 0\n0 1\n1 1\n2\n1 -1 3\n-1 1 4\n\n\nOutput\n\n\n4\n2\n\n\nInput\n\n\n4\n1 1\n2 2\n7 1\n1 7\n3\n2 2 1\n1 -5 4\n-6 5 3\n\n\nOutput\n\n\n3\n2\n3\n\nNote\n\nThere are two finalists willing to play with the bubbles. If the first finalist plays with the bubbles, then the bubbles at coordinates (0, 0), (1, 0) and (1, 1) would be popped in that order. Their indexes are 1, 2 and 4, so the answer is 4. If the second finalist plays with the bubbles, then the bubbles at coordinates (1, 1), (0, 1), (0, 0) and (1, 0) would be popped in that order, so the answer is 2.\n\nVisualization: [link](https://petljamediastorage.blob.core.windows.net/uploads/example1.gif). \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.917370080947876, 0.05008424073457718, 0.006002333480864763, 0.0038288196083158255, 0.010362697765231133, 0.004726938437670469, 0.0027360080275684595, 0.004888845607638359], "true_rank": 0}
{"id": "code_contests/104", "prompt": "# Banquet Preparations 1\n\nA known chef has prepared n dishes: the i-th dish consists of a_i grams of fish and b_i grams of meat. \n\nThe banquet organizers estimate the balance of n dishes as follows. The balance is equal to the absolute value of the difference between the total mass of fish and the total mass of meat.\n\nTechnically, the balance equals to \\left|\u2211_{i=1}^n a_i - \u2211_{i=1}^n b_i\\right|. The smaller the balance, the better.\n\nIn order to improve the balance, a taster was invited. He will eat exactly m grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he should eat exactly m grams of each dish in total.\n\nDetermine how much of what type of food the taster should eat from each dish so that the value of the balance is as minimal as possible. If there are several correct answers, you may choose any of them.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of the test cases.\n\nEach test case's description is preceded by a blank line. Next comes a line that contains integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 10^6). The next n lines describe dishes, the i-th of them contains a pair of integers a_i and b_i (0 \u2264 a_i, b_i \u2264 10^6) \u2014 the masses of fish and meat in the i-th dish.\n\nIt is guaranteed that it is possible to eat m grams of food from each dish. In other words, m \u2264 a_i+b_i for all i from 1 to n inclusive.\n\nThe sum of all n values over all test cases in the test does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print on the first line the minimal balance value that can be achieved by eating exactly m grams of food from each dish.\n\nThen print n lines that describe a way to do this: the i-th line should contain two integers x_i and y_i (0 \u2264 x_i \u2264 a_i; 0 \u2264 y_i \u2264 b_i; x_i+y_i=m), where x_i is how many grams of fish taster should eat from the i-th meal and y_i is how many grams of meat.\n\nIf there are several ways to achieve a minimal balance, find any of them.\n\nExample\n\nInput\n\n\n8\n\n1 5\n3 4\n\n1 6\n3 4\n\n2 2\n1 3\n4 2\n\n2 4\n1 3\n1 7\n\n3 6\n1 7\n1 8\n1 9\n\n3 6\n1 8\n1 9\n30 10\n\n3 4\n3 1\n3 2\n4 1\n\n5 4\n0 7\n6 4\n0 8\n4 1\n5 3\n\n\nOutput\n\n\n0\n2 3\n1\n3 3\n0\n1 1\n1 1\n2\n1 3\n0 4\n3\n0 6\n0 6\n0 6\n7\n1 5\n1 5\n6 0\n0\n3 1\n3 1\n3 1\n0\n0 4\n2 2\n0 4\n3 1\n1 3\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.956330418586731, 0.013228773139417171, 0.004635735880583525, 0.002228345023468137, 0.014576936140656471, 0.0016687947791069746, 0.0010899720946326852, 0.006241075228899717], "true_rank": 1}
{"id": "code_contests/35", "prompt": "# Kuzya and Homework\n\nKuzya started going to school. He was given math homework in which he was given an array a of length n and an array of symbols b of length n, consisting of symbols '*' and '/'.\n\nLet's denote a path of calculations for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) in the following way: \n\n  * Let x=1 initially. For every i from l to r we will consequently do the following: if b_i= '*', x=x*a_i, and if b_i= '/', then x=(x)/(a_i). Let's call a path of calculations for the segment [l; r] a list of all x that we got during the calculations (the number of them is exactly r - l + 1). \n\n\n\nFor example, let a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the path of calculations for that segment is [12, 4, 0.8, 0.2, 2].\n\nLet's call a segment [l;r] simple if the path of calculations for it contains only integer numbers. \n\nKuzya needs to find the number of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). Since he obviously has no time and no interest to do the calculations for each option, he asked you to write a program to get to find that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9553696513175964, 0.024950247257947922, 0.0016055379528552294, 0.001470121555030346, 0.006464174948632717, 0.0024806042201817036, 0.0016720287967473269, 0.0059876227751374245], "true_rank": 0}
{"id": "code_contests/84", "prompt": "# Artistic Partition\n\nFor two positive integers l and r (l \u2264 r) let c(l, r) denote the number of integer pairs (i, j) such that l \u2264 i \u2264 j \u2264 r and \\operatorname{gcd}(i, j) \u2265 l. Here, \\operatorname{gcd}(i, j) is the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers i and j.\n\nYouKn0wWho has two integers n and k where 1 \u2264 k \u2264 n. Let f(n, k) denote the minimum of \u2211_{i=1}^{k}{c(x_i+1,x_{i+1})} over all integer sequences 0=x_1 < x_2 < \u2026 < x_{k} < x_{k+1}=n.\n\nHelp YouKn0wWho find f(n, k). \n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 3 \u22c5 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^5). \n\nOutput\n\nFor each test case, print a single integer \u2014 f(n, k).\n\nExample\n\nInput\n\n\n4\n6 2\n4 4\n3 1\n10 3\n\n\nOutput\n\n\n8\n4\n6\n11\n\nNote\n\nIn the first test case, YouKn0wWho can select the sequence [0, 2, 6]. So f(6, 2) = c(1, 2) + c(3, 6) = 3 + 5 = 8 which is the minimum possible.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.5580481886863708, 0.16882005333900452, 0.01547436323016882, 0.037838730961084366, 0.13752871751785278, 0.05088896304368973, 0.01282241940498352, 0.018578574061393738], "true_rank": 1}
{"id": "code_contests/88", "prompt": "# XOR Specia-LIS-t\n\nYouKn0wWho has an integer sequence a_1, a_2, \u2026 a_n. Now he will split the sequence a into one or more consecutive subarrays so that each element of a belongs to exactly one subarray. Let k be the number of resulting subarrays, and h_1, h_2, \u2026, h_k be the lengths of the longest increasing subsequences of corresponding subarrays.\n\nFor example, if we split [2, 5, 3, 1, 4, 3, 2, 2, 5, 1] into [2, 5, 3, 1, 4], [3, 2, 2, 5], [1], then h = [3, 2, 1].\n\nYouKn0wWho wonders if it is possible to split the sequence a in such a way that the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of h_1, h_2, \u2026, h_k is equal to 0. You have to tell whether it is possible.\n\nThe longest increasing subsequence (LIS) of a sequence b_1, b_2, \u2026, b_m is the longest sequence of valid indices i_1, i_2, \u2026, i_k such that i_1 < i_2 < \u2026 < i_k and b_{i_1} < b_{i_2} < \u2026 < b_{i_k}. For example, the LIS of [2, 5, 3, 3, 5] is [2, 3, 5], which has length 3.\n\nAn array c is a subarray of an array b if c can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if it is possible to split into subarrays in the desired way, print \"NO\" (without quotes) otherwise. You can print each letter in any register (upper or lower).\n\nExample\n\nInput\n\n\n4\n7\n1 3 4 2 2 1 5\n3\n1 3 4\n5\n1 3 2 4 2\n4\n4 3 2 1\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, YouKn0wWho can split the sequence in the following way: [1, 3, 4], [2, 2], [1, 5]. This way, the LIS lengths are h = [3, 1, 2], and the bitwise XOR of the LIS lengths is 3 \u2295 1 \u2295 2 = 0.\n\nIn the second test case, it can be shown that it is impossible to split the sequence into subarrays that will satisfy the condition.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.6932514905929565, 0.07360541075468063, 0.0077270325273275375, 0.009412277489900589, 0.14681996405124664, 0.015107224695384502, 0.010857325047254562, 0.04321925714612007], "true_rank": 0}
{"id": "code_contests/33", "prompt": "# Korney Korneevich and XOR (easy version)\n\nThis is an easier version of the problem with smaller constraints.\n\nKorney Korneevich dag up an array a of length n. Korney Korneevich has recently read about the operation [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR), so he wished to experiment with it. For this purpose, he decided to find all integers x \u2265 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x.\n\nIt didn't take a long time for Korney Korneevich to find all such x, and he wants to check his result. That's why he asked you to solve this problem!\n\nA sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA sequence s_1, s_2, \u2026 , s_m is called increasing if s_1 < s_2 < \u2026 < s_m.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 500) \u2014 the elements of the array a.\n\nOutput\n\nIn the first line print a single integer k \u2014 the number of found x values.\n\nIn the second line print k integers in increasing order x_1, x_2, \u2026 x_k (0 \u2264 x_1 < \u2026 < x_k) \u2014 found x values.\n\nExamples\n\nInput\n\n\n4\n4 2 2 4\n\n\nOutput\n\n\n4\n0 2 4 6 \n\n\nInput\n\n\n8\n1 0 1 7 12 5 3 2\n\n\nOutput\n\n\n12\n0 1 2 3 4 5 6 7 10 11 12 13 \n\nNote\n\nIn the first test case:\n\n  * To get value x = 0 it is possible to choose and empty subsequence \n  * To get value x = 2 it is possible to choose a subsequence [2] \n  * To get value x = 4 it is possible to choose a subsequence [4] \n  * To get value x = 6 it is possible to choose a subsequence [2, 4] \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9609901309013367, 0.02049354277551174, 0.0016769693465903401, 0.0019441787153482437, 0.005115252919495106, 0.0014978991821408272, 0.0011906768195331097, 0.007091403007507324], "true_rank": 0}
{"id": "code_contests/23", "prompt": "# Subsequence\n\nAlice has an integer sequence a of length n and all elements are different. She will choose a subsequence of a of length m, and defines the value of a subsequence a_{b_1},a_{b_2},\u2026,a_{b_m} as $$$\u2211_{i = 1}^m (m \u22c5 a_{b_i}) - \u2211_{i = 1}^m \u2211_{j = 1}^m f(min(b_i, b_j), max(b_i, b_j)), where f(i, j) denotes \\min(a_i, a_{i + 1}, \\ldots, a_j)$$$.\n\nAlice wants you to help her to maximize the value of the subsequence she choose.\n\nA sequence s is a subsequence of a sequence t if s can be obtained from t by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 m \u2264 n \u2264 4000).\n\nThe second line contains n distinct integers a_1, a_2, \u2026, a_n (1 \u2264 a_i < 2^{31}).\n\nOutput\n\nPrint the maximal value Alice can get.\n\nExamples\n\nInput\n\n\n6 4\n15 2 18 12 13 4\n\n\nOutput\n\n\n100\n\n\nInput\n\n\n11 5\n9 3 7 1 8 12 10 20 15 18 5\n\n\nOutput\n\n\n176\n\n\nInput\n\n\n1 1\n114514\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n2 1\n666 888\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, Alice can choose the subsequence [15, 2, 18, 13], which has the value 4 \u22c5 (15 + 2 + 18 + 13) - (15 + 2 + 2 + 2) - (2 + 2 + 2 + 2) - (2 + 2 + 18 + 12) - (2 + 2 + 12 + 13) = 100. In the second example, there are a variety of subsequences with value 176, and one of them is [9, 7, 12, 20, 18].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.32288044691085815, 0.10447278618812561, 0.009074085392057896, 0.24804553389549255, 0.2249556928873062, 0.06671245396137238, 0.006933721248060465, 0.016925308853387833], "true_rank": 0}
{"id": "code_contests/31", "prompt": "# Vupsen, Pupsen and 0\n\nVupsen and Pupsen were gifted an integer array. Since Vupsen doesn't like the number 0, he threw away all numbers equal to 0 from the array. As a result, he got an array a of length n.\n\nPupsen, on the contrary, likes the number 0 and he got upset when he saw the array without zeroes. To cheer Pupsen up, Vupsen decided to come up with another array b of length n such that \u2211_{i=1}^{n}a_i \u22c5 b_i=0. Since Vupsen doesn't like number 0, the array b must not contain numbers equal to 0. Also, the numbers in that array must not be huge, so the sum of their absolute values cannot exceed 10^9. Please help Vupsen to find any such array b!\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the length of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (-10^4 \u2264 a_i \u2264 10^4, a_i \u2260 0) \u2014 the elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print n integers b_1, b_2, \u2026, b_n \u2014 elements of the array b (|b_1|+|b_2|+\u2026 +|b_n| \u2264 10^9, b_i \u2260 0, \u2211_{i=1}^{n}a_i \u22c5 b_i=0).\n\nIt can be shown that the answer always exists.\n\nExample\n\nInput\n\n\n3\n2\n5 5\n5\n5 -2 10 -9 4\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n1 -1\n-1 5 1 -1 -1\n-10 2 2 -3 5 -1 -1\n\nNote\n\nIn the first test case, 5 \u22c5 1 + 5 \u22c5 (-1)=5-5=0. You could also print 3 -3, for example, since 5 \u22c5 3 + 5 \u22c5 (-3)=15-15=0\n\nIn the second test case, 5 \u22c5 (-1) + (-2) \u22c5 5 + 10 \u22c5 1 + (-9) \u22c5 (-1) + 4 \u22c5 (-1)=-5-10+10+9-4=0.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9534681439399719, 0.020249182358384132, 0.0013651731424033642, 0.0029402486979961395, 0.006352287717163563, 0.0014103975845500827, 0.0025067636743187904, 0.011707826517522335], "true_rank": 0}
{"id": "code_contests/127", "prompt": "# Forbidden Subsequence\n\nYou are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. \n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.7144426703453064, 0.11548057198524475, 0.013363256119191647, 0.00935334526002407, 0.11091426759958267, 0.008909533731639385, 0.005058654118329287, 0.02247769944369793], "true_rank": 0}
{"id": "code_contests/109", "prompt": "# Dominoes\n\nYou are given n dominoes. Each domino has a left and a right cell. Each cell can be colored either black or white. Some cells are already colored, while some aren't yet.\n\nThe coloring is said to be valid if and only if it is possible to rearrange the dominoes in some order such that for each 1 \u2264 i \u2264 n the color of the right cell of the i-th domino is different from the color of the left cell of the ((i mod n)+1)-st domino. \n\nNote that you can't rotate the dominoes, so the left cell always remains the left cell, and the right cell always remains the right cell.\n\nCount the number of valid ways to color the yet uncolored cells of dominoes. Two ways are considered different if there is a cell that is colored white in one way and black in the other. In particular, colorings BW WB and WB BW different (and both invalid).\n\nAs this number can be very big, output it modulo 998 244 353.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of dominoes.\n\nThe next n lines describe dominoes. Each line contains two characters which represent the left and the right cell. Character B means that the corresponding cell is black, character W means that the corresponding cell is white, and ? means that the cell is yet to be colored. \n\nOutput\n\nPrint a single integer \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n\n1\n?W\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n2\n??\nW?\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n4\nBB\n??\nW?\n??\n\n\nOutput\n\n\n10\n\nNote\n\nIn the first test case, there is only one domino, and we need the color of its right cell to be different from the color of its left cell. There is only one way to achieve this.\n\nIn the second test case, there are only 2 such colorings:\n\nBB WW and WB WB.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.9117845296859741, 0.04205390810966492, 0.002224849071353674, 0.0036206471268087626, 0.019274702295660973, 0.00326515082269907, 0.0031885113567113876, 0.01458763238042593], "true_rank": 0}
{"id": "code_contests/41", "prompt": "# Defender of Childhood Dreams\n\nEven if you just leave them be, they will fall to pieces all by themselves. So, someone has to protect them, right?\n\nYou find yourself playing with Teucer again in the city of Liyue. As you take the eccentric little kid around, you notice something interesting about the structure of the city.\n\nLiyue can be represented as a directed graph containing n nodes. Nodes are labeled from 1 to n. There is a directed edge from node a to node b if and only if a < b.\n\nA path between nodes a and b is defined as a sequence of edges such that you can start at a, travel along all of these edges in the corresponding direction, and end at b. The length of a path is defined by the number of edges. A rainbow path of length x is defined as a path in the graph such that there exists at least 2 distinct colors among the set of x edges.\n\nTeucer's favorite number is k. You are curious about the following scenario: If you were to label each edge with a color, what is the minimum number of colors needed to ensure that all paths of length k or longer are rainbow paths?\n\nTeucer wants to surprise his older brother with a map of Liyue. He also wants to know a valid coloring of edges that uses the minimum number of colors. Please help him with this task!\n\nInput\n\nThe only line of input contains two integers n and k (2 \u2264 k < n \u2264 1000). \n\nOutput\n\nOn the first line, output c, the minimum colors you need to satisfy the above requirements.\n\nOn the second line, print a valid edge coloring as an array of (n(n-1))/(2) integers ranging from 1 to c. Exactly c distinct colors should exist in the construction. Print the edges in increasing order by the start node first, then by the second node.\n\nFor example, if n=4, the edge colors will correspond to this order of edges: (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)\n\nExamples\n\nInput\n\n\n5 3\n\n\nOutput\n\n\n2\n1 2 2 2 2 2 2 1 1 1\n\n\nInput\n\n\n5 2\n\n\nOutput\n\n\n3\n3 2 2 1 2 2 1 3 1 1 \n\n\nInput\n\n\n8 7\n\n\nOutput\n\n\n2\n2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nInput\n\n\n3 2\n\n\nOutput\n\n\n2\n1 2 2 \n\nNote\n\nThe corresponding construction for the first test case looks like this: \n\n<image> It is impossible to satisfy the constraints with less than 2 colors.\n\nThe corresponding construction for the second test case looks like this: \n\n<image> One can show there exists no construction using less than 3 colors.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 1, "probability": [0.38969144225120544, 0.5692760944366455, 0.005871580448001623, 0.004569757264107466, 0.013931481167674065, 0.003522226121276617, 0.003188984701409936, 0.009948448278009892], "true_rank": 0}
{"id": "code_contests/27", "prompt": "# Diameter of Graph\n\nCQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.8210328221321106, 0.12968489527702332, 0.0025902772322297096, 0.0049704089760780334, 0.02158338576555252, 0.006681435741484165, 0.0028485239017754793, 0.010608237236738205], "true_rank": 0}
{"id": "code_contests/160", "prompt": "# Robot Cleaner\n\nA robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.38370761275291443, 0.3628622591495514, 0.014841293916106224, 0.021967340260744095, 0.15405802428722382, 0.015504375100135803, 0.008985326625406742, 0.03807375207543373], "true_rank": 0}
{"id": "code_contests/40", "prompt": "# Moment of Bloom\n\nShe does her utmost to flawlessly carry out a person's last rites and preserve the world's balance of yin and yang.\n\nHu Tao, being the little prankster she is, has tried to scare you with this graph problem! You are given a connected undirected graph of n nodes with m edges. You also have q queries. Each query consists of two nodes a and b.\n\nInitially, all edges in the graph have a weight of 0. For each query, you must choose a simple path starting from a and ending at b. Then you add 1 to every edge along this path. Determine if it's possible, after processing all q queries, for all edges in this graph to have an even weight. If so, output the choice of paths for each query. \n\nIf it is not possible, determine the smallest number of extra queries you could add to make it possible. It can be shown that this number will not exceed 10^{18} under the given constraints.\n\nA simple path is defined as any path that does not visit a node more than once.\n\nAn edge is said to have an even weight if its value is divisible by 2.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 3 \u22c5 10^5, n-1 \u2264 m \u2264 min{\\left((n(n-1))/(2), 3 \u22c5 10^5\\right)}).\n\nEach of the next m lines contains two integers x and y (1 \u2264 x, y \u2264 n, x\u2260 y) indicating an undirected edge between node x and y. The input will not contain self-loops or duplicate edges, and the provided graph will be connected.\n\nThe next line contains a single integer q (1 \u2264 q \u2264 3 \u22c5 10^5).\n\nEach of the next q lines contains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b), the description of each query.\n\nIt is guaranteed that nq \u2264 3 \u22c5 10^5.\n\nOutput\n\nIf it is possible to force all edge weights to be even, print \"YES\" on the first line, followed by 2q lines indicating the choice of path for each query in the same order the queries are given. For each query, the first line should contain a single integer x: the number of nodes in the chosen path. The next line should then contain x spaced separated integers p_i indicating the path you take (p_1 = a, p_x = b and all numbers should fall between 1 and n). This path cannot contain duplicate nodes and must be a valid simple path in the graph.\n\nIf it is impossible to force all edge weights to be even, print \"NO\" on the first line and the minimum number of added queries on the second line.\n\nExamples\n\nInput\n\n\n6 7\n2 1\n2 3\n3 5\n1 4\n6 1\n5 6\n4 5\n3\n1 4\n5 1\n4 5\n\n\nOutput\n\n\nYES\n2\n1 4\n4\n5 3 2 1\n5\n4 1 2 3 5\n\n\nInput\n\n\n5 7\n4 3\n4 5\n2 1\n1 4\n1 3\n3 5\n3 2\n4\n4 2\n3 5\n5 1\n4 5\n\n\nOutput\n\n\nNO\n2\n\nNote\n\nHere is what the queries look like for the first test case (red corresponds to the 1st query, blue 2nd query, and green 3rd query): \n\n<image> Notice that every edge in the graph is part of either 0 or 2 colored query edges.\n\nThe graph in the second test case looks like this: \n\n<image> There does not exist an assignment of paths that will force all edges to have even weights with the given queries. One must add at least 2 new queries to obtain a set of queries that can satisfy the condition.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "predicted_rank": 0, "probability": [0.575394332408905, 0.27830320596694946, 0.012719688937067986, 0.013549397699534893, 0.01850871741771698, 0.00873594731092453, 0.012058584950864315, 0.08073019981384277], "true_rank": 0}
{"id": "LeetCode/8", "prompt": "# Maximum Area of Longest Diagonal Rectangle\n\nYou are given a 2D **0-indexed** integer array `dimensions`.\n\n\nFor all indices `i`, `0 <= i < dimensions.length`, `dimensions[i][0]` represents the length and `dimensions[i][1]` represents the width of the rectangle `i`.\n\n\nReturn *the **area** of the rectangle having the **longest** diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the **maximum** area.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** dimensions = [[9,3],[8,6]]\n**Output:** 48\n**Explanation:** \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) \u2248 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** dimensions = [[3,4],[4,3]]\n**Output:** 12\n**Explanation:** Length of diagonal is the same for both which is 5, so maximum area = 12.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= dimensions.length <= 100`\n* `dimensions[i].length == 2`\n* `1 <= dimensions[i][0], dimensions[i][1] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.05592614784836769, 0.01147711556404829, 0.005548335146158934, 0.240797221660614, 0.12671524286270142, 0.09551037847995758, 0.016391519457101822, 0.4476340413093567], "true_rank": 3}
{"id": "LeetCode/233", "prompt": "# Count Ways to Group Overlapping Ranges\n\nYou are given a 2D integer array `ranges` where `ranges[i] = [starti, endi]` denotes that all integers between `starti` and `endi` (both **inclusive**) are contained in the `ith` range.\n\n\nYou are to split `ranges` into **two** (possibly empty) groups such that:\n\n\n* Each range belongs to exactly one group.\n* Any two **overlapping** ranges must belong to the **same** group.\n\n\nTwo ranges are said to be **overlapping**\u00a0if there exists at least **one** integer that is present in both ranges.\n\n\n* For example, `[1, 3]` and `[2, 5]` are overlapping because `2` and `3` occur in both ranges.\n\n\nReturn *the **total number** of ways to split* `ranges` *into two groups*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ranges = [[6,10],[5,15]]\n**Output:** 2\n**Explanation:** \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ranges = [[1,3],[10,20],[2,5],[4,8]]\n**Output:** 4\n**Explanation:** \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= ranges.length <= 105`\n* `ranges[i].length == 2`\n* `0 <= starti <= endi <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countWays(self, ranges: List[List[int]]) -> int:\n```\n", "predicted_rank": 4, "probability": [0.2992860972881317, 0.03441738337278366, 0.009620079770684242, 0.038929376751184464, 0.3025088906288147, 0.04773679003119469, 0.07212568819522858, 0.1953757256269455], "true_rank": 7}
{"id": "LeetCode/122", "prompt": "# Apply Operations to Maximize Score\n\nYou are given an array `nums` of `n` positive integers and an integer `k`.\n\n\nInitially, you start with a score of `1`. You have to maximize your score by applying the following operation at most `k` times:\n\n\n* Choose any **non-empty** subarray `nums[l, ..., r]` that you haven't chosen previously.\n* Choose an element `x` of `nums[l, ..., r]` with the highest **prime score**. If multiple such elements exist, choose the one with the smallest index.\n* Multiply your score by `x`.\n\n\nHere, `nums[l, ..., r]` denotes the subarray of `nums` starting at index `l` and ending at the index `r`, both ends being inclusive.\n\n\nThe **prime score** of an integer `x` is equal to the number of distinct prime factors of `x`. For example, the prime score of `300` is `3` since `300 = 2 * 2 * 3 * 5 * 5`.\n\n\nReturn *the **maximum possible score** after applying at most* `k` *operations*.\n\n\nSince the answer may be large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,3,9,3,8], k = 2\n**Output:** 81\n**Explanation:** To get a score of 81, we can apply the following operations:\n- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\nIt can be proven that 81 is the highest score one can obtain.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [19,12,14,6,10,18], k = 3\n**Output:** 4788\n**Explanation:** To get a score of 4788, we can apply the following operations: \n- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\nIt can be proven that 4788 is the highest score one can obtain.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length == n <= 105`\n* `1 <= nums[i] <= 105`\n* `1 <= k <= min(n * (n + 1) / 2, 109)`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumScore(self, nums: List[int], k: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.4039679765701294, 0.008478084579110146, 0.0047225346788764, 0.010143325664103031, 0.05690766125917435, 0.011190772987902164, 0.011610470712184906, 0.4929792582988739], "true_rank": 0}
{"id": "LeetCode/66", "prompt": "# Subarrays Distinct Element Sum of Squares II\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nThe **distinct count** of a subarray of `nums` is defined as:\n\n\n* Let `nums[i..j]` be a subarray of `nums` consisting of all the indices from `i` to `j` such that `0 <= i <= j < nums.length`. Then the number of distinct values in `nums[i..j]` is called the distinct count of `nums[i..j]`.\n\n\nReturn *the sum of the **squares** of **distinct counts** of all subarrays of* `nums`.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1]\n**Output:** 15\n**Explanation:** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,2]\n**Output:** 3\n**Explanation:** Three possible subarrays are:\n[2]: 1 distinct value\n[2]: 1 distinct value\n[2,2]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 5, "probability": [0.07570702582597733, 0.007649836130440235, 0.00872096698731184, 0.012254401110112667, 0.03327770531177521, 0.8372144103050232, 0.007490473333746195, 0.0176851823925972], "true_rank": 4}
{"id": "LeetCode/76", "prompt": "# Longest Unequal Adjacent Groups Subsequence I\n\nYou are given an integer `n`, a **0-indexed** string array `words`, and a **0-indexed** **binary** array `groups`, both arrays having length `n`.\n\n\nYou need to select the **longest** **subsequence** from an array of indices `[0, 1, ..., n - 1]`, such that for the subsequence denoted as `[i0, i1, ..., ik - 1]` having length `k`, `groups[ij] != groups[ij + 1]`, for each `j` where `0 < j + 1 < k`.\n\n\nReturn *a string array containing the words corresponding to the indices **(in order)** in the selected subsequence*. If there are multiple answers, return *any of them*.\n\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n\n\n**Note:** strings in `words` may be **unequal** in length.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, words = [\"e\",\"a\",\"b\"], groups = [0,0,1]\n**Output:** [\"e\",\"b\"]\n**Explanation:** A subsequence that can be selected is [0,2] because groups[0] != groups[2].\nSo, a valid answer is [words[0],words[2]] = [\"e\",\"b\"].\nAnother subsequence that can be selected is [1,2] because groups[1] != groups[2].\nThis results in [words[1],words[2]] = [\"a\",\"b\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 2.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]\n**Output:** [\"a\",\"b\",\"c\"]\n**Explanation:** A subsequence that can be selected is [0,1,2] because groups[0] != groups[1] and groups[1] != groups[2].\nSo, a valid answer is [words[0],words[1],words[2]] = [\"a\",\"b\",\"c\"].\nAnother subsequence that can be selected is [0,1,3] because groups[0] != groups[1] and groups[1] != groups[3].\nThis results in [words[0],words[1],words[3]] = [\"a\",\"b\",\"d\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 100`\n* `1 <= words[i].length <= 10`\n* `0 <= groups[i] < 2`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getWordsInLongestSubsequence(self, n: int, words: List[str], groups: List[int]) -> List[str]:\n```\n", "predicted_rank": 0, "probability": [0.6826542615890503, 0.0031744493171572685, 0.001978053944185376, 0.0037697087973356247, 0.2416345328092575, 0.01482985820621252, 0.005968061741441488, 0.04599108174443245], "true_rank": 5}
{"id": "LeetCode/9", "prompt": "# Maximum Size of a Set After Removals\n\nYou are given two **0-indexed** integer arrays `nums1` and `nums2` of even length `n`.\n\n\nYou must remove `n / 2` elements from `nums1` and `n / 2` elements from `nums2`. After the removals, you insert the remaining elements of `nums1` and `nums2` into a set `s`.\n\n\nReturn *the **maximum** possible size of the set* `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,1,2], nums2 = [1,1,1,1]\n**Output:** 2\n**Explanation:** We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]\n**Output:** 5\n**Explanation:** We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]\n**Output:** 6\n**Explanation:** We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 2 * 104`\n* `n` is even.\n* `1 <= nums1[i], nums2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.06303782016038895, 0.03854069486260414, 0.008444664068520069, 0.0566965714097023, 0.3151167929172516, 0.03241539001464844, 0.01358122006058693, 0.4721668064594269], "true_rank": 1}
{"id": "LeetCode/246", "prompt": "# Count the Number of Fair Pairs\n\nGiven a **0-indexed** integer array `nums` of size `n` and two integers `lower` and `upper`, return *the number of fair pairs*.\n\n\nA pair `(i, j)` is **fair** if:\n\n\n* `0 <= i < j < n`, and\n* `lower <= nums[i] + nums[j] <= upper`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,7,4,4,5], lower = 3, upper = 6\n**Output:** 6\n**Explanation:** There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,7,9,2,5], lower = 11, upper = 11\n**Output:** 1\n**Explanation:** There is a single fair pair: (2,3).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `nums.length == n`\n* `-109\u00a0<= nums[i] <= 109`\n* `-109\u00a0<= lower <= upper <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n```\n", "predicted_rank": 4, "probability": [0.06300829350948334, 0.017745304852724075, 0.0063071586191654205, 0.08397097885608673, 0.5785577893257141, 0.17236430943012238, 0.030336597934365273, 0.047709494829177856], "true_rank": 3}
{"id": "LeetCode/111", "prompt": "# Maximize Value of Function in a Ball Passing Game\n\nYou are given a **0-indexed** integer array `receiver` of length `n` and an integer `k`.\n\n\nThere are `n` players having a **unique id** in the range `[0, n - 1]` who will play a ball passing game, and `receiver[i]` is the id of the player who receives passes from the player with id `i`. Players can pass to themselves, **i.e.** `receiver[i]` may be equal to `i`.\n\n\nYou must choose one of the `n` players as the starting player for the game, and the ball will be passed **exactly** `k` times starting from the chosen player.\n\n\nFor a chosen starting player having id `x`, we define a function `f(x)` that denotes the **sum** of `x` and the **ids** of all players who receive the ball during the `k` passes, **including repetitions**. In other words, `f(x) = x + receiver[x] + receiver[receiver[x]] + ... + receiver(k)[x]`.\n\n\nYour task is to choose a starting player having id `x` that **maximizes** the value of `f(x)`.\n\n\nReturn *an integer denoting the **maximum** value of the function.*\n\n\n**Note:** `receiver` may contain duplicates.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n\n| Pass Number | Sender ID | Receiver ID | x + Receiver IDs |\n| --- | --- | --- | --- |\n|  |  |  | 2 |\n| 1 | 2 | 1 | 3 |\n| 2 | 1 | 0 | 3 |\n| 3 | 0 | 2 | 5 |\n| 4 | 2 | 1 | 6 |\n\n\n\n```\n\n**Input:** receiver = [2,0,1], k = 4\n**Output:** 6\n**Explanation:** The table above shows a simulation of the game starting with the player having id x = 2. \nFrom the table, f(2) is equal to 6. \nIt can be shown that 6 is the maximum achievable value of the function. \nHence, the output is 6. \n\n```\n\n**Example 2:**\n\n\n\n\n| Pass Number | Sender ID | Receiver ID | x + Receiver IDs |\n| --- | --- | --- | --- |\n|  |  |  | 4 |\n| 1 | 4 | 3 | 7 |\n| 2 | 3 | 2 | 9 |\n| 3 | 2 | 1 | 10 |\n\n\n\n```\n\n**Input:** receiver = [1,1,1,2,3], k = 3\n**Output:** 10\n**Explanation:** The table above shows a simulation of the game starting with the player having id x = 4. \nFrom the table, f(4) is equal to 10. \nIt can be shown that 10 is the maximum achievable value of the function. \nHence, the output is 10. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= receiver.length == n <= 105`\n* `0 <= receiver[i] <= n - 1`\n* `1 <= k <= 1010`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n```\n", "predicted_rank": 0, "probability": [0.7132605910301208, 0.010904781520366669, 0.003492471296340227, 0.010737874545156956, 0.0366692841053009, 0.020573293790221214, 0.006732888054102659, 0.19762887060642242], "true_rank": 3}
{"id": "LeetCode/162", "prompt": "# Total Distance Traveled\n\nA truck has two fuel tanks. You are given two integers, `mainTank` representing the fuel present in the main tank in liters and `additionalTank` representing the fuel present in the additional tank in liters.\n\n\nThe truck has a mileage of `10` km per liter. Whenever `5` liters of fuel get\u00a0used up in the main tank,\u00a0if the additional tank has at least `1` liters of fuel, `1` liters of fuel will be transferred from the additional tank to the main tank.\n\n\nReturn *the maximum distance which can be traveled.*\n\n\n**Note:** Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** mainTank = 5, additionalTank = 10\n**Output:** 60\n**Explanation:** \nAfter spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.\nAfter spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.\nTotal distance traveled is 60km.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mainTank = 1, additionalTank = 2\n**Output:** 10\n**Explanation:** \nAfter spending 1 litre of fuel, the main tank becomes empty.\nTotal distance traveled is 10km.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= mainTank, additionalTank <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distanceTraveled(self, mainTank: int, additionalTank: int) -> int:\n```\n", "predicted_rank": 1, "probability": [0.28962579369544983, 0.5630700588226318, 0.009549158625304699, 0.009075680747628212, 0.043715570122003555, 0.01211149524897337, 0.007248491980135441, 0.06560376286506653], "true_rank": 4}
{"id": "LeetCode/165", "prompt": "# Painting the Walls\n\nYou are given two **0-indexed** integer arrays,\u00a0`cost` and `time`, of size `n` representing the costs and the time taken to paint `n` different walls respectively. There are two painters available:\n\n\n* A**paid painter**\u00a0that paints the `ith` wall in `time[i]` units of time and takes `cost[i]` units of money.\n* A**free painter** that paints\u00a0**any** wall in `1` unit of time at a cost of `0`. But the\u00a0free painter can only be used if the paid painter is already **occupied**.\n\n\nReturn *the minimum amount of money required to paint the* `n`*walls.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cost = [1,2,3,2], time = [1,2,3,2]\n**Output:** 3\n**Explanation:** The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cost = [2,3,4,2], time = [1,1,1,1]\n**Output:** 4\n**Explanation:** The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= cost.length <= 500`\n* `cost.length == time.length`\n* `1 <= cost[i] <= 106`\n* `1 <= time[i] <= 500`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def paintWalls(self, cost: List[int], time: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.24504221975803375, 0.02967408485710621, 0.08046382665634155, 0.06398984789848328, 0.16380083560943604, 0.06793411821126938, 0.03082221746444702, 0.31827282905578613], "true_rank": 7}
{"id": "LeetCode/74", "prompt": "# Construct Product Matrix\n\nGiven a **0-indexed** 2D integer matrix `grid` of size `n * m`, we define a **0-indexed** 2D matrix `p` of size `n * m` as the **product** matrix of `grid` if the following condition is met:\n\n\n* Each element `p[i][j]` is calculated as the product of all elements in `grid` except for the element `grid[i][j]`. This product is then taken modulo `12345`.\n\n\nReturn *the product matrix of* `grid`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[1,2],[3,4]]\n**Output:** [[24,12],[8,6]]\n**Explanation:** p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[12345],[2],[1]]\n**Output:** [[2],[0],[0]]\n**Explanation:** p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\nSo the answer is [[2],[0],[0]].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == grid.length\u00a0<= 105`\n* `1 <= m == grid[i].length\u00a0<= 105`\n* `2 <= n * m <= 105`\n* `1 <= grid[i][j] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n```\n", "predicted_rank": 4, "probability": [0.3149690628051758, 0.036487847566604614, 0.07029852271080017, 0.023979760706424713, 0.33911171555519104, 0.02581004425883293, 0.025656914338469505, 0.16368620097637177], "true_rank": 7}
{"id": "LeetCode/180", "prompt": "# Maximum Strength of a Group\n\nYou are given a **0-indexed** integer array `nums` representing the score of students in an exam. The teacher would like to form one **non-empty** group of students with maximal **strength**, where the strength of a group of students of indices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] * nums[i2] * ... * nums[ik\u200b]`.\n\n\nReturn *the maximum strength of a group the teacher can create*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,-1,-5,2,5,-9]\n**Output:** 1350\n**Explanation:** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-4,-5,-4]\n**Output:** 20\n**Explanation:** Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 13`\n* `-9 <= nums[i] <= 9`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.15166494250297546, 0.010314187034964561, 0.004438044503331184, 0.01323564350605011, 0.04940113052725792, 0.008364896290004253, 0.007360568270087242, 0.7552205920219421], "true_rank": 4}
{"id": "LeetCode/221", "prompt": "# Smallest Missing Non-negative Integer After Operations\n\nYou are given a **0-indexed** integer array `nums` and an integer `value`.\n\n\nIn one operation, you can add or subtract `value` from any element of `nums`.\n\n\n* For example, if `nums = [1,2,3]` and `value = 2`, you can choose to subtract `value` from `nums[0]` to make `nums = [-1,2,3]`.\n\n\nThe MEX (minimum excluded) of an array is the smallest missing **non-negative** integer in it.\n\n\n* For example, the MEX of `[-1,2,3]` is `0` while the MEX of `[1,0,3]` is `2`.\n\n\nReturn *the maximum MEX of* `nums` *after applying the mentioned operation **any number of times***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 5\n**Output:** 4\n**Explanation:** One can achieve this result by applying the following operations:\n- Add value to nums[1] twice to make nums = [1,**0**,7,13,6,8]\n- Subtract value from nums[2] once to make nums = [1,0,**2**,13,6,8]\n- Subtract value from nums[3] twice to make nums = [1,0,2,**3**,6,8]\nThe MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 7\n**Output:** 2\n**Explanation:** One can achieve this result by applying the following operation:\n- subtract value from nums[2] once to make nums = [1,-10,**0**,13,6,8]\nThe MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, value <= 105`\n* `-109 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n```\n", "predicted_rank": 0, "probability": [0.4526120126247406, 0.010221247561275959, 0.00457430025562644, 0.014629671350121498, 0.061491306871175766, 0.012564530596137047, 0.011841170489788055, 0.43206578493118286], "true_rank": 4}
{"id": "LeetCode/40", "prompt": "# Count Beautiful Substrings I\n\nYou are given a string `s` and a positive integer `k`.\n\n\nLet `vowels` and `consonants` be the number of vowels and consonants in a string.\n\n\nA string is **beautiful** if:\n\n\n* `vowels == consonants`.\n* `(vowels * consonants) % k == 0`, in other terms the multiplication of `vowels` and `consonants` is divisible by `k`.\n\n\nReturn *the number of **non-empty beautiful substrings** in the given string* `s`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n**Vowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n**Consonant letters** in English are every letter except vowels.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"baeyh\", k = 2\n**Output:** 2\n**Explanation:** There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). \nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abba\", k = 1\n**Output:** 3\n**Explanation:** There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). \n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"bcdf\", k = 1\n**Output:** 0\n**Explanation:** There are no beautiful substrings in the given string.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `1 <= k <= 1000`\n* `s` consists of only English lowercase letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulSubstrings(self, s: str, k: int) -> int:\n```\n", "predicted_rank": 4, "probability": [0.028137370944023132, 0.010219899006187916, 0.00294208200648427, 0.029873177409172058, 0.8766606450080872, 0.008403469808399677, 0.004403126426041126, 0.039360277354717255], "true_rank": 4}
{"id": "LeetCode/231", "prompt": "# Number of Ways to Earn Points\n\nThere is a test that has `n` types of questions. You are given an integer `target` and a **0-indexed** 2D integer array `types` where `types[i] = [counti, marksi]` indicates that there are `counti` questions of the `ith` type, and each one of them is worth `marksi` points.\n\n\n\n\nReturn *the number of ways you can earn **exactly*** `target` *points in the exam*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n**Note** that questions of the same type are indistinguishable.\n\n\n* For example, if there are `3` questions of the same type, then solving the `1st` and `2nd` questions is the same as solving the `1st` and `3rd` questions, or the `2nd` and `3rd` questions.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** target = 6, types = [[6,1],[3,2],[2,3]]\n**Output:** 7\n**Explanation:** You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2nd type: 3 + 3 = 6\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** target = 5, types = [[50,1],[50,2],[50,5]]\n**Output:** 4\n**Explanation:** You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2nd type: 5\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** target = 18, types = [[6,1],[3,2],[2,3]]\n**Output:** 1\n**Explanation:** You can only earn 18 points by answering all questions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= target <= 1000`\n* `n == types.length`\n* `1 <= n <= 50`\n* `types[i].length == 2`\n* `1 <= counti, marksi <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.1060146614909172, 0.020809374749660492, 0.004041089676320553, 0.007172212935984135, 0.09779385477304459, 0.004661083221435547, 0.004065325949341059, 0.7554423809051514], "true_rank": 4}
{"id": "LeetCode/94", "prompt": "# Maximum Number of Alloys\n\nYou are the owner of a company that creates alloys using various types of metals. There are `n` different types of metals available, and you have access to `k` machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.\n\n\nFor the `ith` machine to create an alloy, it needs `composition[i][j]` units of metal of type `j`. Initially, you have `stock[i]` units of metal type `i`, and purchasing one unit of metal type `i` costs `cost[i]` coins.\n\n\nGiven integers `n`, `k`, `budget`, a **1-indexed** 2D array `composition`, and **1-indexed** arrays `stock` and `cost`, your goal is to **maximize** the number of alloys the company can create while staying within the budget of `budget` coins.\n\n\n**All alloys must be created with the same machine.**\n\n\nReturn *the maximum number of alloys that the company can create*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]\n**Output:** 2\n**Explanation:** It is optimal to use the 1st machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 2 units of metal of the 1st type.\n- 2 units of metal of the 2nd type.\n- 2 units of metal of the 3rd type.\nIn total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\nNotice that we have 0 units of metal of each type and we have to buy all the required units of metal.\nIt can be proven that we can create at most 2 alloys.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]\n**Output:** 5\n**Explanation:** It is optimal to use the 2nd machine to create alloys.\nTo create 5 alloys we need to buy:\n- 5 units of metal of the 1st type.\n- 5 units of metal of the 2nd type.\n- 0 units of metal of the 3rd type.\nIn total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\nIt can be proven that we can create at most 5 alloys.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]\n**Output:** 2\n**Explanation:** It is optimal to use the 3rd machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 1 unit of metal of the 1st type.\n- 1 unit of metal of the 2nd type.\nIn total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\nIt can be proven that we can create at most 2 alloys.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 100`\n* `0 <= budget <= 108`\n* `composition.length == k`\n* `composition[i].length == n`\n* `1 <= composition[i][j] <= 100`\n* `stock.length == cost.length == n`\n* `0 <= stock[i] <= 108`\n* `1 <= cost[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxNumberOfAlloys(self, n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n```\n", "predicted_rank": 0, "probability": [0.3530588448047638, 0.3251016438007355, 0.008770940825343132, 0.006266830489039421, 0.02471456117928028, 0.010347756557166576, 0.009525883942842484, 0.2622135877609253], "true_rank": 7}
{"id": "LeetCode/181", "prompt": "# Greatest Common Divisor Traversal\n\nYou are given a **0-indexed** integer array `nums`, and you are allowed to **traverse** between its indices. You can traverse between index `i` and index `j`, `i != j`, if and only if `gcd(nums[i], nums[j]) > 1`, where `gcd` is the **greatest common divisor**.\n\n\nYour task is to determine if for **every pair** of indices `i` and `j` in nums, where `i < j`, there exists a **sequence of traversals** that can take us from `i` to `j`.\n\n\nReturn `true` *if it is possible to traverse between all such pairs of indices,* *or* `false` *otherwise.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,6]\n**Output:** true\n**Explanation:** In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,9,5]\n**Output:** false\n**Explanation:** No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [4,3,12,8]\n**Output:** true\n**Explanation:** There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canTraverseAllPairs(self, nums: List[int]) -> bool:\n```\n", "predicted_rank": 0, "probability": [0.464038610458374, 0.014492694288492203, 0.005972627550363541, 0.028565730899572372, 0.055779829621315, 0.2813498079776764, 0.007916736416518688, 0.1418839693069458], "true_rank": 5}
{"id": "LeetCode/70", "prompt": "# Minimum Changes to Make K Semi-palindromes\n\nGiven a string `s` and an integer `k`, partition `s` into `k` **substrings** such that the sum of the number of letter changes required to turn each **substring** into a **semi-palindrome** is minimized.\n\n\nReturn *an integer denoting the **minimum** number of letter changes required.*\n\n\n**Notes**\n\n\n* A string is a **palindrome** if it can be read the same way from left to right and right to left.\n* A string with a length of `len` is considered a **semi-palindrome** if there exists a positive integer `d` such that `1 <= d < len` and `len % d == 0`, and if we take indices that have the same modulo by `d`, they form a **palindrome**. For example, `\"aa\"`, `\"aba\"`, `\"adbgad\"`, and, `\"abab\"` are **semi-palindrome** and `\"a\"`, `\"ab\"`, and, `\"abca\"` are not.\n* A **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcac\", k = 2\n**Output:** 1\n**Explanation:** We can divide s into substrings \"ab\" and \"cac\". The string \"cac\" is already a semi-palindrome. If we change \"ab\" to \"aa\", it becomes a semi-palindrome with d = 1.\nIt can be shown that there is no way to divide the string \"abcac\" into two semi-palindrome substrings. Therefore, the answer would be at least 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcdef\", k = 2\n**Output:** 2\n**Explanation:** We can divide it into substrings \"abc\" and \"def\". Each of the substrings \"abc\" and \"def\" requires one change to become a semi-palindrome, so we need 2 changes in total to make all substrings semi-palindrome.\nIt can be shown that we cannot divide the given string into two substrings in a way that it would require less than 2 changes.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"aabbaa\", k = 3\n**Output:** 0\n**Explanation:** We can divide it into substrings \"aa\", \"bb\" and \"aa\".\nThe strings \"aa\" and \"bb\" are already semi-palindromes. Thus, the answer is zero.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 200`\n* `1 <= k <= s.length / 2`\n* `s` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n```\n", "predicted_rank": 4, "probability": [0.28739628195762634, 0.035350874066352844, 0.05522983521223068, 0.03412944823503494, 0.29905739426612854, 0.015061172656714916, 0.011010291054844856, 0.26276466250419617], "true_rank": 0}
{"id": "LeetCode/46", "prompt": "# Make Three Strings Equal\n\nYou are given three strings `s1`, `s2`, and `s3`. You have to perform the following operation on these three strings **as many times** as you want.\n\n\nIn one operation you can choose one of these three strings such that its length is at least `2` and delete the **rightmost** character of it.\n\n\nReturn *the **minimum** number of operations you need to perform to make the three strings equal if there is a way to make them equal, otherwise, return* `-1`*.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"\n**Output:** 2\n**Explanation:** Performing operations on s1 and s2 once will lead to three equal strings.\nIt can be shown that there is no way to make them equal with less than two operations.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"\n**Output:** -1\n**Explanation:** Because the leftmost letters of s1 and s2 are not equal, they could not be equal after any number of operations. So the answer is -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s1.length, s2.length, s3.length <= 100`\n* `s1`, `s2` and `s3` consist only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMinimumOperations(self, s1: str, s2: str, s3: str) -> int:\n```\n", "predicted_rank": 7, "probability": [0.1214207112789154, 0.011587204411625862, 0.002758441725745797, 0.005124207120388746, 0.04735773056745529, 0.00903860293328762, 0.0035294622648507357, 0.7991836667060852], "true_rank": 7}
{"id": "LeetCode/141", "prompt": "# Maximum Beauty of an Array After Applying Operation\n\nYou are given a **0-indexed** array `nums` and a **non-negative** integer `k`.\n\n\nIn one operation, you can do the following:\n\n\n* Choose an index `i` that **hasn't been chosen before** from the range `[0, nums.length - 1]`.\n* Replace `nums[i]` with any integer from the range `[nums[i] - k, nums[i] + k]`.\n\n\nThe **beauty** of the array is the length of the longest subsequence consisting of equal elements.\n\n\nReturn *the **maximum** possible beauty of the array* `nums` *after applying the operation any number of times.*\n\n\n**Note** that you can apply the operation to each index **only once**.\n\n\nA\u00a0**subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,6,1,2], k = 2\n**Output:** 3\n**Explanation:** In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1], k = 10\n**Output:** 4\n**Explanation:** In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.04642105475068092, 0.0021058397833257914, 0.0013679479015991092, 0.008064614608883858, 0.019428307190537453, 0.04281932860612869, 0.004092886112630367, 0.8756999969482422], "true_rank": 5}
{"id": "LeetCode/6", "prompt": "# Maximum Number That Sum of the Prices Is Less Than or Equal to K\n\nYou are given an integer `k` and an integer `x`.\n\n\nConsider `s` is the **1-indexed** binary representation of an integer `num`. The **price** of a number `num` is the number of `i`'s such that `i % x == 0` and `s[i]` is a **set bit**.\n\n\nReturn *the **greatest** integer* `num` *such that the sum of **prices** of all numbers from* `1` *to* `num` *is less than or equal to* `k`*.*\n\n\n**Note**:\n\n\n* In the binary representation of a number **set bit** is a bit of value `1`.\n* The binary representation of a number will be indexed from right to left. For example, if `s == 11100`, `s[4] == 1` and `s[2] == 0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** k = 9, x = 1\n**Output:** 6\n**Explanation:** The numbers 1, 2, 3, 4, 5, and 6 can be written in binary representation as \"1\", \"10\", \"11\", \"100\", \"101\", and \"110\" respectively.\nSince x is equal to 1, the price of each number is the number of its set bits.\nThe number of set bits in these numbers is 9. So the sum of the prices of the first 6 numbers is 9.\nSo the answer is 6.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** k = 7, x = 2\n**Output:** 9\n**Explanation:** Since x is equal to 2, we should just check eventh bits.\nThe second bit of binary representation of numbers 2 and 3 is a set bit. So the sum of their prices is 2.\nThe second bit of binary representation of numbers 6 and 7 is a set bit. So the sum of their prices is 2.\nThe fourth bit of binary representation of numbers 8 and 9 is a set bit but their second bit is not. So the sum of their prices is 2.\nNumbers 1, 4, and 5 don't have set bits in their eventh bits in their binary representation. So the sum of their prices is 0.\nThe second and the fourth bit of the binary representation of the number 10 are a set bit. So its price is 2.\nThe sum of the prices of the first 9 numbers is 6.\nBecause the sum of the prices of the first 10 numbers is 8, the answer is 9.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 1015`\n* `1 <= x <= 8`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n```\n", "predicted_rank": 4, "probability": [0.04682168364524841, 0.007252441253513098, 0.0019694173242896795, 0.05669015645980835, 0.7469226121902466, 0.006949943955987692, 0.0037934661377221346, 0.12960028648376465], "true_rank": 0}
{"id": "LeetCode/191", "prompt": "# Find the Distinct Difference Array\n\nYou are given a **0-indexed** array `nums` of length `n`.\n\n\nThe **distinct difference** array of `nums` is an array `diff` of length `n` such that `diff[i]` is equal to the number of distinct elements in the suffix `nums[i + 1, ..., n - 1]` **subtracted from** the number of distinct elements in the prefix `nums[0, ..., i]`.\n\n\nReturn *the **distinct difference** array of* `nums`.\n\n\nNote that `nums[i, ..., j]` denotes the subarray of `nums` starting at index `i` and ending at index `j` inclusive. Particularly, if `i > j` then `nums[i, ..., j]` denotes an empty subarray.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** [-3,-1,1,3,5]\n**Explanation:** For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,2,3,4,2]\n**Output:** [-2,-1,0,2,3]\n**Explanation:** For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length\u00a0<= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distinctDifferenceArray(self, nums: List[int]) -> List[int]:\n```\n", "predicted_rank": 7, "probability": [0.04687556251883507, 0.009547693654894829, 0.003348167985677719, 0.013812331482768059, 0.10547381639480591, 0.08206268399953842, 0.007764041423797607, 0.7311156988143921], "true_rank": 4}
{"id": "LeetCode/200", "prompt": "# Sum Multiples\n\nGiven a positive integer `n`, find the sum of all integers in the range `[1, n]` **inclusive** that are divisible by `3`, `5`, or `7`.\n\n\nReturn *an integer denoting the sum of all numbers in the given range satisfying\u00a0the constraint.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 7\n**Output:** 21\n**Explanation:** Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 40\n**Explanation:** Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 9\n**Output:** 30\n**Explanation:** Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumOfMultiples(self, n: int) -> int:\n```\n", "predicted_rank": 3, "probability": [0.2815001308917999, 0.01523236371576786, 0.006486161146312952, 0.4320632815361023, 0.2047664374113083, 0.01508992351591587, 0.005242389161139727, 0.03961930423974991], "true_rank": 0}
{"id": "LeetCode/187", "prompt": "# Number of Senior Citizens\n\nYou are given a **0-indexed** array of strings `details`. Each element of `details` provides information about a given passenger compressed into a string of length `15`. The system is such that:\n\n\n* The first ten characters consist of the phone number of passengers.\n* The next character denotes the gender of the person.\n* The following two characters are used to indicate the age of the person.\n* The last two characters determine the seat allotted to that person.\n\n\nReturn *the number of passengers who are **strictly** **more than 60 years old**.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]\n**Output:** 2\n**Explanation:** The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** details = [\"1313579440F2036\",\"2921522980M5644\"]\n**Output:** 0\n**Explanation:** None of the passengers are older than 60.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= details.length <= 100`\n* `details[i].length == 15`\n* `details[i] consists of digits from '0' to '9'.`\n* `details[i][10] is either 'M' or 'F' or 'O'.`\n* The phone numbers and seat numbers of the passengers are distinct.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSeniors(self, details: List[str]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.18581508100032806, 0.10780804604291916, 0.024799250066280365, 0.021581487730145454, 0.25138360261917114, 0.053148217499256134, 0.013158801011741161, 0.3423055410385132], "true_rank": 2}
{"id": "LeetCode/225", "prompt": "# Minimum Time to Repair Cars\n\nYou are given an integer array `ranks` representing the **ranks** of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank `r` can repair n cars in `r * n2` minutes.\n\n\nYou are also given an integer `cars` representing the total number of cars waiting in the garage to be repaired.\n\n\nReturn *the **minimum** time taken to repair all the cars.*\n\n\n**Note:** All the mechanics can repair the cars simultaneously.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ranks = [4,2,3,1], cars = 10\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ranks = [5,1,8], cars = 6\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= ranks.length <= 105`\n* `1 <= ranks[i] <= 100`\n* `1 <= cars <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def repairCars(self, ranks: List[int], cars: int) -> int:\n```\n", "predicted_rank": 0, "probability": [0.46957263350486755, 0.03133886307477951, 0.011089716106653214, 0.027592312544584274, 0.26410382986068726, 0.026940084993839264, 0.0217276681214571, 0.14763492345809937], "true_rank": 6}
{"id": "LeetCode/12", "prompt": "# Minimum Number of Operations to Make Array XOR Equal to K\n\nYou are given a **0-indexed** integer array `nums` and a positive integer `k`.\n\n\nYou can apply the following operation on the array **any** number of times:\n\n\n* Choose **any** element of the array and **flip** a bit in its **binary** representation. Flipping a bit means changing a `0` to `1` or vice versa.\n\n\nReturn *the **minimum** number of operations required to make the bitwise* `XOR` *of **all** elements of the final array equal to* `k`.\n\n\n**Note** that you can flip leading zero bits in the binary representation of elements. For example, for the number `(101)2` you can flip the fourth bit and obtain `(1101)2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,4], k = 1\n**Output:** 2\n**Explanation:** We can do the following operations:\n- Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].\n- Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].\nThe XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\nIt can be shown that we cannot make the XOR equal to k in less than 2 operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,0,2,0], k = 0\n**Output:** 0\n**Explanation:** The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n* `0 <= k <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.02784612774848938, 0.01181116234511137, 0.0029467230197042227, 0.004852330312132835, 0.025162076577544212, 0.004329995717853308, 0.004180067218840122, 0.9188714623451233], "true_rank": 5}
{"id": "LeetCode/240", "prompt": "# Find the String with LCP\n\nWe define the `lcp` matrix of any **0-indexed** string `word` of `n` lowercase English letters as an `n x n` grid such that:\n\n\n* `lcp[i][j]` is equal to the length of the **longest common prefix** between the substrings `word[i,n-1]` and `word[j,n-1]`.\n\n\nGiven an\u00a0`n x n` matrix `lcp`, return the alphabetically smallest string `word` that corresponds to `lcp`. If there is no such string, return an empty string.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"aabd\"` is lexicographically smaller than `\"aaca\"` because the first position they differ is at the third letter, and `'b'` comes before `'c'`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\n**Output:** \"abab\"\n**Explanation:** lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\n**Output:** \"aaaa\"\n**Explanation:** lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\". \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]\n**Output:** \"\"\n**Explanation:** lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n ==``lcp.length ==` `lcp[i].length`\u00a0`<= 1000`\n* `0 <= lcp[i][j] <= n`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n```\n", "predicted_rank": 7, "probability": [0.025136450305581093, 0.0058177318423986435, 0.0032915815245360136, 0.02198808826506138, 0.2575685977935791, 0.011505063623189926, 0.007152013015002012, 0.6675405502319336], "true_rank": 0}
{"id": "LeetCode/55", "prompt": "# Distribute Candies Among Children II\n\nYou are given two positive integers `n` and `limit`.\n\n\nReturn *the **total number** of ways to distribute* `n` *candies among* `3` *children such that no child gets more than* `limit` *candies.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, limit = 2\n**Output:** 3\n**Explanation:** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, limit = 3\n**Output:** 10\n**Explanation:** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 106`\n* `1 <= limit <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distributeCandies(self, n: int, limit: int) -> int:\n```\n", "predicted_rank": 5, "probability": [0.12485416978597641, 0.00869598239660263, 0.006901910062879324, 0.018327858299016953, 0.16728179156780243, 0.5941503643989563, 0.011772234924137592, 0.06801573932170868], "true_rank": 7}
{"id": "LeetCode/81", "prompt": "# Apply Operations to Make Two Strings Equal\n\nYou are given two **0-indexed** binary strings `s1` and `s2`, both of length `n`, and a positive integer `x`.\n\n\nYou can perform any of the following operations on the string `s1` **any** number of times:\n\n\n* Choose two indices `i` and `j`, and flip both `s1[i]` and `s1[j]`. The cost of this operation is `x`.\n* Choose an index `i` such that `i < n - 1` and flip both `s1[i]` and `s1[i + 1]`. The cost of this operation is `1`.\n\n\nReturn *the **minimum** cost needed to make the strings* `s1` *and* `s2` *equal, or return* `-1` *if it is impossible.*\n\n\n**Note** that flipping a character means changing it from `0` to `1` or vice-versa.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"1100011000\", s2 = \"0101001010\", x = 2\n**Output:** 4\n**Explanation:** We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = \"110**11**11000\".\n- Choose i = 4 and apply the second operation. The resulting string is s1 = \"1101**00**1000\".\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = \"**0**1010010**1**0\" = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"10110\", s2 = \"00011\", x = 4\n**Output:** -1\n**Explanation:** It is not possible to make the two strings equal.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == s1.length == s2.length`\n* `1 <= n, x <= 500`\n* `s1` and `s2` consist only of the characters `'0'` and `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, s1: str, s2: str, x: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.052207957953214645, 0.01959950290620327, 0.0034768981859087944, 0.04246024787425995, 0.1667173206806183, 0.00905272550880909, 0.004329492338001728, 0.7021558284759521], "true_rank": 0}
{"id": "LeetCode/13", "prompt": "# Minimum Number of Operations to Make X and Y Equal\n\nYou are given two positive integers `x` and `y`.\n\n\nIn one operation, you can do one of the four following operations:\n\n\n1. Divide `x` by `11` if `x` is a multiple of `11`.\n2. Divide `x` by `5` if `x` is a multiple of `5`.\n3. Decrement `x` by `1`.\n4. Increment `x` by `1`.\n\n\nReturn *the **minimum** number of operations required to make*  `x` *and* `y` equal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 26, y = 1\n**Output:** 3\n**Explanation:** We can make 26 equal to 1 by applying the following operations: \n1. Decrement x by 1\n2. Divide x by 5\n3. Divide x by 5\nIt can be shown that 3 is the minimum number of operations required to make 26 equal to 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 54, y = 2\n**Output:** 4\n**Explanation:** We can make 54 equal to 2 by applying the following operations: \n1. Increment x by 1\n2. Divide x by 11 \n3. Divide x by 5\n4. Increment x by 1\nIt can be shown that 4 is the minimum number of operations required to make 54 equal to 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** x = 25, y = 30\n**Output:** 5\n**Explanation:** We can make 25 equal to 30 by applying the following operations: \n1. Increment x by 1\n2. Increment x by 1\n3. Increment x by 1\n4. Increment x by 1\n5. Increment x by 1\nIt can be shown that 5 is the minimum number of operations required to make 25 equal to 30.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x, y <= 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperationsToMakeEqual(self, x: int, y: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.0949229896068573, 0.08997904509305954, 0.009480535052716732, 0.29358187317848206, 0.09134658426046371, 0.028743064031004906, 0.04240219667553902, 0.34954363107681274], "true_rank": 4}
{"id": "LeetCode/56", "prompt": "# Number of Strings Which Can Be Rearranged to Contain Substring\n\nYou are given an integer `n`.\n\n\nA string `s` is called **good** if it contains only lowercase English characters **and** it is possible to rearrange the characters of `s` such that the new string contains `\"leet\"` as a **substring**.\n\n\nFor example:\n\n\n* The string `\"lteer\"` is good because we can rearrange it to form `\"leetr\"` .\n* `\"letl\"` is not good because we cannot rearrange it to contain `\"leet\"` as a substring.\n\n\nReturn *the **total** number of good strings of length* `n`.\n\n\nSince the answer may be large, return it **modulo** `109 + 7`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 4\n**Output:** 12\n**Explanation:** The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 83943898\n**Explanation:** The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def stringCount(self, n: int) -> int:\n```\n", "predicted_rank": 0, "probability": [0.3921034634113312, 0.20488664507865906, 0.022153951227664948, 0.020572248846292496, 0.2538761496543884, 0.01231411937624216, 0.017794189974665642, 0.07629919052124023], "true_rank": 0}
{"id": "LeetCode/99", "prompt": "# Points That Intersect With Cars\n\nYou are given a **0-indexed** 2D integer array `nums` representing the coordinates of the cars parking on a number line. For any index `i`, `nums[i] = [starti, endi]` where `starti` is the starting point of the `ith` car and `endi` is the ending point of the `ith` car.\n\n\nReturn *the number of integer points on the line that are covered with **any part** of a car.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [[3,6],[1,5],[4,7]]\n**Output:** 7\n**Explanation:** All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [[1,3],[5,8]]\n**Output:** 7\n**Explanation:** Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `nums[i].length == 2`\n* `1 <= starti\u00a0<= endi\u00a0<= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfPoints(self, nums: List[List[int]]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.12523961067199707, 0.03595562279224396, 0.007278185337781906, 0.04450596496462822, 0.2619134783744812, 0.03262530639767647, 0.011660684831440449, 0.4808211028575897], "true_rank": 5}
{"id": "LeetCode/171", "prompt": "# Movement of Robots\n\nSome robots are standing on an infinite number line with their initial coordinates given by a **0-indexed** integer array `nums` and will start moving once given the command to move. The robots will move a unit distance each second.\n\n\nYou are given a string `s` denoting the direction in which robots will move on command. `'L'` means the robot will move towards the left side or negative side of the number line, whereas `'R'` means the robot will move towards the right side or positive side of the number line.\n\n\nIf two robots collide, they will start moving in opposite directions.\n\n\nReturn *the sum of distances between all the\u00a0pairs of robots* `d` *seconds after\u00a0the command.* Since the sum can be very large, return it modulo `109 + 7`.\n\n\n**Note:** \n\n\n* For two robots at the index `i` and `j`, pair `(i,j)` and pair `(j,i)` are considered the same pair.\n* When robots collide, they **instantly change** their directions without wasting any time.\n* Collision happens\u00a0when two robots share the same place in a\u00a0moment.\n\t+ For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right.\n\t+ For example,\u00a0if a robot is positioned in 0 going to the right and another is positioned in 1\u00a0going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-2,0,2], s = \"RLL\", d = 3\n**Output:** 8\n**Explanation:** \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,0], s = \"RL\", d = 2\n**Output:** 5\n**Explanation:** \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `-2 * 109\u00a0<= nums[i] <= 2 * 109`\n* `0 <= d <= 109`\n* `nums.length == s.length`\n* `s` consists of 'L' and 'R' only\n* `nums[i]`\u00a0will be unique.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.19566042721271515, 0.17367368936538696, 0.01889973133802414, 0.013679233379662037, 0.1579245626926422, 0.00862118136137724, 0.019865693524479866, 0.41167545318603516], "true_rank": 7}
{"id": "LeetCode/79", "prompt": "# Divisible and Non-divisible Sums Difference\n\nYou are given positive integers `n` and `m`.\n\n\nDefine two integers, `num1` and `num2`, as follows:\n\n\n* `num1`: The sum of all integers in the range `[1, n]` that are **not divisible** by `m`.\n* `num2`: The sum of all integers in the range `[1, n]` that are **divisible** by `m`.\n\n\nReturn *the integer* `num1 - num2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10, m = 3\n**Output:** 19\n**Explanation:** In the given example:\n- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\nWe return 37 - 18 = 19 as the answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, m = 6\n**Output:** 15\n**Explanation:** In the given example:\n- Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n- Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\nWe return 15 - 0 = 15 as the answer.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 5, m = 1\n**Output:** -15\n**Explanation:** In the given example:\n- Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n- Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\nWe return 0 - 15 = -15 as the answer.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def differenceOfSums(self, n: int, m: int) -> int:\n```\n", "predicted_rank": 1, "probability": [0.013578568585216999, 0.5077393054962158, 0.004403917584568262, 0.03399547562003136, 0.35492655634880066, 0.01835048757493496, 0.012051898054778576, 0.05495380237698555], "true_rank": 0}
{"id": "LeetCode/50", "prompt": "# Maximum Strong Pair XOR I\n\nYou are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n* `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\n**Note** that you can pick the same integer twice to form a pair.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 7\n**Explanation:** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,100]\n**Output:** 0\n**Explanation:** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,6,25,30]\n**Output:** 7\n**Explanation:** There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\nThe maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 3, "probability": [0.02759813331067562, 0.001845860737375915, 0.0013317653210833669, 0.9148769974708557, 0.01632206328213215, 0.00451778806746006, 0.00142943998798728, 0.03207797184586525], "true_rank": 3}
{"id": "LeetCode/45", "prompt": "# Find Maximum Non-decreasing Array Length\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nYou can perform any number of operations, where each operation involves selecting a **subarray** of the array and replacing it with the **sum** of its elements. For example, if the given array is `[1,3,5,6]` and you select subarray `[3,5]` the array will convert to `[1,8,6]`.\n\n\nReturn *the* ***maximum*** *length of a* ***non-decreasing*** *array that can be made after applying operations.*\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,2,2]\n**Output:** 1\n**Explanation:** This array with length 3 is not non-decreasing.\nWe have two ways to make the array length two.\nFirst, choosing subarray [2,2] converts the array to [5,4].\nSecond, choosing subarray [5,2] converts the array to [7,2].\nIn these two ways the array is not non-decreasing.\nAnd if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \nSo the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 4\n**Explanation:** The array is non-decreasing. So the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,6]\n**Output:** 3\n**Explanation:** Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\nBecause the given array is not non-decreasing, the maximum possible answer is 3.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMaximumLength(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.12627507746219635, 0.028339216485619545, 0.007592561189085245, 0.01265681441873312, 0.26978814601898193, 0.032095711678266525, 0.013691838830709457, 0.5095606446266174], "true_rank": 0}
{"id": "LeetCode/30", "prompt": "# Double Modular Exponentiation\n\nYou are given a **0-indexed** 2D array `variables` where `variables[i] = [ai, bi, ci, mi]`, and an integer `target`.\n\n\nAn index `i` is **good** if the following formula holds:\n\n\n* `0 <= i < variables.length`\n* `((aibi % 10)ci) % mi == target`\n\n\nReturn *an array consisting of **good** indices in **any order***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2\n**Output:** [0,2]\n**Explanation:** For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2.\nTherefore we return [0,2] as the answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** variables = [[39,3,1000,1000]], target = 17\n**Output:** []\n**Explanation:** For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1.\nTherefore we return [] as the answer.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= variables.length <= 100`\n* `variables[i] == [ai, bi, ci, mi]`\n* `1 <= ai, bi, ci, mi <= 103`\n* `0 <= target <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getGoodIndices(self, variables: List[List[int]], target: int) -> List[int]:\n```\n", "predicted_rank": 4, "probability": [0.2996247410774231, 0.01925586350262165, 0.014145733788609505, 0.13313348591327667, 0.36997053027153015, 0.02663395181298256, 0.022237904369831085, 0.1149977520108223], "true_rank": 4}
{"id": "LeetCode/168", "prompt": "# Collecting Chocolates\n\nYou are given a **0-indexed** integer array `nums` of size `n` representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index `i`\u00a0is `nums[i]`. Each chocolate is of a different type, and initially, the chocolate at the index\u00a0`i`\u00a0is of `ith` type.\n\n\nIn one operation, you can do the following with an incurred **cost** of `x`:\n\n\n* Simultaneously change the chocolate of `ith` type to `((i + 1) mod n)th` type for all chocolates.\n\n\nReturn *the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [20,1,15], x = 5\n**Output:** 13\n**Explanation:** Initially, the chocolate types are [0,1,2]. We will buy the 1st\u00a0type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2ndtype of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], x = 4\n**Output:** 6\n**Explanation:** We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 109`\n* `1 <= x <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minCost(self, nums: List[int], x: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.14519764482975006, 0.041789304465055466, 0.07300157099962234, 0.01771850511431694, 0.09709199517965317, 0.02342146262526512, 0.014698566868901253, 0.5870809555053711], "true_rank": 7}
{"id": "LeetCode/113", "prompt": "# Determine the Minimum Sum of a k-avoiding Array\n\nYou are given two integers,\u00a0`n` and `k`.\n\n\nAn array of **distinct** positive integers is called a **k-avoiding** array if there does not exist any pair of distinct elements that sum to `k`.\n\n\nReturn *the **minimum** possible sum of a k-avoiding array of length* `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, k = 4\n**Output:** 18\n**Explanation:** Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, k = 6\n**Output:** 3\n**Explanation:** We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n```\n", "predicted_rank": 4, "probability": [0.3351496160030365, 0.009816321544349194, 0.004949057474732399, 0.0585915632545948, 0.49927282333374023, 0.008151247166097164, 0.05436840280890465, 0.02970094420015812], "true_rank": 7}
{"id": "LeetCode/182", "prompt": "# Minimum String Length After Removing Substrings\n\nYou are given a string `s` consisting only of **uppercase** English letters.\n\n\nYou can apply some operations to this string where, in one operation, you can remove **any** occurrence of one of the substrings `\"AB\"` or `\"CD\"` from `s`.\n\n\nReturn *the **minimum** possible length of the resulting string that you can obtain*.\n\n\n**Note** that the string concatenates after removing the substring and could produce new `\"AB\"` or `\"CD\"` substrings.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABFCACDB\"\n**Output:** 2\n**Explanation:** We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ACBBD\"\n**Output:** 5\n**Explanation:** We cannot do any operations on the string so the length remains the same.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s`\u00a0consists only of uppercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minLength(self, s: str) -> int:\n```\n", "predicted_rank": 7, "probability": [0.1676122546195984, 0.03588605672121048, 0.003437028732150793, 0.01277696993201971, 0.017143720760941505, 0.005586112383753061, 0.006189953535795212, 0.7513679265975952], "true_rank": 1}
{"id": "LeetCode/90", "prompt": "# Beautiful Towers I\n\nYou are given a **0-indexed** array `maxHeights` of `n` integers.\n\n\nYou are tasked with building `n` towers in the coordinate line. The `ith` tower is built at coordinate `i` and has a height of `heights[i]`.\n\n\nA configuration of towers is **beautiful** if the following conditions hold:\n\n\n1. `1 <= heights[i] <= maxHeights[i]`\n2. `heights` is a **mountain** array.\n\n\nArray `heights` is a **mountain** if there exists an index `i` such that:\n\n\n* For all `0 < j <= i`, `heights[j - 1] <= heights[j]`\n* For all `i <= k < n - 1`, `heights[k + 1] <= heights[k]`\n\n\nReturn *the **maximum possible sum of heights** of a beautiful configuration of towers*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** maxHeights = [5,3,4,1,1]\n**Output:** 13\n**Explanation:** One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** maxHeights = [6,5,3,9,2,7]\n**Output:** 22\n**Explanation:** One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** maxHeights = [3,2,5,5,2,3]\n**Output:** 18\n**Explanation:** One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == maxHeights <= 103`\n* `1 <= maxHeights[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.03470079228281975, 0.00737567525357008, 0.010383904911577702, 0.020527197048068047, 0.019093578681349754, 0.024625631049275398, 0.022511867806315422, 0.8607813119888306], "true_rank": 7}
{"id": "LeetCode/118", "prompt": "# Sorting Three Groups\n\nYou are given a **0-indexed** integer array `nums` of length `n`.  \n\n  \n\nThe numbers from `0` to `n - 1` are divided into three groups numbered from `1` to `3`, where number `i` belongs to group `nums[i]`. Notice that some groups may be **empty**.  \n\n  \n\nYou are allowed to perform this operation any number of times:\n\n\n* Pick number `x` and change its group. More formally, change `nums[x]` to any number from `1` to `3`.\n\n\nA new array `res` is constructed using the following procedure:\n\n\n1. Sort the numbers in each group independently.\n2. Append the elements of groups `1`, `2`, and `3` to `res` **in this order**.\n\n\nArray `nums` is called a **beautiful array** if the constructed array `res` is sorted in **non-decreasing** order.\n\n\nReturn *the **minimum** number of operations to make* `nums` *a **beautiful array***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,2,1]\n**Output:** 3\n**Explanation:** It's optimal to perform three operations:\n1. change nums[0] to 1.\n2. change nums[2] to 1.\n3. change nums[3] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than three operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,1,3,3]\n**Output:** 2\n**Explanation:** It's optimal to perform two operations:\n1. change nums[1] to 1.\n2. change nums[2] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3], group 2 becomes empty, and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than two operations.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,2,2,2,3,3]\n**Output:** 0\n**Explanation:** It's optimal to not perform operations.\nAfter sorting the numbers in each group, group 1 becomes empty, group 2 becomes equal to [0,1,2,3] and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 3`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.07319201529026031, 0.0278333630412817, 0.004913398064672947, 0.02639700472354889, 0.03516266122460365, 0.04259984567761421, 0.014100070111453533, 0.7758015990257263], "true_rank": 1}
{"id": "LeetCode/226", "prompt": "# Count the Number of Vowel Strings in Range\n\nYou are given a **0-indexed** array of string `words` and two integers `left` and `right`.\n\n\nA string is called a **vowel string** if it starts with a vowel character and ends with a vowel character where vowel characters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\nReturn *the number of vowel strings* `words[i]` *where* `i` *belongs to the inclusive range* `[left, right]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"are\",\"amy\",\"u\"], left = 0, right = 2\n**Output:** 2\n**Explanation:** \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4\n**Output:** 3\n**Explanation:** \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 1000`\n* `1 <= words[i].length <= 10`\n* `words[i]` consists of only lowercase English letters.\n* `0 <= left <= right < words.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.04563633352518082, 0.10540607571601868, 0.012058035470545292, 0.01852675899863243, 0.39080724120140076, 0.018344242125749588, 0.012763982638716698, 0.39645737409591675], "true_rank": 0}
{"id": "LeetCode/159", "prompt": "# Construct the Longest New String\n\nYou are given three integers `x`, `y`, and `z`.\n\n\nYou have `x` strings equal to `\"AA\"`, `y` strings equal to `\"BB\"`, and `z` strings equal to `\"AB\"`. You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain `\"AAA\"` or `\"BBB\"` as a substring.\n\n\nReturn *the maximum possible length of the new string*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 2, y = 5, z = 1\n**Output:** 12\n**Explanation:** We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 3, y = 2, z = 2\n**Output:** 14\n**Explanation:** We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x, y, z <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.12283583730459213, 0.1677330881357193, 0.11634340137243271, 0.017149392515420914, 0.1284797638654709, 0.011170410551130772, 0.010705108754336834, 0.4255830645561218], "true_rank": 7}
{"id": "LeetCode/250", "prompt": "# Count Vowel Strings in Ranges\n\nYou are given a **0-indexed** array of strings `words` and a 2D array of integers `queries`.\n\n\nEach query `queries[i] = [li, ri]` asks us to find the number of strings present in the range `li` to `ri` (both **inclusive**) of `words` that start and end with a vowel.\n\n\nReturn *an array* `ans` *of size* `queries.length`*, where* `ans[i]` *is the answer to the* `i`th *query*.\n\n\n**Note** that the vowel letters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]]\n**Output:** [2,3,0]\n**Explanation:** The strings starting and ending with a vowel are \"aba\", \"ece\", \"aa\" and \"e\".\nThe answer to the query [0,2] is 2 (strings \"aba\" and \"ece\").\nto query [1,4] is 3 (strings \"ece\", \"aa\", \"e\").\nto query [1,1] is 0.\nWe return [2,3,0].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]]\n**Output:** [3,2,1]\n**Explanation:** Every string satisfies the conditions, so we return [3,2,1].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 105`\n* `1 <= words[i].length <= 40`\n* `words[i]` consists only of lowercase English letters.\n* `sum(words[i].length) <= 3 * 105`\n* `1 <= queries.length <= 105`\n* `0 <= li <= ri <\u00a0words.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:\n```\n", "predicted_rank": 7, "probability": [0.0789189487695694, 0.007238155696541071, 0.006479775067418814, 0.01835382729768753, 0.11004141718149185, 0.033023301512002945, 0.009643645957112312, 0.7363009452819824], "true_rank": 6}
{"id": "LeetCode/60", "prompt": "# Find the K-or of an Array\n\nYou are given a **0-indexed** integer array `nums`, and an integer `k`.\n\n\nThe **K-or** of `nums` is a non-negative integer that satisfies the following:\n\n\n* The `ith` bit is set in the K-or **if and only if** there are at least `k` elements of nums in which bit `i` is set.\n\n\nReturn *the  **K-or** of* `nums`.\n\n\n**Note** that a bit `i` is set in `x` if `(2i AND x) == 2i`, where `AND` is the bitwise `AND` operator.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [7,12,9,8,9,15], k = 4\n**Output:** 9\n**Explanation:** Bit 0 is set at nums[0], nums[2], nums[4], and nums[5].\nBit 1 is set at nums[0], and nums[5].\nBit 2 is set at nums[0], nums[1], and nums[5].\nBit 3 is set at nums[1], nums[2], nums[3], nums[4], and nums[5].\nOnly bits 0 and 3 are set in at least k elements of the array, and bits i >= 4 are not set in any of the array's elements. Hence, the answer is 2^0 + 2^3 = 9.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,12,1,11,4,5], k = 6\n**Output:** 0\n**Explanation:** Since k == 6 == nums.length, the 6-or of the array is equal to the bitwise AND of all its elements. Hence, the answer is 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [10,8,5,9,11,6,8], k = 1\n**Output:** 15\n**Explanation:** Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `0 <= nums[i] < 231`\n* `1 <= k <= nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n```\n", "predicted_rank": 4, "probability": [0.07037343829870224, 0.011715278960764408, 0.02370557375252247, 0.007785584777593613, 0.7430424690246582, 0.008430207148194313, 0.005639027804136276, 0.12930844724178314], "true_rank": 1}
{"id": "LeetCode/7", "prompt": "# Find Beautiful Indices in the Given Array II\n\nYou are given a **0-indexed** string `s`, a string `a`, a string `b`, and an integer `k`.\n\n\nAn index `i` is **beautiful** if:\n\n\n* `0 <= i <= s.length - a.length`\n* `s[i..(i + a.length - 1)] == a`\n* There exists an index `j` such that:\n\t+ `0 <= j <= s.length - b.length`\n\t+ `s[j..(j + b.length - 1)] == b`\n\t+ `|j - i| <= k`\n\n\nReturn *the array that contains beautiful indices in **sorted order from smallest to largest***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\n**Output:** [16,33]\n**Explanation:** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", a = \"a\", b = \"a\", k = 4\n**Output:** [0]\n**Explanation:** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= s.length <= 5 * 105`\n* `1 <= a.length, b.length <= 5 * 105`\n* `s`, `a`, and `b` contain only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n```\n", "predicted_rank": 4, "probability": [0.016010437160730362, 0.0032069082371890545, 0.0017405669204890728, 0.006957674864679575, 0.9575585126876831, 0.005130942910909653, 0.003663214622065425, 0.005731827579438686], "true_rank": 5}
{"id": "LeetCode/190", "prompt": "# Power of Heroes\n\nYou are given a **0-indexed** integer array `nums` representing the strength of some heroes. The **power** of a group of heroes is defined as follows:\n\n\n* Let `i0`, `i1`, ... ,`ik` be the indices of the heroes in a group. Then, the power of this group is `max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik])`.\n\n\nReturn *the sum of the **power** of all **non-empty** groups of heroes possible.* Since the sum could be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,4]\n**Output:** 141\n**Explanation:** \n1st\u00a0group: [2] has power = 22\u00a0* 2 = 8.\n2nd\u00a0group: [1] has power = 12 * 1 = 1. \n3rd\u00a0group: [4] has power = 42 * 4 = 64. \n4th\u00a0group: [2,1] has power = 22 * 1 = 4. \n5th\u00a0group: [2,4] has power = 42 * 2 = 32. \n6th\u00a0group: [1,4] has power = 42 * 1 = 16. \n\u200b\u200b\u200b\u200b\u200b\u200b\u200b7th\u00a0group: [2,1,4] has power = 42\u200b\u200b\u200b\u200b\u200b\u200b\u200b * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1]\n**Output:** 7\n**Explanation:** A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumOfPower(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.10025238990783691, 0.02657492831349373, 0.06524412333965302, 0.04873489961028099, 0.15588124096393585, 0.08180196583271027, 0.01792902871966362, 0.5035814046859741], "true_rank": 7}
{"id": "LeetCode/11", "prompt": "# Smallest Missing Integer Greater Than Sequential Prefix Sum\n\nYou are given a **0-indexed** array of integers `nums`.\n\n\nA prefix `nums[0..i]` is **sequential** if, for all `1 <= j <= i`, `nums[j] = nums[j - 1] + 1`. In particular, the prefix consisting only of `nums[0]` is **sequential**.\n\n\nReturn *the **smallest** integer* `x` *missing from* `nums` *such that* `x` *is greater than or equal to the sum of the **longest** sequential prefix.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,2,5]\n**Output:** 6\n**Explanation:** The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,4,5,1,12,14,13]\n**Output:** 15\n**Explanation:** The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def missingInteger(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.12210821360349655, 0.005945737939327955, 0.00384248117916286, 0.022817986086010933, 0.17756977677345276, 0.040076810866594315, 0.00956426840275526, 0.6180747151374817], "true_rank": 7}
{"id": "LeetCode/93", "prompt": "# Happy Students\n\nYou are given a **0-indexed** integer array `nums` of length `n` where `n` is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\n\n\nThe `ith` student will become happy if one of these two conditions is met:\n\n\n* The student is selected and the total number of selected students is **strictly greater than** `nums[i]`.\n* The student is not selected and the total number of selected students is **strictly** **less than** `nums[i]`.\n\n\nReturn *the number of ways to select a group of students so that everyone remains happy.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1]\n**Output:** 2\n**Explanation:** \nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group. \nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,0,3,3,6,7,2,7]\n**Output:** 3\n**Explanation:** \nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] < nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countWays(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.2980218827724457, 0.027409924194216728, 0.011252634227275848, 0.02392404153943062, 0.18965652585029602, 0.08664848655462265, 0.023672575131058693, 0.33941397070884705], "true_rank": 7}
{"id": "LeetCode/196", "prompt": "# Maximum Sum With Exactly K Elements \n\nYou are given a **0-indexed** integer array `nums` and an integer `k`. Your task is to perform the following operation **exactly** `k` times in order to maximize your score:\n\n\n1. Select an element `m` from `nums`.\n2. Remove the selected element `m` from the array.\n3. Add a new element with a value of `m + 1` to the array.\n4. Increase your score by `m`.\n\n\nReturn *the maximum score you can achieve after performing the operation exactly* `k` *times.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 3\n**Output:** 18\n**Explanation:** We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,5,5], k = 2\n**Output:** 11\n**Explanation:** We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= k <= 100`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.10384853184223175, 0.014620086178183556, 0.004660594277083874, 0.03367150202393532, 0.05011823773384094, 0.04330309480428696, 0.04078741744160652, 0.7089905142784119], "true_rank": 0}
{"id": "LeetCode/132", "prompt": "# Count Stepping Numbers in Range\n\nGiven two positive integers `low` and `high` represented as strings, find the count of **stepping numbers** in the inclusive range `[low, high]`.\n\n\nA **stepping number** is an integer such that all of its adjacent digits have an absolute difference of **exactly** `1`.\n\n\nReturn *an integer denoting the count of stepping numbers in the inclusive range* `[low, high]`*.* \n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n**Note:** A stepping number should not have a leading zero.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** low = \"1\", high = \"11\"\n**Output:** 10\n**Explanation:** The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** low = \"90\", high = \"101\"\n**Output:** 2\n**Explanation:** The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. \n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= int(low) <= int(high) < 10100`\n* `1 <= low.length, high.length <= 100`\n* `low` and `high` consist of only digits.\n* `low` and `high` don't have any leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSteppingNumbers(self, low: str, high: str) -> int:\n```\n", "predicted_rank": 4, "probability": [0.024814987555146217, 0.014003637246787548, 0.02066069468855858, 0.01669725589454174, 0.7806346416473389, 0.01875641942024231, 0.00773143395781517, 0.1167009025812149], "true_rank": 0}
{"id": "LeetCode/172", "prompt": "# Find a Good Subset of the Matrix\n\nYou are given a **0-indexed** `m x n` binary matrix `grid`.\n\n\nLet us call a **non-empty** subset of rows **good** if the sum of each column of the subset is at most half of the length of the subset.\n\n\nMore formally, if the length of the chosen subset of rows is `k`, then the sum of each column should be at most `floor(k / 2)`.\n\n\nReturn *an integer array that contains row indices of a good subset sorted in **ascending** order.*\n\n\nIf there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.\n\n\nA **subset** of rows of the matrix `grid` is any matrix that can be obtained by deleting some (possibly none or all) rows from `grid`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]\n**Output:** [0,1]\n**Explanation:** We can choose the 0th and 1st rows to create a good subset of rows.\nThe length of the chosen subset is 2.\n- The sum of the 0th\u00a0column is 0 + 0 = 0, which is at most half of the length of the subset.\n- The sum of the 1st\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 2nd\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 3rd\u00a0column is 0 + 1 = 1, which is at most half of the length of the subset.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0]]\n**Output:** [0]\n**Explanation:** We can choose the 0th row to create a good subset of rows.\nThe length of the chosen subset is 1.\n- The sum of the 0th\u00a0column is 0, which is at most half of the length of the subset.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** grid = [[1,1,1],[1,1,1]]\n**Output:** []\n**Explanation:** It is impossible to choose any subset of rows to create a good subset.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m <= 104`\n* `1 <= n <= 5`\n* `grid[i][j]` is either `0` or `1`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n```\n", "predicted_rank": 7, "probability": [0.3356965482234955, 0.011335094459354877, 0.010296119377017021, 0.013702514581382275, 0.0854281336069107, 0.009481982327997684, 0.010801591910421848, 0.5232579708099365], "true_rank": 3}
{"id": "LeetCode/69", "prompt": "# Minimum Number of Groups to Create a Valid Assignment\n\nYou are given a **0-indexed** integer array `nums` of length `n`.\n\n\nWe want to group the indices so for each index `i` in the range `[0, n - 1]`, it is assigned to **exactly one** group.\n\n\nA groupassignment is **valid** if the following conditions hold:\n\n\n* For every group `g`, all indices `i` assigned to group `g` have the same value in `nums`.\n* For any two groups `g1` and `g2`, the **difference** between the **number of indices** assigned to `g1` and `g2` should **not exceed** `1`.\n\n\nReturn *an integer denoting* *the **minimum** number of groups needed to create a valid group assignment.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,3,2,3]\n**Output:** 2\n**Explanation:** One way the indices can be assigned to 2 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0,2,4]\ngroup 2 -> [1,3]\nAll indices are assigned to one group.\nIn group 1, nums[0] == nums[2] == nums[4], so all indices have the same value.\nIn group 2, nums[1] == nums[3], so all indices have the same value.\nThe number of indices assigned to group 1 is 3, and the number of indices assigned to group 2 is 2.\nTheir difference doesn't exceed 1.\nIt is not possible to use fewer than 2 groups because, in order to use just 1 group, all indices assigned to that group must have the same value.\nHence, the answer is 2.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,10,10,3,1,1]\n**Output:** 4\n**Explanation:** One way the indices can be assigned to 4 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0]\ngroup 2 -> [1,2]\ngroup 3 -> [3]\ngroup 4 -> [4,5]\nThe group assignment above satisfies both conditions.\nIt can be shown that it is not possible to create a valid assignment using fewer than 4 groups.\nHence, the answer is 4.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minGroupsForValidAssignment(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 4, "probability": [0.16748380661010742, 0.05512251332402229, 0.00876634195446968, 0.06448708474636078, 0.3996580243110657, 0.018975879997015, 0.020908154547214508, 0.26459816098213196], "true_rank": 0}
{"id": "LeetCode/236", "prompt": "# Find the Maximum Number of Marked Indices\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n\n\n* Pick two **different unmarked** indices `i` and `j` such that `2 * nums[i] <= nums[j]`, then mark `i` and `j`.\n\n\nReturn *the maximum possible number of marked indices in `nums` using the above operation any number of times*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,5,2,4]\n**Output:** 2\n**Explanation:** In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,2,5,4]\n**Output:** 4\n**Explanation:** In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [7,6,8]\n**Output:** 0\n**Explanation:** There is no valid operation to do, so the answer is 0.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.012044116854667664, 0.005321883130818605, 0.0030621758196502924, 0.004779569339007139, 0.02877393178641796, 0.030586550012230873, 0.0033292106818407774, 0.9121025204658508], "true_rank": 4}
{"id": "LeetCode/102", "prompt": "# Minimum Operations to Make a Special Number\n\nYou are given a **0-indexed** string `num` representing a non-negative integer.\n\n\nIn one operation, you can pick any digit of `num` and delete it. Note that if you delete all the digits of `num`, `num` becomes `0`.\n\n\nReturn *the **minimum number of operations** required to make* `num` *special*.\n\n\nAn integer `x` is considered **special** if it is divisible by `25`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"2245047\"\n**Output:** 2\n**Explanation:** Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"2908305\"\n**Output:** 3\n**Explanation:** Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"10\"\n**Output:** 1\n**Explanation:** Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 100`\n* `num` only consists of digits `'0'` through `'9'`.\n* `num` does not contain any leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperations(self, num: str) -> int:\n```\n", "predicted_rank": 7, "probability": [0.13062353432178497, 0.03185176104307175, 0.004223261959850788, 0.0870840921998024, 0.2143329381942749, 0.005177254322916269, 0.004535563290119171, 0.5221716165542603], "true_rank": 0}
{"id": "LeetCode/116", "prompt": "# Count Pairs Whose Sum is Less than Target\n\nGiven a **0-indexed** integer array `nums` of length `n` and an integer `target`, return *the number of pairs* `(i, j)` *where* `0 <= i < j < n` *and* `nums[i] + nums[j] < target`.\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,1,2,3,1], target = 2\n**Output:** 3\n**Explanation:** There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target \n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-6,2,5,-2,-7,-1,3], target = -2\n**Output:** 10\n**Explanation:** There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length == n <= 50`\n* `-50 <= nums[i], target <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countPairs(self, nums: List[int], target: int) -> int:\n```\n", "predicted_rank": 3, "probability": [0.1600024551153183, 0.041298430413007736, 0.005354360211640596, 0.32732170820236206, 0.22304758429527283, 0.07249808311462402, 0.009773656725883484, 0.16070371866226196], "true_rank": 1}
{"id": "LeetCode/51", "prompt": "# High-Access Employees\n\nYou are given a 2D **0-indexed** array of strings, `access_times`, with size `n`. For each `i` where `0 <= i <= n - 1`, `access_times[i][0]` represents the name of an employee, and `access_times[i][1]` represents the access time of that employee. All entries in `access_times` are within the same day.\n\n\nThe access time is represented as **four digits** using a **24-hour** time format, for example, `\"0800\"` or `\"2250\"`.\n\n\nAn employee is said to be **high-access** if he has accessed the system **three or more** times within a **one-hour period**.\n\n\nTimes with exactly one hour of difference are **not** considered part of the same one-hour period. For example, `\"0815\"` and `\"0915\"` are not part of the same one-hour period.\n\n\nAccess times at the start and end of the day are **not** counted within the same one-hour period. For example, `\"0005\"` and `\"2350\"` are not part of the same one-hour period.\n\n\nReturn *a list that contains the names of **high-access** employees with any order you want.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]\n**Output:** [\"a\"]\n**Explanation:** \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.\nBut \"b\" does not have more than two access times at all.\nSo the answer is [\"a\"].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]]\n**Output:** [\"c\",\"d\"]\n**Explanation:** \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.\n\"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.\nHowever, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"].\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]]\n**Output:** [\"ab\",\"cd\"]\n**Explanation:** \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.\n\"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.\nSo the answer is [\"ab\",\"cd\"].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= access_times.length <= 100`\n* `access_times[i].length == 2`\n* `1 <= access_times[i][0].length <= 10`\n* `access_times[i][0]` consists only of English small letters.\n* `access_times[i][1].length == 4`\n* `access_times[i][1]` is in 24-hour time format.\n* `access_times[i][1]` consists only of `'0'` to `'9'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findHighAccessEmployees(self, access_times: List[List[str]]) -> List[str]:\n```\n", "predicted_rank": 0, "probability": [0.4659670889377594, 0.046879760921001434, 0.016239872202277184, 0.03546624258160591, 0.15995599329471588, 0.09752866625785828, 0.01930982433259487, 0.15865252912044525], "true_rank": 3}
{"id": "LeetCode/175", "prompt": "# Count of Integers\n\nYou are given two numeric strings `num1` and `num2` and two integers `max_sum` and `min_sum`. We denote an integer `x` to be *good* if:\n\n\n* `num1 <= x <= num2`\n* `min_sum <= digit_sum(x) <= max_sum`.\n\n\nReturn *the number of good integers*. Since the answer may be large, return it modulo `109 + 7`.\n\n\nNote that `digit_sum(x)` denotes the sum of the digits of `x`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8\n**Output:** 11\n**Explanation:** There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5\n**Output:** 5\n**Explanation:** The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num1 <= num2 <= 1022`\n* `1 <= min_sum <= max_sum <= 400`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n```\n", "predicted_rank": 3, "probability": [0.15208011865615845, 0.07682327181100845, 0.017836911603808403, 0.4695061445236206, 0.18817339837551117, 0.035002436488866806, 0.013802721165120602, 0.04677499830722809], "true_rank": 7}
{"id": "LeetCode/219", "prompt": "# Number of Even and Odd Bits\n\nYou are given a **positive** integer `n`.\n\n\nLet `even` denote the number of even indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\n\nLet `odd` denote the number of odd indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\n\nReturn *an integer array* `answer` *where* `answer = [even, odd]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 17\n**Output:** [2,0]\n**Explanation:** The binary representation of 17 is 10001. \nIt contains 1 on the 0th and 4th indices. \nThere are 2 even and 0 odd indices.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** [0,1]\n**Explanation:** The binary representation of 2 is 10.\nIt contains 1 on the 1st index. \nThere are 0 even and 1 odd indices.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n```\n", "predicted_rank": 4, "probability": [0.08819519728422165, 0.011481625027954578, 0.010618990287184715, 0.07991056144237518, 0.6622843146324158, 0.0475727878510952, 0.008263991214334965, 0.09167256951332092], "true_rank": 4}
{"id": "LeetCode/238", "prompt": "# Minimum Operations to Reduce an Integer to 0\n\nYou are given a positive integer `n`, you can do the following operation **any** number of times:\n\n\n* Add or subtract a **power** of `2` from `n`.\n\n\nReturn *the **minimum** number of operations to make* `n` *equal to* `0`.\n\n\nA number `x` is power of `2` if `x == 2i`\u00a0where `i >= 0`*.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 39\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 20 = 1 to n, so now n = 40.\n- Subtract 23 = 8 from n, so now n = 32.\n- Subtract 25 = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 54\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 21 = 2 to n, so now n = 56.\n- Add 23 = 8 to n, so now n = 64.\n- Subtract 26 = 64 from n, so now n = 0.\nSo the minimum number of operations is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, n: int) -> int:\n```\n", "predicted_rank": 4, "probability": [0.10256519913673401, 0.031550128012895584, 0.011924756690859795, 0.11578945815563202, 0.6438718438148499, 0.028421813622117043, 0.014444679953157902, 0.05143218860030174], "true_rank": 0}
{"id": "LeetCode/112", "prompt": "# Check if a String Is an Acronym of Words\n\nGiven an array of strings `words` and a string `s`, determine if `s` is an **acronym** of words.\n\n\nThe string `s` is considered an acronym of `words` if it can be formed by concatenating the **first** character of each string in `words` **in order**. For example, `\"ab\"` can be formed from `[\"apple\", \"banana\"]`, but it can't be formed from `[\"bear\", \"aardvark\"]`.\n\n\nReturn `true` *if* `s` *is an acronym of* `words`*, and* `false` *otherwise.* \n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\n**Output:** true\n**Explanation:** The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"an\",\"apple\"], s = \"a\"\n**Output:** false\n**Explanation:** The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\n**Output:** true\n**Explanation:** By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 100`\n* `1 <= words[i].length <= 10`\n* `1 <= s.length <= 100`\n* `words[i]` and `s` consist of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n```\n", "predicted_rank": 7, "probability": [0.30642592906951904, 0.04620081186294556, 0.02419380284845829, 0.02017897181212902, 0.1395704448223114, 0.03946792334318161, 0.019984249025583267, 0.4039778411388397], "true_rank": 1}
{"id": "LeetCode/189", "prompt": "# Maximum OR\n\nYou are given a **0-indexed** integer array `nums` of length `n` and an integer `k`. In an operation, you can choose an element and multiply it by `2`.\n\n\nReturn *the maximum possible value of* `nums[0] | nums[1] | ... | nums[n - 1]` *that can be obtained after applying the operation on nums at most* `k` *times*.\n\n\nNote that `a | b` denotes the **bitwise or** between two integers `a` and `b`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [12,9], k = 1\n**Output:** 30\n**Explanation:** If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [8,1,2], k = 2\n**Output:** 35\n**Explanation:** If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 15`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumOr(self, nums: List[int], k: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.1537129133939743, 0.010165038518607616, 0.008516675792634487, 0.019687099382281303, 0.10203911364078522, 0.006588364951312542, 0.005990918725728989, 0.6932998895645142], "true_rank": 7}
{"id": "LeetCode/44", "prompt": "# Minimum Number of Coins for Fruits\n\nYou are at a fruit market with different types of exotic fruits on display.\n\n\nYou are given a **1-indexed** array `prices`, where `prices[i]` denotes the number of coins needed to purchase the `ith` fruit.\n\n\nThe fruit market has the following offer:\n\n\n* If you purchase the `ith` fruit at `prices[i]` coins, you can get the next `i` fruits for free.\n\n\n**Note** that even if you **can** take fruit `j` for free, you can still purchase it for `prices[j]` coins to receive a new offer.\n\n\nReturn *the **minimum** number of coins needed to acquire all the fruits*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [3,1,2]\n**Output:** 4\n**Explanation:** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 3 coins, you are allowed to take the 2nd fruit for free.\n- Purchase the 2nd fruit with 1 coin, you are allowed to take the 3rd fruit for free.\n- Take the 3rd fruit for free.\nNote that even though you were allowed to take the 2nd fruit for free, you purchased it because it is more optimal.\nIt can be proven that 4 is the minimum number of coins needed to acquire all the fruits.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [1,10,1,1]\n**Output:** 2\n**Explanation:** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 1 coin, you are allowed to take the 2nd fruit for free.\n- Take the 2nd fruit for free.\n- Purchase the 3rd fruit for 1 coin, you are allowed to take the 4th fruit for free.\n- Take the 4th fruit for free.\nIt can be proven that 2 is the minimum number of coins needed to acquire all the fruits.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 1000`\n* `1 <= prices[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCoins(self, prices: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.19820892810821533, 0.015829624608159065, 0.0033969590440392494, 0.0058028060011565685, 0.025083666667342186, 0.01052300725132227, 0.008044855669140816, 0.733110249042511], "true_rank": 0}
{"id": "LeetCode/232", "prompt": "# Split With Minimum Sum\n\nGiven a positive integer `num`, split it into two non-negative integers `num1` and `num2` such that:\n\n\n* The concatenation of `num1` and `num2` is a permutation of `num`.\n\t+ In other words, the sum of the number of occurrences of each digit in `num1` and `num2` is equal to the number of occurrences of that digit in `num`.\n* `num1` and `num2` can contain leading zeros.\n\n\nReturn *the **minimum** possible sum of* `num1` *and* `num2`.\n\n\n**Notes:**\n\n\n* It is guaranteed that `num` does not contain any leading zeros.\n* The order of occurrence of the digits in `num1` and `num2` may differ from the order of occurrence of `num`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 4325\n**Output:** 59\n**Explanation:** We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 687\n**Output:** 75\n**Explanation:** We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `10 <= num <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def splitNum(self, num: int) -> int:\n```\n", "predicted_rank": 0, "probability": [0.3376019597053528, 0.1267591118812561, 0.06379324942827225, 0.07141739875078201, 0.19790470600128174, 0.04565702751278877, 0.020214207470417023, 0.1366523802280426], "true_rank": 6}
{"id": "LeetCode/129", "prompt": "# Number of Employees Who Met the Target\n\nThere are `n` employees in a company, numbered from `0` to `n - 1`. Each employee `i` has worked for `hours[i]` hours in the company.\n\n\nThe company requires each employee to work for **at least** `target` hours.\n\n\nYou are given a **0-indexed** array of non-negative integers `hours` of length `n` and a non-negative integer `target`.\n\n\nReturn *the integer denoting the number of employees who worked at least* `target` *hours*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** hours = [0,1,2,3,4], target = 2\n**Output:** 3\n**Explanation:** The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** hours = [5,1,4,2,2], target = 6\n**Output:** 0\n**Explanation:** The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == hours.length <= 50`\n* `0 <=\u00a0hours[i], target <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n```\n", "predicted_rank": 7, "probability": [0.05033273249864578, 0.005314336623996496, 0.003546888707205653, 0.0192180797457695, 0.03919673711061478, 0.005913562141358852, 0.00454418221488595, 0.8719335794448853], "true_rank": 0}
{"id": "LeetCode/52", "prompt": "# Minimum Operations to Maximize Last Elements in Arrays\n\nYou are given two **0-indexed** integer arrays, `nums1` and `nums2`, both having length `n`.\n\n\nYou are allowed to perform a series of **operations** (**possibly none**).\n\n\nIn an operation, you select an index `i` in the range `[0, n - 1]` and **swap** the values of `nums1[i]` and `nums2[i]`.\n\n\nYour task is to find the **minimum** number of operations required to satisfy the following conditions:\n\n\n* `nums1[n - 1]` is equal to the **maximum value** among all elements of `nums1`, i.e., `nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1])`.\n* `nums2[n - 1]` is equal to the **maximum** **value** among all elements of `nums2`, i.e., `nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1])`.\n\n\nReturn *an integer denoting the **minimum** number of operations needed to meet **both** conditions*, *or* `-1` *if it is **impossible** to satisfy both conditions.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,7], nums2 = [4,5,3]\n**Output:** 1\n**Explanation:** In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\n**Output:** 2\n**Explanation:** In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2.   \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,5,4], nums2 = [2,5,3]\n**Output:** -1\n**Explanation:** In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == nums1.length == nums2.length <= 1000`\n* `1 <= nums1[i] <= 109`\n* `1 <= nums2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.11832473427057266, 0.005123987793922424, 0.0022631098981946707, 0.014408516697585583, 0.019503282383084297, 0.011240048334002495, 0.004352596588432789, 0.8247837424278259], "true_rank": 7}
{"id": "LeetCode/27", "prompt": "# Minimum Cost to Make Array Equalindromic\n\nYou are given a **0-indexed** integer array `nums` having length `n`.\n\n\nYou are allowed to perform a special move **any** number of times (**including zero**) on `nums`. In one **special** **move** you perform the following steps **in order**:\n\n\n* Choose an index `i` in the range `[0, n - 1]`, and a **positive** integer `x`.\n* Add `|nums[i] - x|` to the total cost.\n* Change the value of `nums[i]` to `x`.\n\n\nA **palindromic number** is a positive integer that remains the same when its digits are reversed. For example, `121`, `2552` and `65756` are palindromic numbers whereas `24`, `46`, `235` are not palindromic numbers.\n\n\nAn array is considered **equalindromic** if all the elements in the array are equal to an integer `y`, where `y` is a **palindromic number** less than `109`.\n\n\nReturn *an integer denoting the **minimum** possible total cost to make* `nums` ***equalindromic** by performing any number of special moves.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 6\n**Explanation:** We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6.\nIt can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,12,13,14,15]\n**Output:** 11\n**Explanation:** We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11.\nIt can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [22,33,22,33,22]\n**Output:** 22\n**Explanation:** We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22.\nIt can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.04477023705840111, 0.0035333263222128153, 0.001934773288667202, 0.005340322386473417, 0.026593798771500587, 0.03385104611515999, 0.0026954018976539373, 0.8812810778617859], "true_rank": 7}
{"id": "LeetCode/4", "prompt": "# Count Elements With Maximum Frequency\n\nYou are given an array `nums` consisting of **positive** integers.\n\n\nReturn *the **total frequencies** of elements in*`nums`\u00a0*such that those elements all have the **maximum** frequency*.\n\n\nThe **frequency** of an element is the number of occurrences of that element in the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,2,3,1,4]\n**Output:** 4\n**Explanation:** The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 5\n**Explanation:** All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxFrequencyElements(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.23829613626003265, 0.0917174443602562, 0.015844156965613365, 0.02701871283352375, 0.20759722590446472, 0.06903643161058426, 0.015451949089765549, 0.3350379168987274], "true_rank": 4}
{"id": "LeetCode/117", "prompt": "# Make String a Subsequence Using Cyclic Increments\n\nYou are given two **0-indexed** strings `str1` and `str2`.\n\n\nIn an operation, you select a **set** of indices in `str1`, and for each index `i` in the set, increment `str1[i]` to the next character **cyclically**. That is `'a'` becomes `'b'`, `'b'` becomes `'c'`, and so on, and `'z'` becomes `'a'`.\n\n\nReturn `true` *if it is possible to make* `str2` *a subsequence of* `str1` *by performing the operation **at most once***, *and* `false` *otherwise*.\n\n\n**Note:** A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** str1 = \"abc\", str2 = \"ad\"\n**Output:** true\n**Explanation:** Select index 2 in str1.\nIncrement str1[2] to become 'd'. \nHence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** str1 = \"zc\", str2 = \"ad\"\n**Output:** true\n**Explanation:** Select indices 0 and 1 in str1. \nIncrement str1[0] to become 'a'. \nIncrement str1[1] to become 'd'. \nHence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** str1 = \"ab\", str2 = \"d\"\n**Output:** false\n**Explanation:** In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. \nTherefore, false is returned.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= str1.length <= 105`\n* `1 <= str2.length <= 105`\n* `str1` and `str2` consist of only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -> bool:\n```\n", "predicted_rank": 7, "probability": [0.10856235027313232, 0.043150171637535095, 0.014812162145972252, 0.09188976138830185, 0.11819993704557419, 0.0255159642547369, 0.018033286556601524, 0.5798364281654358], "true_rank": 7}
{"id": "LeetCode/227", "prompt": "# Rearrange Array to Maximize Prefix Score\n\nYou are given a **0-indexed** integer array `nums`. You can rearrange the elements of `nums` to **any order** (including the given order).\n\n\nLet `prefix` be the array containing the prefix sums of `nums` after rearranging it. In other words, `prefix[i]` is the sum of the elements from `0` to `i` in `nums` after rearranging it. The **score** of `nums` is the number of positive integers in the array `prefix`.\n\n\nReturn *the maximum score you can achieve*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,-1,0,1,-3,3,-3]\n**Output:** 6\n**Explanation:** We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].\nprefix = [2,5,6,5,2,2,-1], so the score is 6.\nIt can be shown that 6 is the maximum score we can obtain.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-2,-3,0]\n**Output:** 0\n**Explanation:** Any rearrangement of the array will result in a score of 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-106 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxScore(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 0, "probability": [0.4536156952381134, 0.0680278018116951, 0.01242048479616642, 0.11005161702632904, 0.11217187345027924, 0.04738282784819603, 0.021513253450393677, 0.17481642961502075], "true_rank": 5}
{"id": "LeetCode/245", "prompt": "# Find the Array Concatenation Value\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nThe **concatenation** of two numbers is the number formed by concatenating their numerals.\n\n\n* For example, the concatenation of `15`, `49` is `1549`.\n\n\nThe **concatenation value** of `nums` is initially equal to `0`. Perform this operation until `nums` becomes empty:\n\n\n* If there exists more than one number in `nums`, pick the first element and last element in `nums` respectively and add the value of their concatenation to the **concatenation value** of `nums`, then delete the first and last element from `nums`.\n* If one element exists, add its value to the **concatenation value** of `nums`, then delete it.\n\n\nReturn *the concatenation value of the `nums`*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [7,52,2,4]\n**Output:** 596\n**Explanation:** Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to [52,2].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,14,13,8,12]\n**Output:** 673\n**Explanation:** Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to [14,13,8].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to [13].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 104`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0;\u00a0\n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.05775464326143265, 0.12318432331085205, 0.005481477826833725, 0.00807015411555767, 0.05514625087380409, 0.007350916508585215, 0.003863598220050335, 0.7391486167907715], "true_rank": 0}
{"id": "LeetCode/88", "prompt": "# Split Array Into Maximum Number of Subarrays\n\nYou are given an array `nums` consisting of **non-negative** integers.\n\n\nWe define the score of subarray `nums[l..r]` such that `l <= r` as `nums[l] AND nums[l + 1] AND ... AND nums[r]` where **AND** is the bitwise `AND` operation.\n\n\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\n\n\n* **E****ach** element of the array belongs to **exactly** one subarray.\n* The sum of scores of the subarrays is the **minimum** possible.\n\n\nReturn *the **maximum** number of subarrays in a split that satisfies the conditions above.*\n\n\nA **subarray** is a contiguous part of an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,0,2,0,1,2]\n**Output:** 3\n**Explanation:** We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,7,1,3]\n**Output:** 1\n**Explanation:** We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSubarrays(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 0, "probability": [0.521364152431488, 0.02759665809571743, 0.008424813859164715, 0.0926387831568718, 0.16918663680553436, 0.024722153320908546, 0.016479024663567543, 0.13958773016929626], "true_rank": 7}
{"id": "LeetCode/14", "prompt": "# Count the Number of Powerful Integers\n\nYou are given three integers `start`, `finish`, and `limit`. You are also given a **0-indexed** string `s` representing a **positive** integer.\n\n\nA **positive** integer `x` is called **powerful** if it ends with `s` (in other words, `s` is a **suffix** of `x`) and each digit in `x` is at most `limit`.\n\n\nReturn *the **total** number of powerful integers in the range* `[start..finish]`.\n\n\nA string `x` is a suffix of a string `y` if and only if `x` is a substring of `y` that starts from some index (**including** `0`) in `y` and extends to the index `y.length - 1`. For example, `25` is a suffix of `5125` whereas `512` is not.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** start = 1, finish = 6000, limit = 4, s = \"124\"\n**Output:** 5\n**Explanation:** The powerful integers in the range [1..6000] are 124, 1124, 2124, 3124, and, 4124. All these integers have each digit <= 4, and \"124\" as a suffix. Note that 5124 is not a powerful integer because the first digit is 5 which is greater than 4.\nIt can be shown that there are only 5 powerful integers in this range.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** start = 15, finish = 215, limit = 6, s = \"10\"\n**Output:** 2\n**Explanation:** The powerful integers in the range [15..215] are 110 and 210. All these integers have each digit <= 6, and \"10\" as a suffix.\nIt can be shown that there are only 2 powerful integers in this range.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** start = 1000, finish = 2000, limit = 4, s = \"3000\"\n**Output:** 0\n**Explanation:** All integers in the range [1000..2000] are smaller than 3000, hence \"3000\" cannot be a suffix of any integer in this range.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= start <= finish <= 1015`\n* `1 <= limit <= 9`\n* `1 <= s.length <= floor(log10(finish)) + 1`\n* `s` only consists of numeric digits which are at most `limit`.\n* `s` does not have leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfPowerfulInt(self, start: int, finish: int, limit: int, s: str) -> int:\n```\n", "predicted_rank": 7, "probability": [0.06190936267375946, 0.006847354583442211, 0.014970904216170311, 0.025880131870508194, 0.11445846408605576, 0.028320567682385445, 0.013898937962949276, 0.7337142825126648], "true_rank": 3}
{"id": "LeetCode/107", "prompt": "# Count K-Subsequences of a String With Maximum Beauty\n\nYou are given a string `s` and an integer `k`.\n\n\nA **k-subsequence** is a **subsequence** of `s`, having length `k`, and all its characters are **unique**, **i.e**., every character occurs once.\n\n\nLet `f(c)` denote the number of times the character `c` occurs in `s`.\n\n\nThe **beauty** of a **k-subsequence** is the **sum** of `f(c)` for every character `c` in the k-subsequence.\n\n\nFor example, consider `s = \"abbbdd\"` and `k = 2`:\n\n\n* `f('a') = 1`, `f('b') = 3`, `f('d') = 2`\n* Some k-subsequences of `s` are:\n\t+ `\"**ab**bbdd\"` -> `\"ab\"` having a beauty of `f('a') + f('b') = 4`\n\t+ `\"**a**bbb**d**d\"` -> `\"ad\"` having a beauty of `f('a') + f('d') = 3`\n\t+ `\"a**b**bb**d**d\"` -> `\"bd\"` having a beauty of `f('b') + f('d') = 5`\n\n\nReturn *an integer denoting the number of k-subsequences* *whose **beauty** is the **maximum** among all **k-subsequences***. Since the answer may be too large, return it modulo `109 + 7`.\n\n\nA subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\n**Notes**\n\n\n* `f(c)` is the number of times a character `c` occurs in `s`, not a k-subsequence.\n* Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bcca\", k = 2\n**Output:** 4\n**Explanation:** From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are: \n**bc**ca having a beauty of f('b') + f('c') = 3 \n**b**c**c**a having a beauty of f('b') + f('c') = 3 \n**b**cc**a** having a beauty of f('b') + f('a') = 2 \nb**c**c**a**having a beauty of f('c') + f('a') = 3\nbc**ca** having a beauty of f('c') + f('a') = 3 \nThere are 4 k-subsequences that have the maximum beauty, 3. \nHence, the answer is 4. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abbcd\", k = 4\n**Output:** 2\n**Explanation:** From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. \nThe k-subsequences of s are: \n**ab**b**cd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5\n**a**b**bcd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5 \nThere are 2 k-subsequences that have the maximum beauty, 5. \nHence, the answer is 2. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2 * 105`\n* `1 <= k <= s.length`\n* `s` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:\n```\n", "predicted_rank": 0, "probability": [0.4265280067920685, 0.02665446512401104, 0.018399283289909363, 0.06073597073554993, 0.21782122552394867, 0.035425860434770584, 0.01993519812822342, 0.19450010359287262], "true_rank": 7}
{"id": "LeetCode/120", "prompt": "# Max Pair Sum in an Array\n\nYou are given a **0-indexed** integer array `nums`. You have to find the **maximum** sum of a pair of numbers from `nums` such that the maximum **digit** in both numbers are equal.\n\n\nReturn *the maximum sum or* `-1` *if no such pair exists*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [51,71,17,24,42]\n**Output:** 88\n**Explanation:** \nFor i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. \nFor i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.\nIt can be shown that there are no other pairs with equal maximum digits, so the answer is 88.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** -1\n**Explanation:** No pair exists in nums with equal maximum digits.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSum(self, nums: List[int]) -> int:\n```\n", "predicted_rank": 7, "probability": [0.21680808067321777, 0.03853227198123932, 0.027872387319803238, 0.10408158600330353, 0.14923758804798126, 0.10120076686143875, 0.05745132267475128, 0.30481597781181335], "true_rank": 5}
{"id": "LeetCode/89", "prompt": "# Maximum Odd Binary Number\n\nYou are given a **binary** string `s` that contains at least one `'1'`.\n\n\nYou have to **rearrange** the bits in such a way that the resulting binary number is the **maximum odd binary number** that can be created from this combination.\n\n\nReturn *a string representing the maximum odd binary number that can be created from the given combination.*\n\n\n**Note** that the resulting string **can** have leading zeros.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"010\"\n**Output:** \"001\"\n**Explanation:** Because there is just one '1', it must be in the last position. So the answer is \"001\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"0101\"\n**Output:** \"1001\"\n**Explanation:** One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists only of `'0'` and `'1'`.\n* `s` contains at least one `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumOddBinaryNumber(self, s: str) -> str:\n```\n", "predicted_rank": 0, "probability": [0.5017647743225098, 0.013180306181311607, 0.006174431648105383, 0.013590583577752113, 0.3169628083705902, 0.010025786235928535, 0.009302973747253418, 0.12899835407733917], "true_rank": 0}
{"id": "LeetCode/218", "prompt": "# Minimum Operations to Make All Array Elements Equal\n\nYou are given an array `nums` consisting of positive integers.\n\n\nYou are also given an integer array `queries` of size `m`. For the `ith` query, you want to make all of the elements of `nums` equal to `queries[i]`. You can perform the following operation on the array **any** number of times:\n\n\n* **Increase** or **decrease** an element of the array by `1`.\n\n\nReturn *an array* `answer` *of size* `m` *where* `answer[i]` *is the **minimum** number of operations to make all elements of* `nums` *equal to* `queries[i]`.\n\n\n**Note** that after each query the array is reset to its original state.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,6,8], queries = [1,5]\n**Output:** [14,10]\n**Explanation:** For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,9,6,3], queries = [10]\n**Output:** [20]\n**Explanation:** We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `m == queries.length`\n* `1 <= n, m <= 105`\n* `1 <= nums[i], queries[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int], queries: List[int]) -> List[int]:\n```\n", "predicted_rank": 0, "probability": [0.457234650850296, 0.022539522498846054, 0.005662864539772272, 0.011321712285280228, 0.035550519824028015, 0.01143115945160389, 0.020557504147291183, 0.4357021450996399], "true_rank": 7}
