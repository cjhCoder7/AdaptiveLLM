{"id": "HumanEval/0", "prompt": "```python\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.699791517843798}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.570154357890133}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.2475178485422207}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8456810451602985}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6751070040022107}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.23025756687921373}, {"name": "deepseek-coder-33b-instruct", "score": 0.2024252002647442}], "rank": [1, 0, 2, 4, 7, 5, 3, 6]}
{"id": "HumanEval/1", "prompt": "```python\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.6930193873561494}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.6003261768990886}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6179580541688745}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "deepseek-coder-33b-instruct", "score": -1.0267876810216272}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.959573457030353}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.750412734540625}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.0991588604842875}], "rank": [1, 0, 7, 5, 6, 4, 3, 2]}
{"id": "HumanEval/2", "prompt": "```python\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.950878015505797}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.3072254725505474}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.3032591325098997}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8529958815018412}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7742727253723132}, {"name": "Codestral-22B-v0.1", "score": 0.5341253701647153}, {"name": "deepseek-coder-33b-instruct", "score": 0.19720448748566444}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.3685215295682847}], "rank": [1, 0, 3, 7, 4, 5, 6, 2]}
{"id": "HumanEval/3", "prompt": "```python\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8226535838412135}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.43318881707949}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7331529755243595}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "deepseek-coder-33b-instruct", "score": 1.0468944559595998}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7786982407044469}, {"name": "Codestral-22B-v0.1", "score": 0.7777808936077335}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6201519494041507}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "HumanEval/4", "prompt": "```python\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.7867497252292788}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.3955544799911617}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.503900170369076}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7816743201553544}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.675926582808275}, {"name": "Codestral-22B-v0.1", "score": 0.4494591000141037}, {"name": "deepseek-coder-33b-instruct", "score": 0.23296206703403488}], "rank": [1, 0, 3, 2, 4, 7, 5, 6]}
{"id": "HumanEval/5", "prompt": "```python\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9067066523037504}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.6785233722272155}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8702421641824634}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7762188823278002}, {"name": "Codestral-22B-v0.1", "score": 0.4407771659708173}, {"name": "deepseek-coder-33b-instruct", "score": 0.3293685580567809}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.12240612652608451}], "rank": [1, 0, 2, 4, 7, 5, 6, 3]}
{"id": "HumanEval/6", "prompt": "```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.368007028502048}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9496805247166424}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7829842858257692}, {"name": "Codestral-22B-v0.1", "score": 0.3125442829259768}, {"name": "deepseek-coder-33b-instruct", "score": 0.1890920633611648}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.0014751689327923}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.2203426007754365}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.229674433825373}], "rank": [0, 4, 7, 5, 6, 1, 3, 2]}
{"id": "HumanEval/7", "prompt": "```python\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.2387883966425295}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.4535924765284784}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.3851642046613053}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.151235647670533}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.04156381930631}, {"name": "Codestral-22B-v0.1", "score": 0.5500602974528439}, {"name": "deepseek-coder-33b-instruct", "score": 0.5270068479274617}], "rank": [1, 0, 2, 3, 4, 7, 5, 6]}
{"id": "HumanEval/8", "prompt": "```python\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8778245418440758}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.2290563061943809}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.1611326456494435}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7813398925954056}, {"name": "Codestral-22B-v0.1", "score": 0.7304297378778974}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6547523716973016}, {"name": "deepseek-coder-33b-instruct", "score": 0.3184537311185345}], "rank": [1, 0, 3, 2, 4, 5, 7, 6]}
{"id": "HumanEval/9", "prompt": "```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.759995203919865}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.0165030700650544}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7196413391740037}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.68785616292553}, {"name": "Codestral-22B-v0.1", "score": 0.29979675806280603}, {"name": "deepseek-coder-33b-instruct", "score": 0.13391039585058628}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.08943038275132853}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.971811302238674}], "rank": [1, 0, 4, 7, 5, 6, 2, 3]}
{"id": "HumanEval/10", "prompt": "```python\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 1.144867843250775}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5395237878527341}, {"name": "deepseek-coder-33b-instruct", "score": 0.1860184186752809}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.3645131994880426}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.3675274414101066}, {"name": "Codestral-22B-v0.1", "score": -4.515070191566412}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.964800757752456}], "rank": [0, 4, 7, 6, 2, 1, 5, 3]}
{"id": "HumanEval/11", "prompt": "```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.93032380890788}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.432352184083664}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.4556602973378991}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.2168616769888239}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7424596743312248}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6944535164740007}, {"name": "deepseek-coder-33b-instruct", "score": 0.3598504392754913}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}], "rank": [1, 0, 2, 3, 4, 7, 6, 5]}
{"id": "HumanEval/12", "prompt": "```python\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9383219388158714}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7772874366195204}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.6374373069344585}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9629822593866662}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7563260821814772}, {"name": "Codestral-22B-v0.1", "score": 0.7355054924763191}, {"name": "deepseek-coder-33b-instruct", "score": 0.3457589221894173}], "rank": [1, 0, 3, 2, 4, 7, 5, 6]}
{"id": "HumanEval/13", "prompt": "```python\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.4060309655040215}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.7904038337317405}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.5685127772815015}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.0935708663951837}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.062053106074778}, {"name": "Codestral-22B-v0.1", "score": 0.3962247959547396}, {"name": "deepseek-coder-33b-instruct", "score": 0.3950502177740951}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.2434394021921809}], "rank": [0, 1, 3, 7, 4, 5, 6, 2]}
{"id": "HumanEval/14", "prompt": "```python\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.3916155396096803}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.6373698464831223}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.472788824376992}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.3573142589421323}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1765105369956128}, {"name": "Codestral-22B-v0.1", "score": 0.6590164195624943}, {"name": "deepseek-coder-33b-instruct", "score": 0.4208046419237865}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.2690174889193928}], "rank": [1, 3, 4, 2, 7, 5, 6, 0]}
{"id": "HumanEval/15", "prompt": "```python\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.053789160050967}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.186378484026829}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.5824516497664955}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.001024541904103}, {"name": "deepseek-coder-33b-instruct", "score": 0.23200907002553972}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.642697157878812}, {"name": "Codestral-22B-v0.1", "score": -5.180884269655941}], "rank": [1, 0, 3, 2, 4, 6, 7, 5]}
{"id": "HumanEval/16", "prompt": "```python\n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8544201736439185}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.539035498642802}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.8312749726782132}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1648160891247414}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.159496927647142}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7101678479622002}, {"name": "deepseek-coder-33b-instruct", "score": 0.3910110055473419}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}], "rank": [1, 0, 3, 7, 2, 4, 6, 5]}
{"id": "HumanEval/17", "prompt": "```python\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.41779879299682}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.2342201650128146}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6648417955561916}, {"name": "Codestral-22B-v0.1", "score": 0.3162648212168486}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.20931706113596693}, {"name": "deepseek-coder-33b-instruct", "score": 0.0}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.337351997348252}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.913860041596853}], "rank": [1, 0, 4, 5, 7, 6, 3, 2]}
{"id": "HumanEval/18", "prompt": "```python\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.7971607330270096}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.4386185781723793}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.228081387283754}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7974529232728482}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6441631991595553}, {"name": "deepseek-coder-33b-instruct", "score": 0.44032627413935455}, {"name": "Codestral-22B-v0.1", "score": 0.2967544245299365}], "rank": [1, 0, 3, 2, 4, 7, 6, 5]}
{"id": "HumanEval/19", "prompt": "```python\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.8531574068063952}, {"name": "deepseek-coder-33b-instruct", "score": 0.3564719463401733}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.2340798085227922}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.413789429594146}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.599808086764703}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.9852764596293655}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.874436226582473}, {"name": "Codestral-22B-v0.1", "score": -5.9941858410266695}], "rank": [4, 6, 1, 0, 3, 2, 7, 5]}
{"id": "HumanEval/20", "prompt": "```python\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.6622156647584103}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.276811333224534}, {"name": "Codestral-22B-v0.1", "score": 0.8301090390025436}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8094954957406681}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4140055326893233}, {"name": "deepseek-coder-33b-instruct", "score": 0.3812157098663329}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.06829864478471226}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.493358907618016}], "rank": [1, 0, 5, 4, 7, 6, 3, 2]}
{"id": "HumanEval/21", "prompt": "```python\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.796521077256293}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.6218561514976795}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.5890213242474092}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7376683948098011}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6985091237013306}, {"name": "deepseek-coder-33b-instruct", "score": 0.5686133642472262}, {"name": "Codestral-22B-v0.1", "score": 0.47591188987945365}], "rank": [1, 0, 3, 2, 4, 7, 6, 5]}
{"id": "HumanEval/22", "prompt": "```python\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.155607524695679}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.2926147050748202}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.2693878544650037}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.034073767530539}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.9398638995922219}, {"name": "Codestral-22B-v0.1", "score": 0.5346415276068122}, {"name": "deepseek-coder-33b-instruct", "score": 0.42720509474457025}], "rank": [1, 0, 2, 3, 4, 7, 5, 6]}
{"id": "HumanEval/23", "prompt": "```python\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.046322795872335}, {"name": "deepseek-coder-v2-lite-instruct", "score": 2.527706209820275}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.393748287012276}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 2.2101837219787246}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "CodeLlama-7b-Instruct-hf", "score": 2.1620839271843133}, {"name": "deepseek-coder-33b-instruct", "score": 1.369741606736075}, {"name": "Codestral-22B-v0.1", "score": 1.181908498761178}], "rank": [1, 4, 3, 7, 0, 2, 6, 5]}
{"id": "HumanEval/24", "prompt": "```python\n\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.413364598273092}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.770304534226796}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1354262617908262}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.731270260417308}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6780014147519511}, {"name": "Codestral-22B-v0.1", "score": 0.49258080389613657}, {"name": "deepseek-coder-33b-instruct", "score": 0.3804786803254343}], "rank": [0, 3, 7, 2, 1, 4, 5, 6]}
{"id": "HumanEval/25", "prompt": "```python\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.680742582699264}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.7515363985947516}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.178792965436788}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7611452671978718}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7033389698230756}, {"name": "Codestral-22B-v0.1", "score": -0.5171709723009057}, {"name": "deepseek-coder-33b-instruct", "score": -1.1211975473268136}], "rank": [1, 0, 2, 3, 4, 7, 5, 6]}
{"id": "HumanEval/26", "prompt": "```python\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.820502826036619}, {"name": "deepseek-coder-33b-instruct", "score": 0.3523666109656789}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.281169450112257}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.22906169257402}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.172035758022383}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.5465091128222093}, {"name": "Codestral-22B-v0.1", "score": -4.366087410497624}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.215109655531343}], "rank": [7, 6, 2, 3, 1, 0, 5, 4]}
{"id": "HumanEval/27", "prompt": "```python\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.272612412972958}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.3848231912310176}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1556601380765228}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "Codestral-22B-v0.1", "score": 0.7690883337953283}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6666485447856108}, {"name": "deepseek-coder-33b-instruct", "score": 0.5449216459962019}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.10301512064130591}], "rank": [1, 0, 7, 2, 5, 4, 6, 3]}
{"id": "HumanEval/28", "prompt": "```python\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.298471913642334}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.666154141875953}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.3797992096322345}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.2704625455947687}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.247804521702185}, {"name": "Codestral-22B-v0.1", "score": 0.7226795281249627}, {"name": "deepseek-coder-33b-instruct", "score": 0.41871033485818465}], "rank": [1, 0, 3, 4, 7, 2, 5, 6]}
{"id": "HumanEval/29", "prompt": "```python\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.3962345923200266}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.589935545479266}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.403454406208368}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.2009921761877989}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1990100149838074}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "Codestral-22B-v0.1", "score": 0.8163821512556382}, {"name": "deepseek-coder-33b-instruct", "score": 0.6046443789836458}], "rank": [1, 0, 3, 4, 7, 2, 5, 6]}
{"id": "HumanEval/30", "prompt": "```python\n\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.633749244798905}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7158634345416672}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0512217469796479}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7283964241996168}, {"name": "Codestral-22B-v0.1", "score": 0.4951022149105757}, {"name": "deepseek-coder-33b-instruct", "score": 0.3864864362782754}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.029255464926645658}], "rank": [1, 0, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/31", "prompt": "```python\n\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.19722457733622}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.6978674124941415}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.5468319999838327}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.535322930378293}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.836888844472468}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7066914056677032}, {"name": "Codestral-22B-v0.1", "score": 0.4263110583219385}, {"name": "deepseek-coder-33b-instruct", "score": 0.09945428040016768}], "rank": [0, 3, 2, 1, 4, 7, 5, 6]}
{"id": "HumanEval/32", "prompt": "```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": -3.924588335182755}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.313533638228582}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.37106679443754}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.811805084817076}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.66861115164476}, {"name": "Codestral-22B-v0.1", "score": -6.3230498621558}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.369270647222172}, {"name": "deepseek-coder-33b-instruct", "score": -6.45527403219039}], "rank": [3, 1, 0, 4, 2, 5, 7, 6]}
{"id": "HumanEval/33", "prompt": "```python\n\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.2183806066096574}, {"name": "deepseek-coder-33b-instruct", "score": 0.040147068013411946}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.1538687544668491}, {"name": "Codestral-22B-v0.1", "score": -0.8909178042902814}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.4871090525600708}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.7031313941639725}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.835138396249399}], "rank": [4, 7, 6, 1, 5, 0, 2, 3]}
{"id": "HumanEval/34", "prompt": "```python\n\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.0676769044021044}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.3982472483902288}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.1917970691601214}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9655645719901393}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.9373029879618358}, {"name": "Codestral-22B-v0.1", "score": 0.38626225573372075}, {"name": "deepseek-coder-33b-instruct", "score": 0.2565783274004474}], "rank": [1, 0, 3, 2, 4, 7, 5, 6]}
{"id": "HumanEval/35", "prompt": "```python\n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.236322738471921}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.351637346013097}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.3926035303131554}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9853317369800418}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6637105082648151}, {"name": "deepseek-coder-33b-instruct", "score": 0.5203043677205343}, {"name": "Codestral-22B-v0.1", "score": 0.35072425932841433}], "rank": [1, 0, 3, 2, 4, 7, 6, 5]}
{"id": "HumanEval/36", "prompt": "```python\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.202610743918534}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.885802062206099}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.1716014724483212}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.0910076892828897}, {"name": "deepseek-coder-33b-instruct", "score": 0.8356609974740454}, {"name": "Codestral-22B-v0.1", "score": -1.847602997806376}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.106309044164538}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.116507678726804}], "rank": [1, 0, 3, 7, 6, 5, 2, 4]}
{"id": "HumanEval/37", "prompt": "```python\n\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.438334418921912}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362187}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.9367664337510639}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7247397225431937}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4591494809817265}, {"name": "Codestral-22B-v0.1", "score": 0.4063818050535364}, {"name": "deepseek-coder-33b-instruct", "score": 0.22084865644587115}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.876783850260808}], "rank": [1, 0, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/38", "prompt": "```python\n\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.68387416298506}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9061806249438602}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6988691111056591}, {"name": "deepseek-coder-33b-instruct", "score": 0.33479999542885075}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.9601298990822658}, {"name": "Codestral-22B-v0.1", "score": -3.1650210209167104}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.3613605225565455}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.397420344591057}], "rank": [0, 4, 7, 6, 1, 5, 3, 2]}
{"id": "HumanEval/39", "prompt": "```python\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5538018180700028}, {"name": "deepseek-coder-33b-instruct", "score": -0.9750265279264436}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.4893808863117846}, {"name": "deepseek-coder-v2-lite-instruct", "score": -1.9673294016432372}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.649202636961038}, {"name": "Codestral-22B-v0.1", "score": -4.51002814875617}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.116507678726804}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3067021160824295}], "rank": [7, 6, 0, 4, 1, 5, 3, 2]}
{"id": "HumanEval/40", "prompt": "```python\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.6457556956526855}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.299123719972348}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.0514259321616306}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6739696841994567}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4864397822983646}, {"name": "Codestral-22B-v0.1", "score": 0.3709842889263566}, {"name": "deepseek-coder-33b-instruct", "score": 0.21248790265848516}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.194888317739958}], "rank": [1, 0, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/41", "prompt": "```python\n\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.9731078651167722}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.5707628843448513}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.9518071405822361}, {"name": "deepseek-coder-33b-instruct", "score": -1.9255691783242388}, {"name": "Codestral-22B-v0.1", "score": -4.284545061243069}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.398883751740304}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.145445868219158}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.338672051896367}], "rank": [1, 0, 7, 6, 5, 3, 4, 2]}
{"id": "HumanEval/42", "prompt": "```python\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.0477492878935206}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.3813518872327406}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7436006846439458}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0546729196267082}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.9175802227040268}, {"name": "Codestral-22B-v0.1", "score": 0.7340220183462334}, {"name": "deepseek-coder-33b-instruct", "score": 0.43654891278122854}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.09518241318637966}], "rank": [1, 0, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/43", "prompt": "```python\n\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8512489991288685}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.4395448907205712}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.2936510724456367}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.939725949529925}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.9295359586241752}, {"name": "Codestral-22B-v0.1", "score": 0.7719532406696423}, {"name": "deepseek-coder-33b-instruct", "score": -2.1030575836391305}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.7332243233123483}], "rank": [1, 0, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/44", "prompt": "```python\n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.6459342313968057}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.237390619061554}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7610158248346162}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5333879610730774}, {"name": "Codestral-22B-v0.1", "score": 0.5098227799780854}, {"name": "deepseek-coder-33b-instruct", "score": 0.24235580173601434}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.2816947292422411}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.435760038170816}], "rank": [1, 0, 4, 7, 5, 6, 2, 3]}
{"id": "HumanEval/45", "prompt": "```python\n\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.1272569370626706}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.3072831809500216}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.6133448611083052}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.4627592474455433}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.0753126448400572}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0552554026475303}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "deepseek-coder-33b-instruct", "score": 0.20744850687137628}], "rank": [1, 0, 3, 2, 7, 4, 5, 6]}
{"id": "HumanEval/46", "prompt": "```python\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.5003628157871045}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.1090181282556673}, {"name": "deepseek-coder-33b-instruct", "score": 0.7024338661281497}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.46497428084073356}, {"name": "Codestral-22B-v0.1", "score": -0.5635289853856644}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.98547303913278}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.71420309605769}], "rank": [3, 0, 6, 4, 7, 5, 1, 2]}
{"id": "HumanEval/47", "prompt": "```python\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9807222251157657}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.4066344045718084}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.2808095523788143}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0992339859215807}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8251703441801146}, {"name": "Codestral-22B-v0.1", "score": 0.701637549925076}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.5596157879354227}, {"name": "deepseek-coder-33b-instruct", "score": 0.3748629649101032}], "rank": [1, 0, 2, 4, 7, 5, 3, 6]}
{"id": "HumanEval/48", "prompt": "```python\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.1243788736259073}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.4002296278940545}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.217140758574442}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.2104517704236448}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7236261420198673}, {"name": "deepseek-coder-33b-instruct", "score": 0.4426610468679337}, {"name": "Codestral-22B-v0.1", "score": 0.33205247685002526}], "rank": [1, 0, 3, 2, 7, 4, 6, 5]}
{"id": "HumanEval/49", "prompt": "```python\n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9121117445325706}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.8746736792336147}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.4799469293465828}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.2956031271718604}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.043696531071995}, {"name": "Codestral-22B-v0.1", "score": 0.48558782410260903}, {"name": "deepseek-coder-33b-instruct", "score": 0.45930834012898814}], "rank": [1, 0, 2, 3, 4, 7, 5, 6]}
{"id": "HumanEval/50", "prompt": "```python\n\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.05235863098341}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.4413422774608633}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.1171050466271586}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1007433496770638}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-33b-instruct", "score": 0.24820211696686822}, {"name": "Codestral-22B-v0.1", "score": -4.101168006812989}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.151102896040709}], "rank": [1, 0, 4, 7, 2, 6, 5, 3]}
{"id": "HumanEval/51", "prompt": "```python\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.55417985580933}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.1432254463728064}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8272259660726835}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7461975510743875}, {"name": "Codestral-22B-v0.1", "score": 0.5945835129680743}, {"name": "deepseek-coder-33b-instruct", "score": 0.17463372167915647}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.566009834230459}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.781473670456482}], "rank": [1, 3, 4, 7, 5, 6, 0, 2]}
{"id": "HumanEval/52", "prompt": "```python\n\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8714545987639593}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.5807957008096474}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.44981532997673}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8754687373539003}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8754687373538994}, {"name": "Codestral-22B-v0.1", "score": 0.4100016724556452}, {"name": "deepseek-coder-33b-instruct", "score": 0.268197215319657}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.572316361117013}], "rank": [1, 0, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/53", "prompt": "```python\n\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.4477247287235335}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.075963277303511}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.7975148807986754}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.4561074089907313}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.4521591695998817}, {"name": "Codestral-22B-v0.1", "score": 1.0577493029814447}, {"name": "deepseek-coder-33b-instruct", "score": 0.8446709932050194}], "rank": [1, 0, 3, 2, 7, 4, 5, 6]}
{"id": "HumanEval/54", "prompt": "```python\n\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7691330875378677}, {"name": "Codestral-22B-v0.1", "score": -0.8933428396103729}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.636356447835887}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.3433937436684467}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8269007520113107}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.764427803183494}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.13278212785414}, {"name": "deepseek-coder-33b-instruct", "score": -5.761334144494206}], "rank": [7, 5, 1, 3, 0, 2, 4, 6]}
{"id": "HumanEval/55", "prompt": "```python\n\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.1412472624110803}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.8560346129882195}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.3624351631458023}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.3322594892228485}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8650742689568123}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.412475572112775}, {"name": "Codestral-22B-v0.1", "score": -5.622029972783942}, {"name": "deepseek-coder-33b-instruct", "score": -5.742926261773827}], "rank": [1, 3, 4, 2, 7, 0, 5, 6]}
{"id": "HumanEval/56", "prompt": "```python\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.5671291026815863}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.3814300651194023}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.115726899386396}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.7270692453092487}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6614716271088001}, {"name": "Codestral-22B-v0.1", "score": 0.37106677736127214}, {"name": "deepseek-coder-33b-instruct", "score": 0.1384754677225537}], "rank": [0, 3, 2, 4, 1, 7, 5, 6]}
{"id": "HumanEval/57", "prompt": "```python\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.812947746488816}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.128805129021953}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7835773642983614}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.5571529090571525}, {"name": "deepseek-coder-33b-instruct", "score": 0.3259476105307346}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.3501352341593242}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.542073720327622}], "rank": [3, 4, 7, 1, 6, 5, 0, 2]}
{"id": "HumanEval/58", "prompt": "```python\n\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.806288640685623}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.197224577336219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7404661748405044}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.2945600971738296}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8754687373539003}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7292363895348126}, {"name": "Codestral-22B-v0.1", "score": 0.4063158099884774}, {"name": "deepseek-coder-33b-instruct", "score": 0.33559542814767873}], "rank": [1, 0, 3, 2, 7, 4, 5, 6]}
{"id": "HumanEval/59", "prompt": "```python\n\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.198787671648979}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.8729389473332505}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.7699909780808083}, {"name": "deepseek-coder-33b-instruct", "score": 1.2394499198456295}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1811618176794845}, {"name": "Codestral-22B-v0.1", "score": -0.19347378861434716}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.9838559431334604}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.302773990149557}], "rank": [0, 3, 4, 6, 7, 5, 1, 2]}
{"id": "HumanEval/60", "prompt": "```python\n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8924645385692953}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.302198021187394}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.4603487297786515}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9177851281672087}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8803587226480918}, {"name": "Codestral-22B-v0.1", "score": 0.4212266334190806}, {"name": "deepseek-coder-33b-instruct", "score": 0.2577061408433545}], "rank": [1, 0, 3, 2, 4, 7, 5, 6]}
{"id": "HumanEval/61", "prompt": "```python\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9035486887427746}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.9812454208905628}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.61629116598467}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0975558503918048}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.708633581255218}, {"name": "Codestral-22B-v0.1", "score": 0.3866910436570228}, {"name": "deepseek-coder-33b-instruct", "score": 0.10302340187571613}], "rank": [1, 0, 3, 2, 4, 7, 5, 6]}
{"id": "HumanEval/62", "prompt": "```python\n\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.265022102960319}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.669601813203129}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.3527987449483314}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.216217530742373}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.201469674107818}, {"name": "deepseek-coder-33b-instruct", "score": 0.6346725267637305}, {"name": "Codestral-22B-v0.1", "score": 0.6105666932339391}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.9219021025383385}], "rank": [1, 0, 3, 7, 4, 6, 5, 2]}
{"id": "HumanEval/63", "prompt": "```python\n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.3102360007968965}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.8752077426116491}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7301544928167711}, {"name": "deepseek-coder-33b-instruct", "score": 0.6163762682799003}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5724131448587837}, {"name": "Codestral-22B-v0.1", "score": 0.5051986512244735}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.7157728126263045}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.193023515334754}], "rank": [0, 3, 4, 6, 7, 5, 1, 2]}
{"id": "HumanEval/64", "prompt": "```python\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.8086830242594241}, {"name": "Codestral-22B-v0.1", "score": 0.3764561455712512}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.029001608954394}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.5071220803178331}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.279972421293058}, {"name": "deepseek-coder-33b-instruct", "score": -3.4252019660927733}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.407548171903959}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.8532794833200485}], "rank": [4, 5, 1, 0, 7, 6, 2, 3]}
{"id": "HumanEval/65", "prompt": "```python\n\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.198657246445447}, {"name": "Codestral-22B-v0.1", "score": 0.7849741570511952}, {"name": "deepseek-coder-33b-instruct", "score": -0.3983999375916003}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.5594474297712688}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.5928429827345205}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.5704336989074545}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.231023051696667}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.436582537145071}], "rank": [4, 5, 6, 3, 1, 0, 7, 2]}
{"id": "HumanEval/66", "prompt": "```python\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.3390182036872837}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.312112349027174}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.5940161029720814}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0611593357770452}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.0084517340228096}, {"name": "Codestral-22B-v0.1", "score": 0.6052567744491846}, {"name": "deepseek-coder-33b-instruct", "score": 0.5777440087270369}], "rank": [0, 3, 1, 2, 4, 7, 5, 6]}
{"id": "HumanEval/67", "prompt": "```python\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6693980003482816}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.0300284095127323}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.4443083453941794}, {"name": "Codestral-22B-v0.1", "score": -1.8441135856714297}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.9127566137521343}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.16865930225217}, {"name": "deepseek-coder-33b-instruct", "score": -4.92359828846963}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.625777689008229}], "rank": [7, 1, 0, 5, 3, 2, 6, 4]}
{"id": "HumanEval/68", "prompt": "```python\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.0548063621705945}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.9856077633085762}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8557228562808872}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.51739514031072}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.03439327595767416}, {"name": "Codestral-22B-v0.1", "score": -1.6420369708101745}, {"name": "deepseek-coder-33b-instruct", "score": -5.896846127982058}], "rank": [1, 2, 3, 4, 7, 0, 5, 6]}
{"id": "HumanEval/69", "prompt": "```python\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.8986058872587366}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9879937917872121}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5722571333572182}, {"name": "Codestral-22B-v0.1", "score": 0.4838539744090351}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.734595997916959}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.2356936097943603}, {"name": "deepseek-coder-33b-instruct", "score": -4.784375914711671}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.317884672040565}], "rank": [1, 4, 7, 5, 3, 0, 6, 2]}
{"id": "HumanEval/70", "prompt": "```python\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.5808208123438856}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.3494592976926159}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.315932824487938}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7798334161620932}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.648857577021146}, {"name": "Codestral-22B-v0.1", "score": 0.5139750192534374}, {"name": "deepseek-coder-33b-instruct", "score": 0.2050608306574464}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.060491556447685}], "rank": [0, 3, 1, 4, 7, 5, 6, 2]}
{"id": "HumanEval/71", "prompt": "```python\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9821587396931726}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.8356419099014163}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7847667002448642}, {"name": "Codestral-22B-v0.1", "score": 0.41060306200009755}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4011961581885881}, {"name": "deepseek-coder-33b-instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.3677978870413714}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.670996143813897}], "rank": [1, 3, 4, 5, 7, 6, 0, 2]}
{"id": "HumanEval/72", "prompt": "```python\n\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.7260554100586654}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.6195042408891407}, {"name": "deepseek-coder-33b-instruct", "score": 0.9191469350682047}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Codestral-22B-v0.1", "score": 0.5431032704015593}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.448730849640091}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.14398789750837437}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.5618933270817958}], "rank": [1, 0, 6, 4, 5, 7, 2, 3]}
{"id": "HumanEval/73", "prompt": "```python\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.9030022706952}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.4348272905612154}, {"name": "Codestral-22B-v0.1", "score": 1.3421627697927958}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.2946628527086972}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.11744386683327246}, {"name": "deepseek-coder-33b-instruct", "score": -0.5958271046899144}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.838478474296404}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.7884544507134}], "rank": [1, 4, 5, 7, 0, 6, 3, 2]}
{"id": "HumanEval/74", "prompt": "```python\n\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.4187392297131556}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.1266219550129817}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.1830117433662712}, {"name": "Codestral-22B-v0.1", "score": 1.0878840632846378}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.07794687405817591}, {"name": "deepseek-coder-33b-instruct", "score": -0.9348600612341373}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.277257631442851}], "rank": [0, 3, 2, 5, 4, 1, 6, 7]}
{"id": "HumanEval/75", "prompt": "```python\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8310703237654469}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.793553584380513}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.25927804179490765}, {"name": "Codestral-22B-v0.1", "score": -3.372779571207801}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.5261252028125103}, {"name": "deepseek-coder-33b-instruct", "score": -4.689420066685217}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.895089753380064}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3248619217701485}], "rank": [7, 4, 0, 5, 1, 6, 3, 2]}
{"id": "HumanEval/76", "prompt": "```python\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.4595745490451364}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.769219600700147}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5918971524181202}, {"name": "deepseek-coder-33b-instruct", "score": 0.4082202757871549}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.8592474021196193}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.008714049582125}, {"name": "Codestral-22B-v0.1", "score": -4.396675906710344}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.123463854361576}], "rank": [3, 4, 7, 6, 1, 0, 5, 2]}
{"id": "HumanEval/77", "prompt": "```python\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 1.3560343040106804}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6599468523633858}, {"name": "deepseek-coder-33b-instruct", "score": 0.36692573893218405}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.6198001246921327}, {"name": "Codestral-22B-v0.1", "score": -0.6300482779960923}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.467286478624705}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.022484810453404}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.195353975489931}], "rank": [0, 7, 6, 1, 5, 3, 2, 4]}
{"id": "HumanEval/78", "prompt": "```python\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.3814464656217504}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.4576698377029187}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-33b-instruct", "score": 1.0940401056540692}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.0645935176609749}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8181575801334438}, {"name": "Codestral-22B-v0.1", "score": 0.7211510652245989}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4665399130748895}], "rank": [0, 1, 2, 6, 3, 4, 5, 7]}
{"id": "HumanEval/79", "prompt": "```python\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.74806611543142}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.623908556197601}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.349821255296743}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.1498938898161057}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "deepseek-coder-33b-instruct", "score": 1.0862473706971594}, {"name": "Codestral-22B-v0.1", "score": 0.7875443999652827}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7568220692058025}], "rank": [0, 1, 3, 4, 2, 6, 5, 7]}
{"id": "HumanEval/80", "prompt": "```python\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.706903411985704}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0597888475852066}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6335693080075959}, {"name": "deepseek-coder-33b-instruct", "score": 0.5058656746430703}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.9306569586929823}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.3254562831854875}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.788491243115129}], "rank": [0, 4, 7, 6, 5, 1, 3, 2]}
{"id": "HumanEval/81", "prompt": "```python\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.1504614545630547}, {"name": "Codestral-22B-v0.1", "score": 0.8960383816988013}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7498320499338833}, {"name": "deepseek-coder-33b-instruct", "score": 0.6808502637539116}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.3318089446702501}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.14487909766088336}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.417699123568117}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.721975964848165}], "rank": [1, 5, 4, 6, 7, 0, 3, 2]}
{"id": "HumanEval/82", "prompt": "```python\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9697901483963087}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.598016779744991}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9632091126239066}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8055582542144384}, {"name": "Codestral-22B-v0.1", "score": 0.742991764603298}, {"name": "deepseek-coder-33b-instruct", "score": 0.4056993275728722}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.7269163805696315}], "rank": [1, 0, 2, 4, 7, 5, 6, 3]}
{"id": "HumanEval/83", "prompt": "```python\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.7201091129562684}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.315498271535646}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.5891696099649244}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.731938943574383}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.3119835573118515}, {"name": "deepseek-coder-33b-instruct", "score": -5.680431961047951}, {"name": "Codestral-22B-v0.1", "score": -5.787602654075824}], "rank": [2, 1, 7, 0, 3, 4, 6, 5]}
{"id": "HumanEval/84", "prompt": "```python\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.8958314399024743}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9612954025641054}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7871939363174985}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.17752402803611478}, {"name": "deepseek-coder-33b-instruct", "score": -2.198287386976819}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.357324022033509}, {"name": "Codestral-22B-v0.1", "score": -4.537590452505035}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.29497177629694}], "rank": [1, 4, 7, 0, 6, 3, 5, 2]}
{"id": "HumanEval/85", "prompt": "```python\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.4625505251322926}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.580781649055628}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.3628509679299512}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.08955763293027}, {"name": "Codestral-22B-v0.1", "score": 0.752658363664021}, {"name": "deepseek-coder-33b-instruct", "score": 0.5068800262893189}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.15576922218956213}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.701933260257962}], "rank": [1, 3, 7, 4, 5, 6, 0, 2]}
{"id": "HumanEval/86", "prompt": "```python\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.6497422297152746}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.2236578344043747}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.118688245240799}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8762853972604558}, {"name": "deepseek-coder-33b-instruct", "score": 0.20163734609324635}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.9899755773528494}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.487564883412724}, {"name": "Codestral-22B-v0.1", "score": -5.7232582511568575}], "rank": [1, 0, 2, 4, 6, 3, 7, 5]}
{"id": "HumanEval/87", "prompt": "```python\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.332333657085039}, {"name": "Codestral-22B-v0.1", "score": 1.1579436607757527}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8365207701586588}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.46282914787415486}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.478559812684269}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.116532973699695}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.481988012911287}, {"name": "deepseek-coder-33b-instruct", "score": -6.347445250117238}], "rank": [3, 5, 4, 7, 0, 1, 2, 6]}
{"id": "HumanEval/88", "prompt": "```python\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.178482790658375}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.760266084373685}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.842558788927434}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7920787864267025}, {"name": "deepseek-coder-33b-instruct", "score": 0.5898743483326037}, {"name": "Codestral-22B-v0.1", "score": -0.5943484707198055}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.535858580164224}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.381000114621794}], "rank": [3, 0, 4, 7, 6, 5, 2, 1]}
{"id": "HumanEval/89", "prompt": "```python\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.9503405988684754}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6470340825298537}, {"name": "Codestral-22B-v0.1", "score": 0.6382666204892411}, {"name": "deepseek-coder-33b-instruct", "score": 0.3752113733181801}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.967707840097423}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.7586539705250495}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.061201343628847}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.2211534090857965}], "rank": [4, 7, 5, 6, 1, 2, 0, 3]}
{"id": "HumanEval/90", "prompt": "```python\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.9248851094232178}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8525282808242931}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.6216906816878285}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.4380001470238932}, {"name": "deepseek-coder-33b-instruct", "score": -3.996370626166829}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.377416022116198}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.689327493994814}], "rank": [4, 7, 5, 1, 0, 6, 3, 2]}
{"id": "HumanEval/91", "prompt": "```python\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 0.4545387380774244}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4310112005358606}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.6506231423277269}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.350044428303535}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7665809617777883}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.627205612848703}, {"name": "Codestral-22B-v0.1", "score": -5.5727242117997875}, {"name": "deepseek-coder-33b-instruct", "score": -5.7645012096909065}], "rank": [3, 7, 4, 1, 0, 2, 5, 6]}
{"id": "HumanEval/92", "prompt": "```python\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.4056051188754446}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.046560340412957}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.8841331707099847}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7289903583633155}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6613630721074397}, {"name": "Codestral-22B-v0.1", "score": 0.4437581523942544}, {"name": "deepseek-coder-33b-instruct", "score": 0.11009313215792549}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.120903666911226}], "rank": [0, 3, 1, 4, 7, 5, 6, 2]}
{"id": "HumanEval/93", "prompt": "```python\n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.973950458995589}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.568066833897188}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.871034330350792}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.684794344543703}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.867780574010849}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.575767268433569}, {"name": "Codestral-22B-v0.1", "score": -5.8225132092521985}, {"name": "deepseek-coder-33b-instruct", "score": -5.948797100788579}], "rank": [7, 1, 0, 3, 2, 4, 5, 6]}
{"id": "HumanEval/94", "prompt": "```python\n\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.4754410359993555}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.9246765252504288}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.7237324563584719}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7192325510356197}, {"name": "deepseek-coder-33b-instruct", "score": 0.3842920992428933}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.5354412613991935}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.7792492540381963}, {"name": "Codestral-22B-v0.1", "score": -4.476383096291377}], "rank": [1, 7, 3, 4, 6, 2, 0, 5]}
{"id": "HumanEval/95", "prompt": "```python\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-33b-instruct", "score": 1.0624506487289729}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8697303847141198}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5089049612859204}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.3600785083196163}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.0093212237533438}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.1636227445191185}, {"name": "Codestral-22B-v0.1", "score": -5.336864776160276}], "rank": [2, 6, 4, 7, 3, 1, 0, 5]}
{"id": "HumanEval/96", "prompt": "```python\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.259605972270336}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.7196029289262476}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.8025076917794172}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.6050222370794067}, {"name": "Codestral-22B-v0.1", "score": 0.9040332219670653}, {"name": "deepseek-coder-33b-instruct", "score": 0.8581466107094471}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7061093518872168}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.486173578840466}], "rank": [1, 0, 3, 4, 5, 6, 7, 2]}
{"id": "HumanEval/97", "prompt": "```python\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8886361485510186}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.7104519580230257}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.2997194695574579}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7781377250153518}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7267093532958233}, {"name": "Codestral-22B-v0.1", "score": 0.45929836686613257}, {"name": "deepseek-coder-33b-instruct", "score": 0.3450789424595069}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.11655068866708262}], "rank": [1, 3, 0, 4, 7, 5, 6, 2]}
{"id": "HumanEval/98", "prompt": "```python\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.350459925291789}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7693613713470997}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6576770011116366}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6430656539305728}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.6250461984364128}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509363}, {"name": "deepseek-coder-33b-instruct", "score": 0.12972612782018267}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.7923178395315458}], "rank": [0, 3, 7, 4, 1, 5, 6, 2]}
{"id": "HumanEval/99", "prompt": "```python\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8737838169889809}, {"name": "Codestral-22B-v0.1", "score": 0.4292747893091553}, {"name": "deepseek-coder-33b-instruct", "score": 0.4063086340966038}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.1028033448010555}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.6573413658545517}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.015917766249411}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.477154979765459}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.590389787301111}], "rank": [7, 5, 6, 1, 0, 2, 3, 4]}
{"id": "HumanEval/100", "prompt": "```python\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4962670349334406}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.2058550548498732}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.902112571332177}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.768522081766133}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.157882583026088}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.5031374604229395}, {"name": "Codestral-22B-v0.1", "score": -5.767007633711242}, {"name": "deepseek-coder-33b-instruct", "score": -6.005041955521669}], "rank": [7, 1, 4, 0, 3, 2, 5, 6]}
{"id": "HumanEval/101", "prompt": "```python\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.364340845253455}, {"name": "Codestral-22B-v0.1", "score": 0.4609035199734892}, {"name": "deepseek-coder-33b-instruct", "score": 0.3121467128537718}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -0.4845872976547634}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.7770786275126333}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.7215402363534844}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.956864946270013}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.8106221601709}], "rank": [0, 5, 6, 7, 1, 3, 4, 2]}
{"id": "HumanEval/102", "prompt": "```python\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.238258189675485}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.5569411272543108}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.3537600456021908}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.1212967623391785}, {"name": "deepseek-coder-33b-instruct", "score": -0.7113558232380095}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.247735353548754}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.290748797048084}, {"name": "Codestral-22B-v0.1", "score": -5.767007633711242}], "rank": [3, 0, 4, 7, 6, 1, 2, 5]}
{"id": "HumanEval/103", "prompt": "```python\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.8982933293970712}, {"name": "Codestral-22B-v0.1", "score": 1.1058467825690421}, {"name": "deepseek-coder-33b-instruct", "score": 0.8964502340384106}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7431452202234956}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.8008207676835579}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.422528772709472}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.4928748194371773}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.697844881989448}], "rank": [3, 5, 6, 7, 0, 2, 1, 4]}
{"id": "HumanEval/104", "prompt": "```python\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.4821035645608833}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8830159429892825}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.852574917488047}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.6397527638507032}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.585252787444194}, {"name": "deepseek-coder-33b-instruct", "score": 0.39499380824086927}, {"name": "Codestral-22B-v0.1", "score": 0.3652147054868671}], "rank": [0, 2, 4, 7, 1, 3, 6, 5]}
{"id": "HumanEval/105", "prompt": "```python\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.1855190074973603}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7222532406342532}, {"name": "deepseek-coder-33b-instruct", "score": 0.29329438934952723}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.2631368932913878}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.24478933063407737}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.2073794309756236}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.4369491082730832}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.52206873310513}], "rank": [5, 4, 6, 7, 1, 0, 3, 2]}
{"id": "HumanEval/106", "prompt": "```python\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.484733144105254}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.4243150311218349}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.324511175530465}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.6424289502183824}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Codestral-22B-v0.1", "score": 0.44667088431868596}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4458317144020931}, {"name": "deepseek-coder-33b-instruct", "score": 0.3057163526912188}], "rank": [0, 2, 3, 1, 4, 5, 7, 6]}
{"id": "HumanEval/107", "prompt": "```python\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9786588330127772}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.0783633744594905}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.3777831898842146}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8680070473517656}, {"name": "deepseek-coder-33b-instruct", "score": 0.8421570755585694}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5910281588262896}, {"name": "Codestral-22B-v0.1", "score": -1.7204784936229967}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.8327315089898413}], "rank": [1, 3, 0, 4, 6, 7, 5, 2]}
{"id": "HumanEval/108", "prompt": "```python\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.48743869106783677}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.5346474892827544}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.6289581699112383}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8146306594194965}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.151102896040709}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.508703337500385}, {"name": "Codestral-22B-v0.1", "score": -5.61996598856309}, {"name": "deepseek-coder-33b-instruct", "score": -5.884302409503527}], "rank": [7, 4, 1, 0, 3, 2, 5, 6]}
{"id": "HumanEval/109", "prompt": "```python\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5749978207262059}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.49007298735080074}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.31715152648841993}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "deepseek-coder-33b-instruct", "score": -1.2313339908742638}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.3468628147850916}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.0553500039991315}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.255430742145564}], "rank": [4, 3, 7, 5, 6, 1, 0, 2]}
{"id": "HumanEval/110", "prompt": "```python\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.6235240330046308}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.07185689853662902}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.3548000003720224}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.4438116810081976}, {"name": "deepseek-coder-33b-instruct", "score": -3.631696127275845}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.184489912073446}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.421843876831486}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.985406232524018}], "rank": [5, 1, 3, 7, 6, 0, 2, 4]}
{"id": "HumanEval/111", "prompt": "```python\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.4055301004540013}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9490613303976305}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5410171116444653}, {"name": "deepseek-coder-33b-instruct", "score": 0.38172808059077923}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.28918335684612284}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.33683212928051}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.5488729591541177}], "rank": [1, 4, 7, 6, 3, 5, 0, 2]}
{"id": "HumanEval/112", "prompt": "```python\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.8180839905123607}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.2104455570575103}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "Codestral-22B-v0.1", "score": 1.078244578462666}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.796287491450685}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.5297979294033559}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5239556075365384}, {"name": "deepseek-coder-33b-instruct", "score": 0.39912035647483}], "rank": [1, 3, 2, 5, 4, 0, 7, 6]}
{"id": "HumanEval/113", "prompt": "```python\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.983163028819881}, {"name": "Codestral-22B-v0.1", "score": 0.8192446183958033}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7765621020876754}, {"name": "deepseek-coder-33b-instruct", "score": 0.479310578619744}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4714674011587183}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.569645366190238}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.842029633607611}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.149144277933557}], "rank": [3, 5, 4, 6, 7, 1, 0, 2]}
{"id": "HumanEval/114", "prompt": "```python\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.9961128675339541}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.1736825672043687}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0078898654972894}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.0047869497168849}, {"name": "Codestral-22B-v0.1", "score": 0.6043385478211976}, {"name": "deepseek-coder-33b-instruct", "score": 0.47913206592177193}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.2485742345413788}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.249274170368706}], "rank": [3, 1, 4, 7, 5, 6, 0, 2]}
{"id": "HumanEval/115", "prompt": "```python\n\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8317333438460919}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.7069099529426421}, {"name": "Codestral-22B-v0.1", "score": -1.7280184351121797}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.9694073822492184}, {"name": "deepseek-coder-33b-instruct", "score": -3.0507766204809217}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.27245450576943}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.793111164600991}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.877735781779639}], "rank": [7, 0, 5, 3, 6, 1, 4, 2]}
{"id": "HumanEval/116", "prompt": "```python\n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.9722106558372703}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.766170322539428}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.5520431585906884}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.5291126264443662}, {"name": "Codestral-22B-v0.1", "score": 1.2301119434584713}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-33b-instruct", "score": 0.9231873109332156}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.92551703380699}], "rank": [0, 1, 4, 3, 5, 2, 6, 7]}
{"id": "HumanEval/117", "prompt": "```python\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.49534152708058}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.047816429845052}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.868301364992556}, {"name": "Codestral-22B-v0.1", "score": 0.9224871156619336}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7685868881615212}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6310987814258047}, {"name": "deepseek-coder-33b-instruct", "score": 0.6054151866911095}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.268929749653444}], "rank": [0, 3, 1, 5, 4, 7, 6, 2]}
{"id": "HumanEval/118", "prompt": "```python\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.4469536270234489}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.2159872443351532}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.0878958531646261}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.007640510462383}, {"name": "deepseek-coder-33b-instruct", "score": -0.17993168353498667}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.7889852143345775}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.2295745114822045}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.578219251680855}], "rank": [5, 4, 1, 7, 6, 0, 3, 2]}
{"id": "HumanEval/119", "prompt": "```python\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.951072332889396}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7221347174331978}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.5015856278729878}, {"name": "deepseek-coder-33b-instruct", "score": -3.627544323046248}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.020339148911605}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.321639484658786}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.460436216024472}, {"name": "Codestral-22B-v0.1", "score": -6.071638015462737}], "rank": [4, 7, 1, 6, 0, 3, 2, 5]}
{"id": "HumanEval/120", "prompt": "```python\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.37544140908646195}, {"name": "deepseek-coder-33b-instruct", "score": -2.2560666266836944}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.9769571182276566}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.365362928652939}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9979804939390173}, {"name": "Codestral-22B-v0.1", "score": -4.901712886872069}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.156915079542944}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.435432330503912}], "rank": [7, 6, 1, 3, 0, 5, 2, 4]}
{"id": "HumanEval/121", "prompt": "```python\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.279656471936886}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7513552603209472}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.2305301704816527}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7045152453881185}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5948955203708959}, {"name": "deepseek-coder-33b-instruct", "score": 0.4050883893242778}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.8209349948391131}], "rank": [0, 3, 2, 7, 4, 6, 5, 1]}
{"id": "HumanEval/122", "prompt": "```python\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.0255465362644167}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.4187274391929687}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.5626501653398566}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.2677750454006587}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.0960612668765037}, {"name": "deepseek-coder-33b-instruct", "score": 0.9158651093948631}, {"name": "Codestral-22B-v0.1", "score": 0.560905583936}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.008122745882449}], "rank": [1, 3, 0, 4, 7, 6, 5, 2]}
{"id": "HumanEval/123", "prompt": "```python\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.3884929201199805}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.5314960746340764}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.1061594943034931}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8503614778491757}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.8294021080843246}, {"name": "Codestral-22B-v0.1", "score": 0.8205921271280658}, {"name": "deepseek-coder-33b-instruct", "score": 0.5465437063680705}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.441690173203416}], "rank": [3, 0, 4, 7, 1, 5, 6, 2]}
{"id": "HumanEval/124", "prompt": "```python\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.928911127072144}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.6686657466344332}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.4095146569909653}, {"name": "Codestral-22B-v0.1", "score": 0.7298742594578371}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7148319979647191}, {"name": "deepseek-coder-33b-instruct", "score": 0.39158425862347457}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.2837848133116898}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.0130579006463543}], "rank": [1, 3, 0, 5, 4, 6, 7, 2]}
{"id": "HumanEval/125", "prompt": "```python\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.19722457733622}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6759457151376802}, {"name": "deepseek-coder-33b-instruct", "score": 0.6489989419040674}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.5398646977325323}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.164616615207432}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.0991588604842875}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.498969880026714}, {"name": "Codestral-22B-v0.1", "score": -5.687856324105941}], "rank": [0, 4, 6, 1, 3, 2, 7, 5]}
{"id": "HumanEval/126", "prompt": "```python\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.3659230202151225}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.027848570933736}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.0578188808726505}, {"name": "Codestral-22B-v0.1", "score": -4.162697361912154}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.294506037144386}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.277114158896934}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.823377201541851}, {"name": "deepseek-coder-33b-instruct", "score": -6.268027530975286}], "rank": [7, 0, 1, 5, 3, 2, 4, 6]}
{"id": "HumanEval/127", "prompt": "```python\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Codestral-22B-v0.1", "score": -0.5287153012244499}, {"name": "deepseek-coder-33b-instruct", "score": -3.1862072409234945}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7851891342513446}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.011759737215682}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.1596924833336955}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.71492104994721}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.693489685170769}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.804785510272567}], "rank": [5, 6, 1, 0, 2, 3, 4, 7]}
{"id": "HumanEval/128", "prompt": "```python\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.9002862713568311}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.3900294153289696}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.759299864337458}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.62396924383697}, {"name": "deepseek-coder-33b-instruct", "score": -1.8200255669718475}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.2334885372360462}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.795604634296084}, {"name": "Codestral-22B-v0.1", "score": -5.2062020776402305}], "rank": [1, 3, 4, 7, 6, 0, 2, 5]}
{"id": "HumanEval/129", "prompt": "```python\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.24568690748883}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.482347168604923}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.563013968454699}, {"name": "Codestral-22B-v0.1", "score": -4.9575939573970835}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.4802388433206515}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.697361906853278}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.843266117440055}, {"name": "deepseek-coder-33b-instruct", "score": -6.393162568646902}], "rank": [7, 1, 0, 5, 3, 4, 2, 6]}
{"id": "HumanEval/130", "prompt": "```python\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.027349693397822}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.18406338188997}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.467286478624705}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.040371009265997}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.535079759020237}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.825929308414086}, {"name": "deepseek-coder-33b-instruct", "score": -5.8464272142972575}, {"name": "Codestral-22B-v0.1", "score": -5.877763792591814}], "rank": [1, 0, 3, 7, 2, 4, 6, 5]}
{"id": "HumanEval/131", "prompt": "```python\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9932600844086017}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.493191701322107}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.066940944830458}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8510176414897357}, {"name": "deepseek-coder-33b-instruct", "score": 0.34717284886508537}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.8581157713592353}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.79684783770607}], "rank": [1, 0, 4, 7, 6, 5, 3, 2]}
{"id": "HumanEval/132", "prompt": "```python\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.9212242213789295}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8797477168763574}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.34432476748987}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.018047753811709}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.719340813572053}, {"name": "Codestral-22B-v0.1", "score": -5.810062567373411}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.885703951428816}, {"name": "deepseek-coder-33b-instruct", "score": -6.165476676030796}], "rank": [1, 0, 3, 2, 4, 5, 7, 6]}
{"id": "HumanEval/133", "prompt": "```python\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.2505584932943559}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.53758307293554}, {"name": "Codestral-22B-v0.1", "score": 0.4802926417836959}, {"name": "deepseek-coder-33b-instruct", "score": 0.02202291208743734}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.2793255219209922}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.522356737649215}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.129386354989992}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.44048420424545}], "rank": [1, 7, 5, 6, 2, 0, 4, 3]}
{"id": "HumanEval/134", "prompt": "```python\n\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.634528859363855}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.654288009344317}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.956460854858714}, {"name": "deepseek-coder-33b-instruct", "score": -4.520462125883733}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.972559525244026}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.684721971917458}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.781632009853444}, {"name": "Codestral-22B-v0.1", "score": -5.83758466394533}], "rank": [1, 0, 3, 6, 2, 7, 4, 5]}
{"id": "HumanEval/135", "prompt": "```python\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.3621557476811326}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.0296194171811583}, {"name": "Codestral-22B-v0.1", "score": 0.9236051916969199}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.7595034826911258}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.8329780222525653}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.785643122546244}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.117945907077695}, {"name": "deepseek-coder-33b-instruct", "score": -5.199535166250333}], "rank": [4, 7, 5, 1, 0, 3, 2, 6]}
{"id": "HumanEval/136", "prompt": "```python\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.7499361192508713}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7277578968918945}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.118685664255485}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.09861228866811}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8629194798397508}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6879937374375276}, {"name": "Codestral-22B-v0.1", "score": 0.5409251046282915}, {"name": "deepseek-coder-33b-instruct", "score": 0.2988606506378373}], "rank": [1, 3, 0, 2, 4, 7, 5, 6]}
{"id": "HumanEval/137", "prompt": "```python\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.9808292530117262}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.2290637512556906}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9618792677795756}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.757612979117135}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.013830184992774}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.338672051896367}, {"name": "deepseek-coder-33b-instruct", "score": -5.376277908017248}, {"name": "Codestral-22B-v0.1", "score": -5.846409872905957}], "rank": [7, 1, 0, 4, 3, 2, 6, 5]}
{"id": "HumanEval/138", "prompt": "```python\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.8218066328028537}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.271239244662942}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8731830220730439}, {"name": "Codestral-22B-v0.1", "score": -3.1149267007526618}, {"name": "deepseek-coder-33b-instruct", "score": -3.151593608232785}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8262908099368964}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.585620326743376}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.989289076076657}], "rank": [1, 4, 7, 5, 6, 0, 3, 2]}
{"id": "HumanEval/139", "prompt": "```python\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.826773122421053}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.734158282493774}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.5826734284758799}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.7389608235678131}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4128624131926584}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.446690147999604}, {"name": "deepseek-coder-33b-instruct", "score": -5.683008175439724}], "rank": [7, 4, 1, 5, 3, 0, 2, 6]}
{"id": "HumanEval/140", "prompt": "```python\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.16004922346655448}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.8021778955921808}, {"name": "deepseek-coder-33b-instruct", "score": -2.1837394044349554}, {"name": "Codestral-22B-v0.1", "score": -2.9654429844817316}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.860477047544915}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.8968687576564687}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.245928735656316}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.638283492423505}], "rank": [1, 2, 6, 5, 0, 3, 4, 7]}
{"id": "HumanEval/141", "prompt": "```python\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5816866990537459}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.3119356897072665}, {"name": "Codestral-22B-v0.1", "score": 0.29872106692658384}, {"name": "deepseek-coder-33b-instruct", "score": 0.0880726029762906}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.25721686107310315}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.9200245745336084}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.076994923886987}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.106689114763169}], "rank": [4, 7, 5, 6, 1, 3, 0, 2]}
{"id": "HumanEval/142", "prompt": "```python\n\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.7783876028042185}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4665047124597903}, {"name": "Codestral-22B-v0.1", "score": 0.4509085156703021}, {"name": "deepseek-coder-33b-instruct", "score": 0.009069147249863185}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.4218289419070294}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5078736682655642}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.302333865764633}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.063683048518329}], "rank": [4, 7, 5, 6, 1, 0, 3, 2]}
{"id": "HumanEval/143", "prompt": "```python\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.7412107375531725}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.7249306446564816}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.4228542100168484}, {"name": "deepseek-coder-33b-instruct", "score": 0.6931471805599454}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.5101636494506852}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.383062419542422}, {"name": "Codestral-22B-v0.1", "score": -5.665734407018671}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.8975384090758185}], "rank": [0, 1, 4, 6, 2, 3, 5, 7]}
{"id": "HumanEval/144", "prompt": "```python\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.9755717745768453}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.3891474301022964}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.968356163494839}, {"name": "deepseek-coder-33b-instruct", "score": 0.5699971233386201}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5667637812007094}, {"name": "Codestral-22B-v0.1", "score": 0.47907402055303283}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.0717502062175543}], "rank": [1, 7, 2, 0, 6, 4, 5, 3]}
{"id": "HumanEval/145", "prompt": "```python\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.727068206937972}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8918202981106265}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.139700263942898}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.287357526311695}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.308366702401038}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.44914825625062}, {"name": "Codestral-22B-v0.1", "score": -5.560373891360845}, {"name": "deepseek-coder-33b-instruct", "score": -6.055340348695455}], "rank": [1, 0, 3, 7, 2, 4, 5, 6]}
{"id": "HumanEval/146", "prompt": "```python\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.9318070163732513}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6660874473082607}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5888392965782625}, {"name": "deepseek-coder-33b-instruct", "score": 0.5534538543118908}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509372}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.6264918916318551}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.886664170961256}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.615635235835855}], "rank": [3, 4, 7, 6, 5, 1, 0, 2]}
{"id": "HumanEval/147", "prompt": "```python\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.7537202379353984}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.6043488429266297}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6819852178945753}, {"name": "deepseek-coder-33b-instruct", "score": 0.6667139234917903}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.7820694788665161}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.4496054166912695}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.209682854805797}], "rank": [0, 3, 4, 6, 7, 5, 1, 2]}
{"id": "HumanEval/148", "prompt": "```python\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.586955095090828}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.6670776918805155}, {"name": "deepseek-coder-33b-instruct", "score": 0.9281077083789402}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8782163727145491}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.762140052046897}, {"name": "Codestral-22B-v0.1", "score": -0.24071778688106704}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.0549488262769695}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.656061738444789}], "rank": [0, 3, 6, 4, 7, 5, 1, 2]}
{"id": "HumanEval/149", "prompt": "```python\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.5271467603747304}, {"name": "Codestral-22B-v0.1", "score": 1.0247315408596958}, {"name": "deepseek-coder-33b-instruct", "score": 0.6892636805335473}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6696468467874874}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.572342342474645}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.17498260548403533}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.8925550316929762}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.064518974523384}], "rank": [0, 5, 6, 4, 7, 2, 1, 3]}
{"id": "HumanEval/150", "prompt": "```python\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.726469267395343}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.2615533449334304}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.4943255861027112}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.3563303464977379}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.44821627506082784}, {"name": "Codestral-22B-v0.1", "score": 0.303391477149316}, {"name": "deepseek-coder-33b-instruct", "score": 0.18169242811639386}], "rank": [1, 0, 3, 2, 4, 7, 5, 6]}
{"id": "HumanEval/151", "prompt": "```python\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.0835154392858684}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.8557129859794288}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.090096846690578}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.8946905716158273}, {"name": "Codestral-22B-v0.1", "score": 0.540118677873874}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.042255688223717947}, {"name": "deepseek-coder-33b-instruct", "score": -2.0259665936995193}], "rank": [3, 1, 2, 4, 7, 5, 0, 6]}
{"id": "HumanEval/152", "prompt": "```python\n\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.5587037693363857}, {"name": "Yi-Coder-1.5B-Chat", "score": 3.1797302766751976}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.1615442783473915}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.0986122886681091}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6560824150617321}, {"name": "Codestral-22B-v0.1", "score": 0.6462846014047168}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4811204693520743}, {"name": "deepseek-coder-33b-instruct", "score": 0.2786775093586993}], "rank": [1, 0, 3, 2, 4, 5, 7, 6]}
{"id": "HumanEval/153", "prompt": "```python\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.7856392596855253}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.302378175036278}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.486250759717107}, {"name": "deepseek-coder-33b-instruct", "score": 1.436292400783441}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.1409529911980663}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.5830185628577071}, {"name": "Codestral-22B-v0.1", "score": -0.596005298298663}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.510925615946864}], "rank": [1, 3, 7, 6, 4, 0, 5, 2]}
{"id": "HumanEval/154", "prompt": "```python\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.674362871238439}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.357461979790382}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.962652442171132}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7305468668051125}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6863390893252888}, {"name": "Codestral-22B-v0.1", "score": 0.5681621593931334}, {"name": "deepseek-coder-33b-instruct", "score": 0.2732482943504877}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.405938454720194}], "rank": [1, 2, 0, 4, 7, 5, 6, 3]}
{"id": "HumanEval/155", "prompt": "```python\n\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.0143908939402584}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.4831320264296317}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.1152430928524568}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4724934046738243}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.3228140014667247}, {"name": "deepseek-coder-33b-instruct", "score": -2.151156376266222}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.386416982975174}, {"name": "Codestral-22B-v0.1", "score": -5.627513194198474}], "rank": [1, 0, 4, 7, 2, 6, 3, 5]}
{"id": "HumanEval/156", "prompt": "```python\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.398186073124455}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.600866527514032}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.5617291389110637}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.832578069595117}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.6742612276335747}, {"name": "Codestral-22B-v0.1", "score": 0.54461975828705}, {"name": "deepseek-coder-33b-instruct", "score": 0.2559177979345231}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.20406340490376795}], "rank": [0, 1, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/157", "prompt": "```python\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.955469267899569}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.0432216380430677}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.7343202001080291}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 1.320514760083645}, {"name": "deepseek-coder-33b-instruct", "score": 1.0807656611546603}, {"name": "Codestral-22B-v0.1", "score": 1.0533207657426313}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.5184538480093472}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.600508669192375}], "rank": [0, 1, 4, 7, 6, 5, 3, 2]}
{"id": "HumanEval/158", "prompt": "```python\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.7358401351757742}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.552188230843548}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8122005320979717}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.453105906914141}, {"name": "Codestral-22B-v0.1", "score": 0.2892238196366588}, {"name": "deepseek-coder-33b-instruct", "score": 0.25865968690887353}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.9513947140519825}], "rank": [0, 1, 3, 4, 7, 5, 6, 2]}
{"id": "HumanEval/159", "prompt": "```python\n\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.7685797648417445}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.5636242344989055}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5559370590779604}, {"name": "Codestral-22B-v0.1", "score": 0.3811961501302319}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.531946568542768}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.0930262447415027}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.43195900342209}, {"name": "deepseek-coder-33b-instruct", "score": -5.168121457747828}], "rank": [1, 0, 7, 5, 2, 4, 3, 6]}
{"id": "HumanEval/160", "prompt": "```python\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.610616874536672}, {"name": "deepseek-coder-33b-instruct", "score": 1.0218310066552405}, {"name": "Codestral-22B-v0.1", "score": -1.7433927362456867}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6571823673706816}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.0717580635493045}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.373540820146992}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.782963272530642}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.155367518377918}], "rank": [3, 6, 5, 1, 0, 2, 4, 7]}
{"id": "HumanEval/161", "prompt": "```python\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.0101914541343517}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.912989979861238}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8934465519245469}, {"name": "deepseek-coder-33b-instruct", "score": 0.8015642447003213}, {"name": "Codestral-22B-v0.1", "score": 0.2824050153509381}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.07786739014188093}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.4625117439731352}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.967301256415481}], "rank": [1, 7, 4, 6, 5, 2, 0, 3]}
{"id": "HumanEval/162", "prompt": "```python\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 3.04171237073187}, {"name": "Yi-Coder-1.5B-Chat", "score": 2.1972245773362196}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.724251455032431}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.3055519076025774}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.886160489796219}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7838631715792159}, {"name": "Codestral-22B-v0.1", "score": 0.37648801291811207}, {"name": "deepseek-coder-33b-instruct", "score": 0.12490735576754997}], "rank": [1, 0, 2, 3, 4, 7, 5, 6]}
{"id": "HumanEval/163", "prompt": "```python\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.483207383711731}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7839168694486878}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.51410697503109}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.62473749148062}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.998400756427913}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.391315785381789}, {"name": "Codestral-22B-v0.1", "score": -5.612361389177871}, {"name": "deepseek-coder-33b-instruct", "score": -5.814608029745085}], "rank": [1, 0, 3, 2, 4, 7, 5, 6]}
{"id": "code_contests/0", "prompt": "# Another Sorting Problem\n\nAndi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title — a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 ≤ n ⋅ m ≤ 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters — the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers — the indices of the strings after they are sorted asc-desc-endingly.\n\nExample\n\nInput\n\n\n5 2\nAA\nAB\nBB\nBA\nAZ\n\n\nOutput\n\n\n5 2 1 3 4\n\nNote\n\nThe following illustrates the first example.\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-33b-instruct", "score": -1.5729177855336793}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.472418897399634}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.2788037334480884}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.615349719349442}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.081578262906821}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.246687173311178}, {"name": "Codestral-22B-v0.1", "score": -5.977948617054461}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.298602058066682}], "rank": [6, 1, 0, 4, 2, 3, 5, 7]}
{"id": "code_contests/1", "prompt": "# Building an Amusement Park\n\nMr. Chanek lives in a city represented as a plane. He wants to build an amusement park in the shape of a circle of radius r. The circle must touch the origin (point (0, 0)).\n\nThere are n bird habitats that can be a photo spot for the tourists in the park. The i-th bird habitat is at point p_i = (x_i, y_i). \n\nFind the minimum radius r of a park with at least k bird habitats inside. \n\nA point is considered to be inside the park if and only if the distance between p_i and the center of the park is less than or equal to the radius of the park. Note that the center and the radius of the park do not need to be integers.\n\nIn this problem, it is guaranteed that the given input always has a solution with r ≤ 2 ⋅ 10^5.\n\nInput\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the number of bird habitats in the city and the number of bird habitats required to be inside the park.\n\nThe i-th of the next n lines contains two integers x_i and y_i (0 ≤ |x_i|, |y_i| ≤ 10^5) — the position of the i-th bird habitat.\n\nOutput\n\nOutput a single real number r denoting the minimum radius of a park with at least k bird habitats inside. It is guaranteed that the given input always has a solution with r ≤ 2 ⋅ 10^5.\n\nYour answer is considered correct if its absolute or relative error does not exceed 10^{-4}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{max{(1, |b|)}} ≤ 10^{-4}.\n\nExamples\n\nInput\n\n\n8 4\n-3 1\n-4 4\n1 5\n2 2\n2 -2\n-2 -4\n-1 -1\n-6 0\n\n\nOutput\n\n\n3.1622776589\n\n\nInput\n\n\n1 1\n0 0\n\n\nOutput\n\n\n0.0000000000\n\nNote\n\nIn the first example, Mr. Chanek can put the center of the park at (-3, -1) with radius √{10} ≈ 3.162. It can be proven this is the minimum r.\n\nThe following illustrates the first example. The blue points represent bird habitats and the red circle represents the amusement park.\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.853970073979529}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.193405275731399}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.229224490060751}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.268435312066116}, {"name": "Codestral-22B-v0.1", "score": -6.136149135961872}, {"name": "deepseek-coder-33b-instruct", "score": -6.275168718190539}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.291835770675751}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.547261147559568}], "rank": [0, 1, 2, 3, 5, 6, 4, 7]}
{"id": "code_contests/2", "prompt": "# Cyclic Sum\n\nDenote a cyclic sequence of size n as an array s such that s_n is adjacent to s_1. The segment s[r, l] where l < r is the concatenation of s[r, n] and s[1, l].\n\nYou are given an array a consisting of n integers. Define b as the cyclic sequence obtained from concatenating m copies of a. Note that b has size n ⋅ m.\n\nYou are given an integer k where k = 1 or k is a prime number. Find the number of different segments in b where the sum of elements in the segment is divisible by k.\n\nTwo segments are considered different if the set of indices of the segments are different. For example, when n = 3 and m = 2, the set of indices for segment s[2, 5] is \\{2, 3, 4, 5\\}, and for segment s[5, 2] is \\{5, 6, 1, 2\\}. In particular, the segments s[1, 6], s[2,1], …, s[6, 5] are considered as the same segment.\n\nOutput the answer modulo 10^9 + 7.\n\nInput\n\nThe first line contains three integers n, m, and k (1 ≤ n, m, k ≤ 2 ⋅ 10^5, k = 1 or k is a prime number).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 2 ⋅ 10^5).\n\nOutput\n\nOutput an integer denoting the number of different segments in b where the sum of elements in the segment is divisible by k, modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n5 1 5\n1 2 3 4 3\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n5 1 5\n1 2 3 4 5\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n5 4 5\n1 2 3 4 5\n\n\nOutput\n\n\n125\n\nNote\n\nIn the first example, all valid segments are [1,4], [2, 3], [3, 5], and [4, 2].\n\nIn the second example, one of the valid segments is [1, 5].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.628598523229006}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9666626943864696}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.046774340712129}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.275826328712505}, {"name": "deepseek-coder-33b-instruct", "score": -6.101537939694312}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.2659093927777425}, {"name": "Codestral-22B-v0.1", "score": -6.29258713973878}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.710524282917759}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/3", "prompt": "# Divisible by Twenty-Five\n\nMr. Chanek has an integer represented by a string s. Zero or more digits have been erased and are denoted by the character _. There are also zero or more digits marked by the character X, meaning they're the same digit.\n\nMr. Chanek wants to count the number of possible integer s, where s is divisible by 25. Of course, s must not contain any leading zero. He can replace the character _ with any digit. He can also replace the character X with any digit, but it must be the same for every character X.\n\nAs a note, a leading zero is any 0 digit that comes before the first nonzero digit in a number string in positional notation. For example, 0025 has two leading zeroes. An exception is the integer zero, (0 has no leading zero, but 0000 has three leading zeroes).\n\nInput\n\nOne line containing the string s (1 ≤ |s| ≤ 8). The string s consists of the characters 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, _, and X.\n\nOutput\n\nOutput an integer denoting the number of possible integer s.\n\nExamples\n\nInput\n\n\n25\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n_00\n\n\nOutput\n\n\n9\n\n\nInput\n\n\n_XX\n\n\nOutput\n\n\n9\n\n\nInput\n\n\n0\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n0_25\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, the only possible s is 25.\n\nIn the second and third example, s ∈ \\{100, 200,300,400,500,600,700,800,900\\}.\n\nIn the fifth example, all possible s will have at least one leading zero.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.947930543766564}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.337970248476962}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.106817820568288}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.213543484498598}, {"name": "deepseek-coder-33b-instruct", "score": -5.984953395492324}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.287293344695531}, {"name": "Codestral-22B-v0.1", "score": -6.8166811145827415}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.238169201019386}], "rank": [1, 0, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/4", "prompt": "# Eye-Pleasing City Park Tour\n\nThere is a city park represented as a tree with n attractions as its vertices and n - 1 rails as its edges. The i-th attraction has happiness value a_i.\n\nEach rail has a color. It is either black if t_i = 0, or white if t_i = 1. Black trains only operate on a black rail track, and white trains only operate on a white rail track. If you are previously on a black train and want to ride a white train, or you are previously on a white train and want to ride a black train, you need to use 1 ticket.\n\nThe path of a tour must be a simple path — it must not visit an attraction more than once. You do not need a ticket the first time you board a train. You only have k tickets, meaning you can only switch train types at most k times. In particular, you do not need a ticket to go through a path consisting of one rail color.\n\nDefine f(u, v) as the sum of happiness values of the attractions in the tour (u, v), which is a simple path that starts at the u-th attraction and ends at the v-th attraction. Find the sum of f(u,v) for all valid tours (u, v) (1 ≤ u ≤ v ≤ n) that does not need more than k tickets, modulo 10^9 + 7.\n\nInput\n\nThe first line contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k ≤ n-1) — the number of attractions in the city park and the number of tickets you have.\n\nThe second line contains n integers a_1, a_2,…, a_n (0 ≤ a_i ≤ 10^9) — the happiness value of each attraction.\n\nThe i-th of the next n - 1 lines contains three integers u_i, v_i, and t_i (1 ≤ u_i, v_i ≤ n, 0 ≤ t_i ≤ 1) — an edge between vertices u_i and v_i with color t_i. The given edges form a tree.\n\nOutput\n\nOutput an integer denoting the total happiness value for all valid tours (u, v) (1 ≤ u ≤ v ≤ n), modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n5 0\n1 3 2 6 4\n1 2 1\n1 4 0\n3 2 1\n2 5 0\n\n\nOutput\n\n\n45\n\n\nInput\n\n\n3 1\n1 1 1\n1 2 1\n3 2 0\n\n\nOutput\n\n\n10\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2072564940327615}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.430483409942076}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.833125106659269}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.886170695894698}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.431910624111392}, {"name": "deepseek-coder-33b-instruct", "score": -6.604090155357019}, {"name": "Codestral-22B-v0.1", "score": -6.962981827972259}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.421184709898154}], "rank": [1, 0, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/5", "prompt": "# Finding Expected Value\n\nMr. Chanek opened a letter from his fellow, who is currently studying at Singanesia. Here is what it says.\n\nDefine an array b (0 ≤ b_i < k) with n integers. While there exists a pair (i, j) such that b_i ≠ b_j, do the following operation:\n\n  * Randomly pick a number i satisfying 0 ≤ i < n. Note that each number i has a probability of 1/n to be picked. \n  * Randomly Pick a number j satisfying 0 ≤ j < k. \n  * Change the value of b_i to j. It is possible for b_i to be changed to the same value. \n\n\n\nDenote f(b) as the expected number of operations done to b until all elements of b are equal. \n\nYou are given two integers n and k, and an array a (-1 ≤ a_i < k) of n integers. \n\nFor every index i with a_i = -1, replace a_i with a random number j satisfying 0 ≤ j < k. Let c be the number of occurrences of -1 in a. There are k^c possibilites of a after the replacement, each with equal probability of being the final array.\n\nFind the expected value of f(a) modulo 10^9 + 7. \n\nFormally, let M = 10^9 + 7. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q not ≡ 0 \\pmod{M}. Output the integer equal to p ⋅ q^{-1} mod M. In other words, output such an integer x that 0 ≤ x < M and x ⋅ q ≡ p \\pmod{M}.\n\nAfter reading the letter, Mr. Chanek gave the task to you. Solve it for the sake of their friendship!\n\nInput\n\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 10^9). \n\nThe second line contains n integers a_1, a_2, …, a_n (-1 ≤ a_i < k).\n\nOutput\n\nOutput an integer denoting the expected value of f(a) modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n2 2\n0 1\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n2 2\n0 -1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n3 3\n0 1 1\n\n\nOutput\n\n\n12\n\n\nInput\n\n\n3 3\n-1 -1 -1\n\n\nOutput\n\n\n11\n\n\nInput\n\n\n10 9\n-1 0 -1 1 1 2 2 3 3 3\n\n\nOutput\n\n\n652419213\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.9969522162134514}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.241269196957619}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.668708206792079}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.494147273366783}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.454141400967257}, {"name": "Codestral-22B-v0.1", "score": -6.569313103304464}, {"name": "deepseek-coder-33b-instruct", "score": -6.800312597119986}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.648331698072172}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "code_contests/6", "prompt": "# GCD Festival\n\nMr. Chanek has an array a of n integers. The prettiness value of a is denoted as:\n\n$$$∑_{i=1}^{n} {∑_{j=1}^{n} {\\gcd(a_i, a_j) ⋅ \\gcd(i, j)}}$$$\n\nwhere \\gcd(x, y) denotes the greatest common divisor (GCD) of integers x and y.\n\nIn other words, the prettiness value of an array a is the total sum of \\gcd(a_i, a_j) ⋅ \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7!\n\nInput\n\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -0.11237388037495677}, {"name": "Codestral-22B-v0.1", "score": -1.6812211581086247}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.0638473490885634}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.5896115045995995}, {"name": "deepseek-coder-33b-instruct", "score": -3.134142481136258}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9766865187538682}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.109865055023757}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.603355448503149}], "rank": [4, 5, 0, 3, 6, 1, 2, 7]}
{"id": "code_contests/7", "prompt": "# Holiday Wall Ornaments\n\nThe Winter holiday will be here soon. Mr. Chanek wants to decorate his house's wall with ornaments. The wall can be represented as a binary string a of length n. His favorite nephew has another binary string b of length m (m ≤ n).\n\nMr. Chanek's nephew loves the non-negative integer k. His nephew wants exactly k occurrences of b as substrings in a. \n\nHowever, Mr. Chanek does not know the value of k. So, for each k (0 ≤ k ≤ n - m + 1), find the minimum number of elements in a that have to be changed such that there are exactly k occurrences of b in a.\n\nA string s occurs exactly k times in t if there are exactly k different pairs (p,q) such that we can obtain s by deleting p characters from the beginning and q characters from the end of t.\n\nInput\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 500) — size of the binary string a and b respectively.\n\nThe second line contains a binary string a of length n.\n\nThe third line contains a binary string b of length m.\n\nOutput\n\nOutput n - m + 2 integers — the (k+1)-th integer denotes the minimal number of elements in a that have to be changed so there are exactly k occurrences of b as a substring in a.\n\nExample\n\nInput\n\n\n9 3\n100101011\n101\n\n\nOutput\n\n\n1 1 0 1 6 -1 -1 -1\n\nNote\n\nFor k = 0, to make the string a have no occurrence of 101, you can do one character change as follows.\n\n100101011 → 100100011\n\nFor k = 1, you can also change a single character.\n\n100101011 → 100001011\n\nFor k = 2, no changes are needed.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.061201343628847}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.063129055069179}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.067847039847366}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.115931807705994}, {"name": "deepseek-coder-33b-instruct", "score": -6.155367518377918}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.361343927491137}, {"name": "Codestral-22B-v0.1", "score": -6.583602841034444}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.724206227871163}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/8", "prompt": "# Illusions of the Desert\n\nChanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 ≤ i ≤ n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c — The illusion rate of the x-th room is changed to c (1 ≤ u ≤ n, 0 ≤ |c| ≤ 10^9). \n  * 2\\ u\\ v — Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 ≤ u, v ≤ n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ |a_i| ≤ 10^9) — inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 ≤ s_i, t_i ≤ n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer — the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 → 5 — takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 → 6 — takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 → 2 — takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 → 5 — takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 → 6 — takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 → 2 — takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -0.18746304302010586}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.0142907433757244}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.343805421853684}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.677356360419678}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.741039723011909}, {"name": "deepseek-coder-33b-instruct", "score": -6.861531219547887}, {"name": "Codestral-22B-v0.1", "score": -7.025022626138504}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.832214160508135}], "rank": [4, 1, 0, 3, 2, 6, 5, 7]}
{"id": "code_contests/9", "prompt": "# Jeopardy of Dropped Balls\n\nMr. Chanek has a new game called Dropping Balls. Initially, Mr. Chanek has a grid a of size n × m\n\nEach cell (x,y) contains an integer a_{x,y} denoting the direction of how the ball will move.\n\n  * a_{x,y}=1 — the ball will move to the right (the next cell is (x, y + 1)); \n  * a_{x,y}=2 — the ball will move to the bottom (the next cell is (x + 1, y)); \n  * a_{x,y}=3 — the ball will move to the left (the next cell is (x, y - 1)). \n\n\n\nEvery time a ball leaves a cell (x,y), the integer a_{x,y} will change to 2. Mr. Chanek will drop k balls sequentially, each starting from the first row, and on the c_1, c_2, ..., c_k-th (1 ≤ c_i ≤ m) columns.\n\nDetermine in which column each ball will end up in (position of the ball after leaving the grid).\n\nInput\n\nThe first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 10^5) — the size of the grid and the number of balls dropped by Mr. Chanek.\n\nThe i-th of the next n lines contains m integers a_{i,1},a_{i,2},…,a_{i,m} (1 ≤ a_{i,j} ≤ 3). It will satisfy a_{i, 1} ≠ 3 and a_{i, m} ≠ 1.\n\nThe next line contains k integers c_1, c_2, …, c_k (1 ≤ c_i ≤ m) — the balls' column positions dropped by Mr. Chanek sequentially.\n\nOutput\n\nOutput k integers — the i-th integer denoting the column where the i-th ball will end.\n\nExamples\n\nInput\n\n\n5 5 3\n1 2 3 3 3\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n1 2 1\n\n\nOutput\n\n\n2 2 1 \n\n\nInput\n\n\n1 2 2\n1 3\n1 2\n\n\nOutput\n\n\n1 2 \n\nNote\n\nIn the first example, the first ball will drop as follows. Note that the cell (1, 1) will change direction to the bottom direction.\n\n<image>\n\nThe second and third balls will drop as follows. \n\n<image>\n\nAll balls will be dropped from the first row and on the c_1, c_2, ..., c_k-th columns respectively. A ball will stop dropping once it leaves the grid.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.3779124252359827}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.0578188808726505}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.066013672454039}, {"name": "deepseek-coder-33b-instruct", "score": -4.677015843916427}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0458479858519985}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.1999986656792565}, {"name": "Codestral-22B-v0.1", "score": -6.048577126564218}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [4, 0, 1, 6, 3, 2, 5, 7]}
{"id": "code_contests/10", "prompt": "# Knitting Batik\n\nMr. Chanek wants to knit a batik, a traditional cloth from Indonesia. The cloth forms a grid a with size n × m. There are k colors, and each cell in the grid can be one of the k colors.\n\nDefine a sub-rectangle as an ordered pair of two cells ((x_1, y_1), (x_2, y_2)), denoting the top-left cell and bottom-right cell (inclusively) of a sub-rectangle in a. Two sub-rectangles ((x_1, y_1), (x_2, y_2)) and ((x_3, y_3), (x_4, y_4)) have the same pattern if and only if the following holds: \n\n  * they have the same width (x_2 - x_1 = x_4 - x_3); \n  * they have the same height (y_2 - y_1 = y_4 - y_3); \n  * for every pair (i, j) where 0 ≤ i ≤ x_2 - x_1 and 0 ≤ j ≤ y_2 - y_1, the color of cells (x_1 + i, y_1 + j) and (x_3 + i, y_3 + j) are equal. \n\n\n\nCount the number of possible batik color combinations, such that the subrectangles ((a_x, a_y),(a_x + r - 1, a_y + c - 1)) and ((b_x, b_y),(b_x + r - 1, b_y + c - 1)) have the same pattern.\n\nOutput the answer modulo 10^9 + 7.\n\nInput\n\nThe first line contains five integers n, m, k, r, and c (1 ≤ n, m ≤ 10^9, 1 ≤ k ≤ 10^9, 1 ≤ r ≤ min(10^6, n), 1 ≤ c ≤ min(10^6, m)) — the size of the batik, the number of colors, and size of the sub-rectangle.\n\nThe second line contains four integers a_x, a_y, b_x, and b_y (1 ≤ a_x, b_x ≤ n, 1 ≤ a_y, b_y ≤ m) — the top-left corners of the first and second sub-rectangle. Both of the sub-rectangles given are inside the grid (1 ≤ a_x + r - 1, b_x + r - 1 ≤ n, 1 ≤ a_y + c - 1, b_y + c - 1 ≤ m).\n\nOutput\n\nOutput an integer denoting the number of possible batik color combinations modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n3 3 2 2 2\n1 1 2 2\n\n\nOutput\n\n\n32\n\n\nInput\n\n\n4 5 170845 2 2\n1 4 3 1\n\n\nOutput\n\n\n756680455\n\nNote\n\nThe following are all 32 possible color combinations in the first example.\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.283089886813858}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.366811468867401}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.600020680362071}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.798183150077685}, {"name": "deepseek-coder-33b-instruct", "score": -6.1054804961951215}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.295826729810961}, {"name": "Codestral-22B-v0.1", "score": -6.5799176565532616}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.293474718171963}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/11", "prompt": "# Longest Array Deconstruction\n\nMr. Chanek gives you a sequence a indexed from 1 to n. Define f(a) as the number of indices where a_i = i. \n\nYou can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the 3-rd element from the sequence [4, 2, 3, 1], the resulting sequence will be [4, 2, 1]. \n\nYou want to remove some elements from a in order to maximize f(a), using zero or more operations. Find the largest possible f(a).\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the initial length of the sequence.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2 ⋅ 10^5) — the initial sequence a.\n\nOutput\n\nOutput an integer denoting the largest f(a) that can be obtained by doing zero or more operations.\n\nExamples\n\nInput\n\n\n7\n2 1 4 2 5 3 7\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n4\n4 2 3 1\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example, f(A) = 3 by doing the following operations.\n\n[2,1,4,2,5,3,7] → [2,1,2,5,3,7] → [1,2,5,3,7] → [1,2,5,3] → [1,2,3]\n\nIn the second example, f(A) = 2 and no additional operation is needed.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.850937688650758}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.0438944980835685}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8727830920905424}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.5603401700702975}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.957909395073176}, {"name": "deepseek-coder-33b-instruct", "score": -5.632887795879653}, {"name": "Codestral-22B-v0.1", "score": -5.736217395799363}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.531989584855301}], "rank": [0, 4, 1, 3, 2, 6, 5, 7]}
{"id": "code_contests/12", "prompt": "# Managing Telephone Poles\n\nMr. Chanek's city can be represented as a plane. He wants to build a housing complex in the city.\n\nThere are some telephone poles on the plane, which is represented by a grid a of size (n + 1) × (m + 1). There is a telephone pole at (x, y) if a_{x, y} = 1.\n\nFor each point (x, y), define S(x, y) as the square of the Euclidean distance between the nearest pole and (x, y). Formally, the square of the Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is (x_2 - x_1)^2 + (y_2 - y_1)^2.\n\nTo optimize the building plan, the project supervisor asks you the sum of all S(x, y) for each 0 ≤ x ≤ n and 0 ≤ y ≤ m. Help him by finding the value of ∑_{x=0}^{n} {∑_{y=0}^{m} {S(x, y)}}.\n\nInput\n\nThe first line contains two integers n and m (0 ≤ n, m < 2000) — the size of the grid.\n\nThen (n + 1) lines follow, each containing (m + 1) integers a_{i, j} (0 ≤ a_{i, j} ≤ 1) — the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.\n\nOutput\n\nOutput an integer denoting the value of ∑_{x=0}^{n} {∑_{y=0}^{m} {S(x, y)}}.\n\nExamples\n\nInput\n\n\n2 2\n101\n000\n000\n\n\nOutput\n\n\n18\n\n\nInput\n\n\n5 4\n10010\n00000\n01000\n00001\n00100\n00010\n\n\nOutput\n\n\n36\n\nNote\n\n<image>\n\nIn the first example, the nearest telephone pole for the points (0,0), (1,0), (2,0), (0,1), (1,1), and (2,1) is at (0, 0). While the nearest telephone pole for the points (0, 2), (1,2), and (2,2) is at (0, 2). Thus, ∑_{x=0}^{n} {∑_{y=0}^{m} {S(x, y)}} = (0 + 1 + 4) + (1 + 2 + 5) + (0 + 1 + 4) = 18.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": -0.8838363639369051}, {"name": "deepseek-coder-33b-instruct", "score": -3.274299649303509}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7016969578245504}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.848614512235095}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.123463854361576}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.985768354563101}, {"name": "Codestral-22B-v0.1", "score": -6.620486454464999}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.572336304463285}], "rank": [3, 6, 1, 0, 2, 4, 5, 7]}
{"id": "code_contests/13", "prompt": "# Casimir's String Solitaire\n\nCasimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions:\n\n  * he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); \n  * or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string (these letters don't have to be adjacent). \n\n\n\nTherefore, each turn the length of the string is decreased exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -0.10720476094875231}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6052804302376225}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6090783839103815}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.690099396773396}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.047622746146536}, {"name": "deepseek-coder-33b-instruct", "score": -5.944844526472756}, {"name": "Codestral-22B-v0.1", "score": -6.07426498720113}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.759069638585937}], "rank": [4, 0, 1, 3, 2, 6, 5, 7]}
{"id": "code_contests/14", "prompt": "# Shifting Sort\n\nThe new generation external memory contains an array of integers a[1 … n] = [a_1, a_2, …, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 ≤ l < r ≤ n) as the boundaries of the segment. \n  2. Then you replace the segment a[l … r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 … 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 ≤ n ≤ 50) — the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 ≤ a_i ≤ 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 ≤ k ≤ n) — the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 ≤ l < r ≤ n) are the boundaries of the segment being shifted, while d (1 ≤ d ≤ r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 … 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 … 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 … 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 … 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-33b-instruct", "score": -2.0125956906084914}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.1050866587540025}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.210170127727691}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.890770092235548}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.411020856461121}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.226568289340906}, {"name": "Codestral-22B-v0.1", "score": -6.486846529380119}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.818661735788183}], "rank": [6, 0, 1, 3, 2, 4, 5, 7]}
{"id": "code_contests/15", "prompt": "# Ticks\n\nCasimir has a rectangular piece of paper with a checkered field of size n × m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j). The upper left cell will be referred to as (1, 1) and the lower right cell as (n, m).\n\nCasimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n  1. First, the center cell (i, j) is painted black. \n  2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. \n  3. That is all the cells with coordinates (i - h, j ± h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. \n\n\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 × 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n × m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d ≥ k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d ≥ k or not.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 100) — the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 ≤ k ≤ n ≤ 10; 1 ≤ m ≤ 19) — the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.18534242704409}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.264368591205649}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.581750424710402}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.726639256799128}, {"name": "deepseek-coder-33b-instruct", "score": -6.176008632255034}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.471888693681602}, {"name": "Codestral-22B-v0.1", "score": -6.504063597423114}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.142061890842043}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/16", "prompt": "# Productive Meeting\n\nAn important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 ≤ n ≤ 2 ⋅ 10^5) —the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2 ⋅ 10^5) — the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 ⋅ 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k — the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 ≤ i, j ≤ n and i ≠ j) — the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.844429154854902}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9166522738118084}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.122534386593665}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.216998845370448}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.001573281256269}, {"name": "deepseek-coder-33b-instruct", "score": -6.2340106456970314}, {"name": "Codestral-22B-v0.1", "score": -6.600536943755997}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.375361035627871}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/17", "prompt": "# Array Optimization by Deque\n\nIn fact, the problems E1 and E2 do not have much in common. You should probably think of them as two separate problems.\n\nYou are given an integer array a[1 … n] = [a_1, a_2, …, a_n].\n\nLet us consider an empty [deque](https://tinyurl.com/pfeucbux) (double-ended queue). A deque is a data structure that supports adding elements to both the beginning and the end. So, if there are elements [3, 4, 4] currently in the deque, adding an element 1 to the beginning will produce the sequence [\\color{red}{1}, 3, 4, 4], and adding the same element to the end will produce [3, 4, 4, \\color{red}{1}].\n\nThe elements of the array are sequentially added to the initially empty deque, starting with a_1 and finishing with a_n. Before adding each element to the deque, you may choose whether to add it to the beginning or to the end.\n\nFor example, if we consider an array a = [3, 7, 5, 5], one of the possible sequences of actions looks like this:    1. |  add 3 to the beginning of the deque: |  deque has a sequence [\\color{red}{3}] in it;   \n---|---|---  \n  2. |  add 7 to the end of the deque: |  deque has a sequence [3, \\color{red}{7}] in it;   \n  3. |  add 5 to the end of the deque: |  deque has a sequence [3, 7, \\color{red}{5}] in it;   \n  4. |  add 5 to the beginning of the deque: |  deque has a sequence [\\color{red}{5}, 3, 7, 5] in it;   \n  \nFind the minimal possible number of inversions in the deque after the whole array is processed. \n\nAn inversion in sequence d is a pair of indices (i, j) such that i < j and d_i > d_j. For example, the array d = [5, 3, 7, 5] has exactly two inversions — (1, 2) and (3, 4), since d_1 = 5 > 3 = d_2 and d_3 = 7 > 5 = d_4.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — array size. The second line of the description contains n space-separated integers a_i (-10^9 ≤ a_i ≤ 10^9) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer — the minimal possible number of inversions in the deque after executing the described algorithm.\n\nExample\n\nInput\n\n\n6\n4\n3 7 5 5\n3\n3 2 1\n3\n3 1 2\n4\n-1 2 2 -1\n4\n4 5 1 3\n5\n1 3 1 3 2\n\n\nOutput\n\n\n2\n0\n1\n0\n1\n2\n\nNote\n\nOne of the ways to get the sequence [5, 3, 7, 5] in the deque, containing only two inversions, from the initial array [3, 7, 5, 5] (the first sample test case) is described in the problem statement. \n\nAlso, in this example, you could get the answer of two inversions by simply putting each element of the original array at the end of the deque. In this case, the original sequence [3, 7, 5, 5], also containing exactly two inversions, will be in the deque as-is.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.7711043943696057}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.053939147587061}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.648229675448538}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.262420722550274}, {"name": "deepseek-coder-33b-instruct", "score": -6.162826263665594}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.292901584792099}, {"name": "Codestral-22B-v0.1", "score": -6.492042845922423}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.557840458078481}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/18", "prompt": "# Array Stabilization (AND version)\n\nYou are given an array a[0 … n - 1] = [a_0, a_1, …, a_{n - 1}] of zeroes and ones only. Note that in this problem, unlike the others, the array indexes are numbered from zero, not from one.\n\nIn one step, the array a is replaced by another array of length n according to the following rules: \n\n  1. First, a new array a^{→ d} is defined as a cyclic shift of the array a to the right by d cells. The elements of this array can be defined as a^{→ d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n. \n\nIt means that the whole array a^{→ d} can be represented as a sequence $$$a^{→ d} = [a_{n - d}, a_{n - d + 1}, …, a_{n - 1}, a_0, a_1, …, a_{n - d - 1}]$$$\n\n  2. Then each element of the array a_i is replaced by a_i  \\&  a^{→ d}_i, where \\& is a logical \"AND\" operator. \n\n\n\nFor example, if a = [0, 0, 1, 1] and d = 1, then a^{→ d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1].\n\nThe process ends when the array stops changing. For a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 ≤ n ≤ 10^6) — array size and d (1 ≤ d ≤ n) — cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 ≤ a_i ≤ 1) — elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer — the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{→ 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{→ 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{→ 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.3962887629967007}, {"name": "Codestral-22B-v0.1", "score": -0.12443573749196624}, {"name": "deepseek-coder-33b-instruct", "score": -1.3314036748273725}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.61286196769002}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.615904975266927}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8121584702741074}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.1274578686575145}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.174807583766919}], "rank": [4, 5, 6, 1, 3, 0, 2, 7]}
{"id": "code_contests/19", "prompt": "# Minimal Coverage\n\nYou are given n lengths of segments that need to be placed on an infinite axis with coordinates.\n\nThe first segment is placed on the axis so that one of its endpoints lies at the point with coordinate 0. Let's call this endpoint the \"start\" of the first segment and let's call its \"end\" as that endpoint that is not the start. \n\nThe \"start\" of each following segment must coincide with the \"end\" of the previous one. Thus, if the length of the next segment is d and the \"end\" of the previous one has the coordinate x, the segment can be placed either on the coordinates [x-d, x], and then the coordinate of its \"end\" is x - d, or on the coordinates [x, x+d], in which case its \"end\" coordinate is x + d.\n\nThe total coverage of the axis by these segments is defined as their overall union which is basically the set of points covered by at least one of the segments. It's easy to show that the coverage will also be a segment on the axis. Determine the minimal possible length of the coverage that can be obtained by placing all the segments on the axis without changing their order.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (1 ≤ n ≤ 10^4) — the number of segments. The second line of the description contains n space-separated integers a_i (1 ≤ a_i ≤ 1000) — lengths of the segments in the same order they should be placed on the axis.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer — the minimal possible length of the axis coverage.\n\nExample\n\nInput\n\n\n6\n2\n1 3\n3\n1 2 3\n4\n6 2 3 9\n4\n6 8 4 5\n7\n1 2 4 6 7 7 3\n8\n8 6 5 1 2 2 3 6\n\n\nOutput\n\n\n3\n3\n9\n9\n7\n8\n\nNote\n\nIn the third sample test case the segments should be arranged as follows: [0, 6] → [4, 6] → [4, 7] → [-2, 7]. As you can see, the last segment [-2, 7] covers all the previous ones, and the total length of coverage is 9.\n\nIn the fourth sample test case the segments should be arranged as [0, 6] → [-2, 6] → [-2, 2] → [2, 7]. The union of these segments also occupies the area [-2, 7] and has the length of 9.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5261252028125103}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.93268800587173}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.961781127878736}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.090924125325058}, {"name": "deepseek-coder-33b-instruct", "score": -5.911284329980454}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.024473700714927}, {"name": "Codestral-22B-v0.1", "score": -6.268395280485149}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.058740955466239}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/20", "prompt": "# Portal\n\nCQXYM found a rectangle A of size n × m. There are n rows and m columns of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can change an obsidian block to an empty block or an empty block to an obsidian block in one operation.\n\nA rectangle M size of a × b is called a portal if and only if it satisfies the following conditions:\n\n  * a ≥ 5,b ≥ 4. \n  * For all 1 < x < a, blocks M_{x,1} and M_{x,b} are obsidian blocks. \n  * For all 1 < x < b, blocks M_{1,x} and M_{a,x} are obsidian blocks. \n  * For all 1<x<a,1<y<b, block M_{x,y} is an empty block. \n  * M_{1, 1}, M_{1, b}, M_{a, 1}, M_{a, b} can be any type. \n\nNote that the there must be a rows and b columns, not b rows and a columns.\n\nNote that corners can be any type\n\nCQXYM wants to know the minimum number of operations he needs to make at least one sub-rectangle a portal.\n\nInput\n\nThe first line contains an integer t (t ≥ 1), which is the number of test cases.\n\nFor each test case, the first line contains two integers n and m (5 ≤ n ≤ 400, 4 ≤ m ≤ 400). \n\nThen n lines follow, each line contains m characters 0 or 1. If the j-th character of i-th line is 0, block A_{i,j} is an empty block. Otherwise, block A_{i,j} is an obsidian block.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 400.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 400.\n\nOutput\n\nOutput t answers, and each answer in a line.\n\nExamples\n\nInput\n\n\n1\n5 4\n1000\n0000\n0110\n0000\n0001\n\n\nOutput\n\n\n12\n\n\nInput\n\n\n1\n9 9\n001010001\n101110100\n000010011\n100000001\n101010101\n110001111\n000001111\n111100000\n000110000\n\n\nOutput\n\n\n5\n\nNote\n\nIn the first test case, the final portal is like this:\n    \n    \n      \n    1110  \n    1001  \n    1001  \n    1001  \n    0111  \n    \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.080313248809124}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.1929825321191005}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.324021956432998}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.168664158321166}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3248619217701485}, {"name": "deepseek-coder-33b-instruct", "score": -6.407810246312358}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.525428405312594}, {"name": "Codestral-22B-v0.1", "score": -7.054492835093721}], "rank": [1, 0, 7, 3, 2, 6, 4, 5]}
{"id": "code_contests/21", "prompt": "# Mathematics Curriculum\n\nLet c_1, c_2, …, c_n be a permutation of integers 1, 2, …, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments.\n\nCirno is studying mathematics, and the teacher asks her to count the number of permutations of length n with exactly k good numbers.\n\nUnfortunately, Cirno isn't good at mathematics, and she can't answer this question. Therefore, she asks you for help.\n\nSince the answer may be very big, you only need to tell her the number of permutations modulo p.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains four integers n, m, k, p (1 ≤ n ≤ 100, 1 ≤ m ≤ n, 1 ≤ k ≤ n, 1 ≤ p ≤ 10^9).\n\nOutput\n\nOutput the number of permutations modulo p.\n\nExamples\n\nInput\n\n\n4 3 2 10007\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n6 4 1 769626776\n\n\nOutput\n\n\n472\n\n\nInput\n\n\n66 11 9 786747482\n\n\nOutput\n\n\n206331312\n\n\nInput\n\n\n99 30 18 650457567\n\n\nOutput\n\n\n77365367\n\nNote\n\nIn the first test case, there are four permutations: [1, 3, 2, 4], [2, 3, 1, 4], [4, 1, 3, 2] and [4, 2, 3, 1].\n\nTake permutation [1, 3, 2, 4] as an example:\n\nFor number 1, all subsegments containing it are: [1], [1, 3], [1, 3, 2] and [1, 3, 2, 4], and there're three different maxima 1, 3 and 4.\n\nSimilarly, for number 3, there're two different maxima 3 and 4. For number 2, there're three different maxima 2, 3 and 4. And for number 4, there're only one, that is 4 itself.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.931041011263908}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.259237338581261}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.946544672636646}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.186469184754656}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.333606395349378}, {"name": "deepseek-coder-33b-instruct", "score": -6.438090792221087}, {"name": "Codestral-22B-v0.1", "score": -6.554816205125419}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.413919655997162}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/22", "prompt": "# Train Maintenance\n\nKawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 ≤ n,m ≤ 2 ⋅ 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 ≤ x_i,y_i ≤ 10^9).\n\nEach of the next m lines contains two integers op, k (1 ≤ k ≤ n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.862244352864999}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8681129143086577}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.004053682730701}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.11995595800572}, {"name": "deepseek-coder-33b-instruct", "score": -6.177055752769559}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.326421350325531}, {"name": "Codestral-22B-v0.1", "score": -6.597691255637225}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.569609915237956}], "rank": [1, 0, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/23", "prompt": "# Subsequence\n\nAlice has an integer sequence a of length n and all elements are different. She will choose a subsequence of a of length m, and defines the value of a subsequence a_{b_1},a_{b_2},…,a_{b_m} as $$$∑_{i = 1}^m (m ⋅ a_{b_i}) - ∑_{i = 1}^m ∑_{j = 1}^m f(min(b_i, b_j), max(b_i, b_j)), where f(i, j) denotes \\min(a_i, a_{i + 1}, \\ldots, a_j)$$$.\n\nAlice wants you to help her to maximize the value of the subsequence she choose.\n\nA sequence s is a subsequence of a sequence t if s can be obtained from t by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 4000).\n\nThe second line contains n distinct integers a_1, a_2, …, a_n (1 ≤ a_i < 2^{31}).\n\nOutput\n\nPrint the maximal value Alice can get.\n\nExamples\n\nInput\n\n\n6 4\n15 2 18 12 13 4\n\n\nOutput\n\n\n100\n\n\nInput\n\n\n11 5\n9 3 7 1 8 12 10 20 15 18 5\n\n\nOutput\n\n\n176\n\n\nInput\n\n\n1 1\n114514\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n2 1\n666 888\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, Alice can choose the subsequence [15, 2, 18, 13], which has the value 4 ⋅ (15 + 2 + 18 + 13) - (15 + 2 + 2 + 2) - (2 + 2 + 2 + 2) - (2 + 2 + 18 + 12) - (2 + 2 + 12 + 13) = 100. In the second example, there are a variety of subsequences with value 176, and one of them is [9, 7, 12, 20, 18].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5922584155095105}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.763337365031946}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.771362360852162}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.663377060021162}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.221432757369289}, {"name": "deepseek-coder-33b-instruct", "score": -6.244337759852881}, {"name": "Codestral-22B-v0.1", "score": -6.482495543545793}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.639278585362641}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/24", "prompt": "# Railway Construction\n\nBecause the railway system in Gensokyo is often congested, as an enthusiastic engineer, Kawasiro Nitori plans to construct more railway to ease the congestion.\n\nThere are n stations numbered from 1 to n and m two-way railways in Gensokyo. Every two-way railway connects two different stations and has a positive integer length d. No two two-way railways connect the same two stations. Besides, it is possible to travel from any station to any other using those railways. Among these n stations, station 1 is the main station. You can get to any station from any other station using only two-way railways.\n\nBecause of the technological limitation, Nitori can only construct one-way railways, whose length can be arbitrary positive integer. Constructing a one-way railway from station u will costs w_u units of resources, no matter where the railway ends. To ease the congestion, Nitori plans that after construction there are at least two shortest paths from station 1 to any other station, and these two shortest paths do not pass the same station except station 1 and the terminal. Besides, Nitori also does not want to change the distance of the shortest path from station 1 to any other station.\n\nDue to various reasons, sometimes the cost of building a new railway will increase uncontrollably. There will be a total of q occurrences of this kind of incident, and the i-th event will add additional amount of x_i to the cost of building a new railway from the station k_i.\n\nTo save resources, before all incidents and after each incident, Nitori wants you to help her calculate the minimal cost of railway construction.\n\nInput\n\nThe first line contains three integers n, m, and q (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 3 ⋅ 10^5, 0 ≤ q ≤ 2⋅10^5).\n\nThe second line contains n integers w_1,w_2,…,w_n (1 ≤ w_i ≤ 10^9).\n\nEach of the next m lines contains three integers u, v, d (1 ≤ u,v ≤ n, u ≠ v, 1 ≤ d ≤ 10^9), denoting a two-way railway connecting station u and station v, with length d.\n\nThe i-th of the next q lines contains two integers k_i,x_i (1 ≤ k_i ≤ n, 1 ≤ x_i ≤ 4 × 10^8).\n\nOutput\n\nPrint q+1 lines, and the i-th of these lines contains one integer, denoting the minimal cost of railway construction after the i-1-th incident (especially, the 0-th incident means no incident occurred).\n\nExamples\n\nInput\n\n\n5 5 1\n1 1 1 1 1\n1 2 1\n2 3 1\n2 4 1\n3 5 1\n4 5 1\n1 2\n\n\nOutput\n\n\n3\n9\n\n\nInput\n\n\n8 11 0\n14 4 16 15 1 3 1 14\n4 2 1\n1 2 3\n7 5 4\n2 3 1\n8 6 2\n8 5 5\n5 4 5\n7 6 7\n3 5 5\n1 6 6\n8 1 4\n\n\nOutput\n\n\n46\n\n\nInput\n\n\n10 16 8\n29 1 75 73 51 69 24 17 1 97\n1 2 18\n2 3 254\n2 4 546\n2 5 789\n5 6 998\n6 7 233\n7 8 433\n1 9 248\n5 10 488\n2 6 1787\n10 8 1176\n3 8 2199\n4 8 1907\n2 10 1277\n4 10 731\n9 10 1047\n1 11\n1 9\n8 8\n1 3\n2 19\n9 5\n9 4\n7 6\n\n\nOutput\n\n\n34\n45\n54\n54\n57\n76\n96\n112\n112\n\nNote\n\nIn the second example, Nitori can build railways as follows: 1 → 2, 1 → 3, 1 → 4, 2 → 8, and the cost is 14 + 14 + 14 + 4 = 46.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.396915247167632}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.41163397942654}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.533421108780961}, {"name": "starcoder2-15b-instruct-v0.1", "score": -6.064417566846571}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.522257490489981}, {"name": "deepseek-coder-33b-instruct", "score": -6.645226200933633}, {"name": "Codestral-22B-v0.1", "score": -6.863834738923999}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.499195262382158}], "rank": [1, 0, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/25", "prompt": "# Problems for Codeforces\n\nXYMXYM and CQXYM will prepare n problems for Codeforces. The difficulty of the problem i will be an integer a_i, where a_i ≥ 0. The difficulty of the problems must satisfy a_i+a_{i+1}<m (1 ≤ i < n), and a_1+a_n<m, where m is a fixed integer. XYMXYM wants to know how many plans of the difficulty of the problems there are modulo 998 244 353.\n\nTwo plans of difficulty a and b are different only if there is an integer i (1 ≤ i ≤ n) satisfying a_i ≠ b_i.\n\nInput\n\nA single line contains two integers n and m (2 ≤ n ≤ 50 000, 1 ≤ m ≤ 10^9).\n\nOutput\n\nPrint a single integer — the number of different plans.\n\nExamples\n\nInput\n\n\n3 2\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n5 9\n\n\nOutput\n\n\n8105\n\n\nInput\n\n\n21038 3942834\n\n\nOutput\n\n\n338529212\n\nNote\n\nIn the first test case, the valid a are: [0,0,0], [0,0,1], [0,1,0], [1,0,0].\n\n[1,0,1] is invalid since a_1+a_n ≥ m.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.068238964340739}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.033815769147279}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.755381688863812}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.858695501788378}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.175185124815644}, {"name": "deepseek-coder-33b-instruct", "score": -6.319702978802091}, {"name": "Codestral-22B-v0.1", "score": -6.347634363491268}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.584962084139583}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/26", "prompt": "# CQXYM Count Permutations\n\nCQXYM is counting permutations length of 2n.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA permutation p(length of 2n) will be counted only if the number of i satisfying p_i<p_{i+1} is no less than n. For example:\n\n  * Permutation [1, 2, 3, 4] will count, because the number of such i that p_i<p_{i+1} equals 3 (i = 1, i = 2, i = 3).\n  * Permutation [3, 2, 1, 4] won't count, because the number of such i that p_i<p_{i+1} equals 1 (i = 3). \n\n\n\nCQXYM wants you to help him to count the number of such permutations modulo 1000000007 (10^9+7).\n\nIn addition, [modulo operation](https://en.wikipedia.org/wiki/Modulo_operation) is to get the remainder. For example:\n\n  * 7 mod 3=1, because 7 = 3 ⋅ 2 + 1, \n  * 15 mod 4=3, because 15 = 4 ⋅ 3 + 3. \n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (t ≥ 1) — the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains an integer n(1 ≤ n ≤ 10^5).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5\n\nOutput\n\nFor each test case, print the answer in a single line.\n\nExample\n\nInput\n\n\n4\n1\n2\n9\n91234\n\n\nOutput\n\n\n1\n12\n830455698\n890287984\n\nNote\n\nn=1, there is only one permutation that satisfies the condition: [1,2].\n\nIn permutation [1,2], p_1<p_2, and there is one i=1 satisfy the condition. Since 1 ≥ n, this permutation should be counted. In permutation [2,1], p_1>p_2. Because 0<n, this permutation should not be counted.\n\nn=2, there are 12 permutations: [1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[2,1,3,4],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,4,1,2],[4,1,2,3].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7691682853427393}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7736800558064014}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.876783850260808}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.988660619775247}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.260422410561483}, {"name": "deepseek-coder-33b-instruct", "score": -6.321063214786022}, {"name": "Codestral-22B-v0.1", "score": -6.539282441353782}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.976348070447749}], "rank": [1, 0, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/27", "prompt": "# Diameter of Graph\n\nCQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 ≤ t ≤ 10^5) — the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 ≤ n ≤ 10^9), m, k (0 ≤ m,k ≤ 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 0 3\n4 5 3\n4 6 3\n5 4 1\n2 1 1\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nNO\n\nNote\n\nIn the first test case, the graph's diameter equal to 0.\n\nIn the second test case, the graph's diameter can only be 2.\n\nIn the third test case, the graph's diameter can only be 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.974099973426877}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6828613817883733}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.94064192227572}, {"name": "deepseek-coder-33b-instruct", "score": -5.854406944706901}, {"name": "Codestral-22B-v0.1", "score": -6.254981992560465}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.352350611818179}, {"name": "starcoder2-15b-instruct-v0.1", "score": -6.5075403644561005}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.707810577046162}], "rank": [0, 1, 2, 6, 5, 4, 3, 7]}
{"id": "code_contests/28", "prompt": "# Luntik and Concerts\n\nLuntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 ≤ a, b, c ≤ 10^9) — the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.4292876530883678}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.2077744317970267}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6203864576686358}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.788706705477888}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.152134856369955}, {"name": "Codestral-22B-v0.1", "score": -5.237223747547771}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.295814236329918}, {"name": "deepseek-coder-33b-instruct", "score": -6.23004828291007}], "rank": [7, 0, 1, 4, 3, 5, 2, 6]}
{"id": "code_contests/29", "prompt": "# Luntik and Subsequences\n\nLuntik came out for a morning stroll and found an array a of length n. He calculated the sum s of the elements of the array (s= ∑_{i=1}^{n} a_i). Luntik calls a subsequence of the array a nearly full if the sum of the numbers in that subsequence is equal to s-1.\n\nLuntik really wants to know the number of nearly full subsequences of the array a. But he needs to come home so he asks you to solve that problem!\n\nA sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The next 2 ⋅ t lines contain descriptions of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 60) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the array a.\n\nOutput\n\nFor each test case print the number of nearly full subsequences of the array.\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n2\n1000 1000\n2\n1 0\n5\n3 0 2 1 1\n5\n2 1 0 3 0\n\n\nOutput\n\n\n1\n0\n2\n4\n4\n\nNote\n\nIn the first test case, s=1+2+3+4+5=15, only (2,3,4,5) is a nearly full subsequence among all subsequences, the sum in it is equal to 2+3+4+5=14=15-1.\n\nIn the second test case, there are no nearly full subsequences.\n\nIn the third test case, s=1+0=1, the nearly full subsequences are (0) and () (the sum of an empty subsequence is 0).\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5253011401371173}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9490104574784266}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.618836376751906}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.125961982065932}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.113398953886842}, {"name": "deepseek-coder-33b-instruct", "score": -6.153226189936575}, {"name": "Codestral-22B-v0.1", "score": -6.410799686735009}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.707697345998088}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/30", "prompt": "# Grandma Capa Knits a Scarf\n\nGrandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string s of length n.\n\nGrandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s.\n\nShe also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose.\n\nA string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2 ⋅ t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5359613476892235}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.722894332701214}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.246181612127508}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.254240079307109}, {"name": "deepseek-coder-33b-instruct", "score": -5.94418424252668}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.066089528446562}, {"name": "Codestral-22B-v0.1", "score": -6.435781710679941}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.352525712048518}], "rank": [0, 1, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/31", "prompt": "# Vupsen, Pupsen and 0\n\nVupsen and Pupsen were gifted an integer array. Since Vupsen doesn't like the number 0, he threw away all numbers equal to 0 from the array. As a result, he got an array a of length n.\n\nPupsen, on the contrary, likes the number 0 and he got upset when he saw the array without zeroes. To cheer Pupsen up, Vupsen decided to come up with another array b of length n such that ∑_{i=1}^{n}a_i ⋅ b_i=0. Since Vupsen doesn't like number 0, the array b must not contain numbers equal to 0. Also, the numbers in that array must not be huge, so the sum of their absolute values cannot exceed 10^9. Please help Vupsen to find any such array b!\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2 ⋅ t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^4 ≤ a_i ≤ 10^4, a_i ≠ 0) — the elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case print n integers b_1, b_2, …, b_n — elements of the array b (|b_1|+|b_2|+… +|b_n| ≤ 10^9, b_i ≠ 0, ∑_{i=1}^{n}a_i ⋅ b_i=0).\n\nIt can be shown that the answer always exists.\n\nExample\n\nInput\n\n\n3\n2\n5 5\n5\n5 -2 10 -9 4\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n1 -1\n-1 5 1 -1 -1\n-10 2 2 -3 5 -1 -1\n\nNote\n\nIn the first test case, 5 ⋅ 1 + 5 ⋅ (-1)=5-5=0. You could also print 3 -3, for example, since 5 ⋅ 3 + 5 ⋅ (-3)=15-15=0\n\nIn the second test case, 5 ⋅ (-1) + (-2) ⋅ 5 + 10 ⋅ 1 + (-9) ⋅ (-1) + 4 ⋅ (-1)=-5-10+10+9-4=0.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5922584155095105}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.869866787894754}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.722633170433549}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.718946911175973}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.766869943526458}, {"name": "deepseek-coder-33b-instruct", "score": -5.98050470687164}, {"name": "Codestral-22B-v0.1", "score": -6.2417562303412035}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/32", "prompt": "# Pchelyonok and Segments\n\nPchelyonok decided to give Mila a gift. Pchelenok has already bought an array a of length n, but gifting an array is too common. Instead of that, he decided to gift Mila the segments of that array!\n\nPchelyonok wants his gift to be beautiful, so he decided to choose k non-overlapping segments of the array [l_1,r_1], [l_2,r_2], … [l_k,r_k] such that:\n\n  * the length of the first segment [l_1,r_1] is k, the length of the second segment [l_2,r_2] is k-1, …, the length of the k-th segment [l_k,r_k] is 1 \n  * for each i<j, the i-th segment occurs in the array earlier than the j-th (i.e. r_i<l_j) \n  * the sums in these segments are strictly increasing (i.e. let sum(l … r) = ∑_{i=l}^{r} a_i — the sum of numbers in the segment [l,r] of the array, then sum(l_1 … r_1) < sum(l_2 … r_2) < … < sum(l_k … r_k)). \n\n\n\nPchelenok also wants his gift to be as beautiful as possible, so he asks you to find the maximal value of k such that he can give Mila a gift!\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next 2 ⋅ t lines contain the descriptions of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, print the maximum possible value of k.\n\nExample\n\nInput\n\n\n5\n1\n1\n3\n1 2 3\n5\n1 1 2 2 3\n7\n1 2 1 1 3 2 6\n5\n9 6 7 9 7\n\n\nOutput\n\n\n1\n1\n2\n3\n1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5806258686736823}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7978235411031154}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.954699661765952}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.0695077936072}, {"name": "deepseek-coder-33b-instruct", "score": -6.101537939694312}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.236197364023333}, {"name": "Codestral-22B-v0.1", "score": -6.411736162533119}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.5673973809846835}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/33", "prompt": "# Korney Korneevich and XOR (easy version)\n\nThis is an easier version of the problem with smaller constraints.\n\nKorney Korneevich dag up an array a of length n. Korney Korneevich has recently read about the operation [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR), so he wished to experiment with it. For this purpose, he decided to find all integers x ≥ 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x.\n\nIt didn't take a long time for Korney Korneevich to find all such x, and he wants to check his result. That's why he asked you to solve this problem!\n\nA sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA sequence s_1, s_2, … , s_m is called increasing if s_1 < s_2 < … < s_m.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 500) — the elements of the array a.\n\nOutput\n\nIn the first line print a single integer k — the number of found x values.\n\nIn the second line print k integers in increasing order x_1, x_2, … x_k (0 ≤ x_1 < … < x_k) — found x values.\n\nExamples\n\nInput\n\n\n4\n4 2 2 4\n\n\nOutput\n\n\n4\n0 2 4 6 \n\n\nInput\n\n\n8\n1 0 1 7 12 5 3 2\n\n\nOutput\n\n\n12\n0 1 2 3 4 5 6 7 10 11 12 13 \n\nNote\n\nIn the first test case:\n\n  * To get value x = 0 it is possible to choose and empty subsequence \n  * To get value x = 2 it is possible to choose a subsequence [2] \n  * To get value x = 4 it is possible to choose a subsequence [4] \n  * To get value x = 6 it is possible to choose a subsequence [2, 4] \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5814055958087034}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8986540376891914}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.2295745114822045}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.067922588519634}, {"name": "deepseek-coder-33b-instruct", "score": -5.784846199375928}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.079695180502341}, {"name": "Codestral-22B-v0.1", "score": -6.551837191412494}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.689413211906446}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/34", "prompt": "# Korney Korneevich and XOR (hard version)\n\nThis is a harder version of the problem with bigger constraints.\n\nKorney Korneevich dag up an array a of length n. Korney Korneevich has recently read about the operation [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR), so he wished to experiment with it. For this purpose, he decided to find all integers x ≥ 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x.\n\nIt didn't take a long time for Korney Korneevich to find all such x, and he wants to check his result. That's why he asked you to solve this problem!\n\nA sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA sequence s_1, s_2, … , s_m is called increasing if s_1 < s_2 < … < s_m.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^6).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 5000) — the elements of the array a.\n\nOutput\n\nIn the first line print a single integer k — the number of found x values.\n\nIn the second line print k integers in increasing order x_1, x_2, … x_k (0 ≤ x_1 < … < x_k) — found x values.\n\nExamples\n\nInput\n\n\n4\n4 2 2 4\n\n\nOutput\n\n\n4\n0 2 4 6 \n\n\nInput\n\n\n8\n1 0 1 7 12 5 3 2\n\n\nOutput\n\n\n12\n0 1 2 3 4 5 6 7 10 11 12 13 \n\nNote\n\nIn the first test case:\n\n  * To get value x = 0 it is possible to choose and empty subsequence \n  * To get value x = 2 it is possible to choose a subsequence [2] \n  * To get value x = 4 it is possible to choose a subsequence [4] \n  * To get value x = 6 it is possible to choose a subsequence [2, 4] \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.727619282429867}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.829336806809192}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.388207493748962}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.371605002317856}, {"name": "deepseek-coder-33b-instruct", "score": -5.967684018442578}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.207027437681738}, {"name": "Codestral-22B-v0.1", "score": -6.607487673245855}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/35", "prompt": "# Kuzya and Homework\n\nKuzya started going to school. He was given math homework in which he was given an array a of length n and an array of symbols b of length n, consisting of symbols '*' and '/'.\n\nLet's denote a path of calculations for a segment [l; r] (1 ≤ l ≤ r ≤ n) in the following way: \n\n  * Let x=1 initially. For every i from l to r we will consequently do the following: if b_i= '*', x=x*a_i, and if b_i= '/', then x=(x)/(a_i). Let's call a path of calculations for the segment [l; r] a list of all x that we got during the calculations (the number of them is exactly r - l + 1). \n\n\n\nFor example, let a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the path of calculations for that segment is [12, 4, 0.8, 0.2, 2].\n\nLet's call a segment [l;r] simple if the path of calculations for it contains only integer numbers. \n\nKuzya needs to find the number of simple segments [l;r] (1 ≤ l ≤ r ≤ n). Since he obviously has no time and no interest to do the calculations for each option, he asked you to write a program to get to find that number!\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^6).\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).\n\nThe third line contains n symbols without spaces between them — the array b_1, b_2 … b_n (b_i= '/' or b_i= '*' for every 1 ≤ i ≤ n).\n\nOutput\n\nPrint a single integer — the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.420215387497917}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9517051505668506}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.845383221197824}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.127956000672796}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.9755790378777585}, {"name": "deepseek-coder-33b-instruct", "score": -6.04822288092659}, {"name": "Codestral-22B-v0.1", "score": -6.319976614048018}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/36", "prompt": "# Windblume Ode\n\nA bow adorned with nameless flowers that bears the earnest hopes of an equally nameless person.\n\nYou have obtained the elegant bow known as the Windblume Ode. Inscribed in the weapon is an array of n (n ≥ 3) positive distinct integers (i.e. different, no duplicates are allowed).\n\nFind the largest subset (i.e. having the maximum number of elements) of this array such that its sum is a composite number. A positive integer x is called composite if there exists a positive integer y such that 1 < y < x and x is divisible by y.\n\nIf there are multiple subsets with this largest size with the composite sum, you can output any of them. It can be proven that under the constraints of the problem such a non-empty subset always exists.\n\nInput\n\nEach test consists of multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (3 ≤ n ≤ 100) — the length of the array.\n\nThe second line of each test case contains n distinct integers a_{1},a_{2},...,a_{n} (1 ≤ a_{i} ≤ 200) — the elements of the array.\n\nOutput\n\nEach test case should have two lines of output.\n\nThe first line should contain a single integer x: the size of the largest subset with composite sum. The next line should contain x space separated integers representing the indices of the subset of the initial array.\n\nExample\n\nInput\n\n\n4\n3\n8 1 2\n4\n6 9 4 2\n9\n1 2 3 4 5 6 7 8 9\n3\n200 199 198\n\n\nOutput\n\n\n2\n2 1\n4\n2 1 4 3\n9\n6 9 1 2 3 4 5 7 8\n3\n1 2 3 \n\nNote\n\nIn the first test case, the subset \\\\{a_2, a_1\\} has a sum of 9, which is a composite number. The only subset of size 3 has a prime sum equal to 11. Note that you could also have selected the subset \\\\{a_1, a_3\\} with sum 8 + 2 = 10, which is composite as it's divisible by 2.\n\nIn the second test case, the sum of all elements equals to 21, which is a composite number. Here we simply take the whole array as our subset.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.044173444975737}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.229923856463923}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.09203093230025}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.503085112171821}, {"name": "deepseek-coder-33b-instruct", "score": -6.154832615984849}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.2829991888752525}, {"name": "Codestral-22B-v0.1", "score": -6.48074983463577}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.810085116608317}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/37", "prompt": "# Omkar and Heavenly Tree\n\nLord Omkar would like to have a tree with n nodes (3 ≤ n ≤ 10^5) and has asked his disciples to construct the tree. However, Lord Omkar has created m (1 ≤ m < n) restrictions to ensure that the tree will be as heavenly as possible. \n\nA tree with n nodes is an connected undirected graph with n nodes and n-1 edges. Note that for any two nodes, there is exactly one simple path between them, where a simple path is a path between two nodes that does not contain any node more than once.\n\nHere is an example of a tree: \n\n<image>\n\nA restriction consists of 3 pairwise distinct integers, a, b, and c (1 ≤ a,b,c ≤ n). It signifies that node b cannot lie on the simple path between node a and node c. \n\nCan you help Lord Omkar and become his most trusted disciple? You will need to find heavenly trees for multiple sets of restrictions. It can be shown that a heavenly tree will always exist for any set of restrictions under the given constraints.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 ≤ n ≤ 10^5, 1 ≤ m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 ≤ a_i, b_i, c_i ≤ n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 ≤ u, v ≤ n, u ≠ v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\nExample\n\nInput\n\n\n2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n\n\nOutput\n\n\n1 2\n1 3\n3 5\n3 4\n2 7\n7 6\n5 1\n1 3\n3 2\n2 4\n\nNote\n\nThe output of the first sample case corresponds to the following tree: \n\n<image> For the first restriction, the simple path between 1 and 3 is 1, 3, which doesn't contain 2. The simple path between 3 and 5 is 3, 5, which doesn't contain 4. The simple path between 5 and 7 is 5, 3, 1, 2, 7, which doesn't contain 6. The simple path between 6 and 4 is 6, 7, 2, 1, 3, 4, which doesn't contain 5. Thus, this tree meets all of the restrictions.\n\nThe output of the second sample case corresponds to the following tree: \n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.9756360984892165}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.312408567793011}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.966808790555702}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.368477556453661}, {"name": "deepseek-coder-33b-instruct", "score": -6.265156715606487}, {"name": "Codestral-22B-v0.1", "score": -6.31792252226108}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.321774981615386}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.705656991628946}], "rank": [0, 1, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/38", "prompt": "# Omkar and Determination\n\nThe problem statement looms below, filling you with determination.\n\nConsider a grid in which some cells are empty and some cells are filled. Call a cell in this grid exitable if, starting at that cell, you can exit the grid by moving up and left through only empty cells. This includes the cell itself, so all filled in cells are not exitable. Note that you can exit the grid from any leftmost empty cell (cell in the first column) by going left, and from any topmost empty cell (cell in the first row) by going up.\n\nLet's call a grid determinable if, given only which cells are exitable, we can exactly determine which cells are filled in and which aren't.\n\nYou are given a grid a of dimensions n × m , i. e. a grid with n rows and m columns. You need to answer q queries (1 ≤ q ≤ 2 ⋅ 10^5). Each query gives two integers x_1, x_2 (1 ≤ x_1 ≤ x_2 ≤ m) and asks whether the subgrid of a consisting of the columns x_1, x_1 + 1, …, x_2 - 1, x_2 is determinable.\n\nInput\n\nThe first line contains two integers n, m (1 ≤ n, m ≤ 10^6, nm ≤ 10^6) — the dimensions of the grid a.\n\nn lines follow. The y-th line contains m characters, the x-th of which is 'X' if the cell on the intersection of the the y-th row and x-th column is filled and \".\" if it is empty.\n\nThe next line contains a single integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries.\n\nq lines follow. Each line contains two integers x_1 and x_2 (1 ≤ x_1 ≤ x_2 ≤ m), representing a query asking whether the subgrid of a containing the columns x_1, x_1 + 1, …, x_2 - 1, x_2 is determinable.\n\nOutput\n\nFor each query, output one line containing \"YES\" if the subgrid specified by the query is determinable and \"NO\" otherwise. The output is case insensitive (so \"yEs\" and \"No\" will also be accepted).\n\nExample\n\nInput\n\n\n4 5\n..XXX\n...X.\n...X.\n...X.\n5\n1 3\n3 3\n4 5\n5 5\n1 5\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nNO\n\nNote\n\nFor each query of the example, the corresponding subgrid is displayed twice below: first in its input format, then with each cell marked as \"E\" if it is exitable and \"N\" otherwise.\n\nFor the first query: \n    \n    \n      \n    ..X EEN  \n    ... EEE  \n    ... EEE  \n    ... EEE  \n    \n    \n    \n      \n      \n    \n\nFor the second query: \n    \n    \n      \n    X N  \n    . E  \n    . E  \n    . E  \n    \n\nNote that you can exit the grid by going left from any leftmost cell (or up from any topmost cell); you do not need to reach the top left corner cell to exit the grid.\n    \n    \n      \n      \n    \n\nFor the third query: \n    \n    \n      \n    XX NN  \n    X. NN  \n    X. NN  \n    X. NN  \n    \n\nThis subgrid cannot be determined only from whether each cell is exitable, because the below grid produces the above \"exitability grid\" as well: \n    \n    \n      \n    XX  \n    XX  \n    XX  \n    XX  \n    \n    \n    \n      \n      \n    \n\nFor the fourth query: \n    \n    \n      \n    X N  \n    . E  \n    . E  \n    . E  \n    \n    \n    \n      \n      \n    \n\nFor the fifth query: \n    \n    \n      \n    ..XXX EENNN  \n    ...X. EEENN  \n    ...X. EEENN  \n    ...X. EEENN  \n    \n\nThis query is simply the entire grid. It cannot be determined only from whether each cell is exitable because the below grid produces the above \"exitability grid\" as well: \n    \n    \n      \n    ..XXX  \n    ...XX  \n    ...XX  \n    ...XX  \n    \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.943056448008319}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.576935306973308}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.227551495654709}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.392080896360199}, {"name": "deepseek-coder-33b-instruct", "score": -6.213535523419219}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.428195737090145}, {"name": "Codestral-22B-v0.1", "score": -6.820005447583971}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.7784024110568195}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/39", "prompt": "# Omkar and the Meaning of Life\n\nIt turns out that the meaning of life is a permutation p_1, p_2, …, p_n of the integers 1, 2, …, n (2 ≤ n ≤ 100). Omkar, having created all life, knows this permutation, and will allow you to figure it out using some queries.\n\nA query consists of an array a_1, a_2, …, a_n of integers between 1 and n. a is not required to be a permutation. Omkar will first compute the pairwise sum of a and p, meaning that he will compute an array s where s_j = p_j + a_j for all j = 1, 2, …, n. Then, he will find the smallest index k such that s_k occurs more than once in s, and answer with k. If there is no such index k, then he will answer with 0.\n\nYou can perform at most 2n queries. Figure out the meaning of life p.\n\nInteraction\n\nStart the interaction by reading single integer n (2 ≤ n ≤ 100) — the length of the permutation p.\n\nYou can then make queries. A query consists of a single line \"? \\enspace a_1 \\enspace a_2 \\enspace … \\enspace a_n\" (1 ≤ a_j ≤ n).\n\nThe answer to each query will be a single integer k as described above (0 ≤ k ≤ n).\n\nAfter making a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nTo output your answer, print a single line \"! \\enspace p_1 \\enspace p_2 \\enspace … \\enspace p_n\" then terminate.\n\nYou can make at most 2n queries. Outputting the answer does not count as a query.\n\nHack Format\n\nTo hack, first output a line containing n (2 ≤ n ≤ 100), then output another line containing the hidden permutation p_1, p_2, …, p_n of numbers from 1 to n.\n\nExample\n\nInput\n\n\n5\n\n2\n\n0\n\n1\n\n\nOutput\n\n\n\n? 4 4 2 3 2\n\n? 3 5 1 5 5\n\n? 5 2 4 3 1\n\n! 3 2 1 5 4\n\nNote\n\nIn the sample, the hidden permutation p is [3, 2, 1, 5, 4]. Three queries were made.\n\nThe first query is a = [4, 4, 2, 3, 2]. This yields s = [3 + 4, 2 + 4, 1 + 2, 5 + 3, 4 + 2] = [7, 6, 3, 8, 6]. 6 is the only number that appears more than once, and it appears first at index 2, making the answer to the query 2.\n\nThe second query is a = [3, 5, 1, 5, 5]. This yields s = [3 + 3, 2 + 5, 1 + 1, 5 + 5, 4 + 5] = [6, 7, 2, 10, 9]. There are no numbers that appear more than once here, so the answer to the query is 0.\n\nThe third query is a = [5, 2, 4, 3, 1]. This yields s = [3 + 5, 2 + 2, 1 + 4, 5 + 3, 4 + 1] = [8, 4, 5, 8, 5]. 5 and 8 both occur more than once here. 5 first appears at index 3, while 8 first appears at index 1, and 1 < 3, making the answer to the query 1.\n\nNote that the sample is only meant to provide an example of how the interaction works; it is not guaranteed that the above queries represent a correct strategy with which to determine the answer.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5186840771178223}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8269007520113107}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.054613901268466}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.100841561982405}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.064417566846571}, {"name": "deepseek-coder-33b-instruct", "score": -6.2423788953675485}, {"name": "Codestral-22B-v0.1", "score": -6.4842382102662235}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/40", "prompt": "# Moment of Bloom\n\nShe does her utmost to flawlessly carry out a person's last rites and preserve the world's balance of yin and yang.\n\nHu Tao, being the little prankster she is, has tried to scare you with this graph problem! You are given a connected undirected graph of n nodes with m edges. You also have q queries. Each query consists of two nodes a and b.\n\nInitially, all edges in the graph have a weight of 0. For each query, you must choose a simple path starting from a and ending at b. Then you add 1 to every edge along this path. Determine if it's possible, after processing all q queries, for all edges in this graph to have an even weight. If so, output the choice of paths for each query. \n\nIf it is not possible, determine the smallest number of extra queries you could add to make it possible. It can be shown that this number will not exceed 10^{18} under the given constraints.\n\nA simple path is defined as any path that does not visit a node more than once.\n\nAn edge is said to have an even weight if its value is divisible by 2.\n\nInput\n\nThe first line contains two integers n and m (2 ≤ n ≤ 3 ⋅ 10^5, n-1 ≤ m ≤ min{\\left((n(n-1))/(2), 3 ⋅ 10^5\\right)}).\n\nEach of the next m lines contains two integers x and y (1 ≤ x, y ≤ n, x≠ y) indicating an undirected edge between node x and y. The input will not contain self-loops or duplicate edges, and the provided graph will be connected.\n\nThe next line contains a single integer q (1 ≤ q ≤ 3 ⋅ 10^5).\n\nEach of the next q lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b), the description of each query.\n\nIt is guaranteed that nq ≤ 3 ⋅ 10^5.\n\nOutput\n\nIf it is possible to force all edge weights to be even, print \"YES\" on the first line, followed by 2q lines indicating the choice of path for each query in the same order the queries are given. For each query, the first line should contain a single integer x: the number of nodes in the chosen path. The next line should then contain x spaced separated integers p_i indicating the path you take (p_1 = a, p_x = b and all numbers should fall between 1 and n). This path cannot contain duplicate nodes and must be a valid simple path in the graph.\n\nIf it is impossible to force all edge weights to be even, print \"NO\" on the first line and the minimum number of added queries on the second line.\n\nExamples\n\nInput\n\n\n6 7\n2 1\n2 3\n3 5\n1 4\n6 1\n5 6\n4 5\n3\n1 4\n5 1\n4 5\n\n\nOutput\n\n\nYES\n2\n1 4\n4\n5 3 2 1\n5\n4 1 2 3 5\n\n\nInput\n\n\n5 7\n4 3\n4 5\n2 1\n1 4\n1 3\n3 5\n3 2\n4\n4 2\n3 5\n5 1\n4 5\n\n\nOutput\n\n\nNO\n2\n\nNote\n\nHere is what the queries look like for the first test case (red corresponds to the 1st query, blue 2nd query, and green 3rd query): \n\n<image> Notice that every edge in the graph is part of either 0 or 2 colored query edges.\n\nThe graph in the second test case looks like this: \n\n<image> There does not exist an assignment of paths that will force all edges to have even weights with the given queries. One must add at least 2 new queries to obtain a set of queries that can satisfy the condition.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.306009148249966}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.662721855826096}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.383246577333342}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.845212590074079}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.489326504482114}, {"name": "deepseek-coder-33b-instruct", "score": -6.607158165263109}, {"name": "Codestral-22B-v0.1", "score": -6.828062510072888}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.529827421850806}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/41", "prompt": "# Defender of Childhood Dreams\n\nEven if you just leave them be, they will fall to pieces all by themselves. So, someone has to protect them, right?\n\nYou find yourself playing with Teucer again in the city of Liyue. As you take the eccentric little kid around, you notice something interesting about the structure of the city.\n\nLiyue can be represented as a directed graph containing n nodes. Nodes are labeled from 1 to n. There is a directed edge from node a to node b if and only if a < b.\n\nA path between nodes a and b is defined as a sequence of edges such that you can start at a, travel along all of these edges in the corresponding direction, and end at b. The length of a path is defined by the number of edges. A rainbow path of length x is defined as a path in the graph such that there exists at least 2 distinct colors among the set of x edges.\n\nTeucer's favorite number is k. You are curious about the following scenario: If you were to label each edge with a color, what is the minimum number of colors needed to ensure that all paths of length k or longer are rainbow paths?\n\nTeucer wants to surprise his older brother with a map of Liyue. He also wants to know a valid coloring of edges that uses the minimum number of colors. Please help him with this task!\n\nInput\n\nThe only line of input contains two integers n and k (2 ≤ k < n ≤ 1000). \n\nOutput\n\nOn the first line, output c, the minimum colors you need to satisfy the above requirements.\n\nOn the second line, print a valid edge coloring as an array of (n(n-1))/(2) integers ranging from 1 to c. Exactly c distinct colors should exist in the construction. Print the edges in increasing order by the start node first, then by the second node.\n\nFor example, if n=4, the edge colors will correspond to this order of edges: (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)\n\nExamples\n\nInput\n\n\n5 3\n\n\nOutput\n\n\n2\n1 2 2 2 2 2 2 1 1 1\n\n\nInput\n\n\n5 2\n\n\nOutput\n\n\n3\n3 2 2 1 2 2 1 3 1 1 \n\n\nInput\n\n\n8 7\n\n\nOutput\n\n\n2\n2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nInput\n\n\n3 2\n\n\nOutput\n\n\n2\n1 2 2 \n\nNote\n\nThe corresponding construction for the first test case looks like this: \n\n<image> It is impossible to satisfy the constraints with less than 2 colors.\n\nThe corresponding construction for the second test case looks like this: \n\n<image> One can show there exists no construction using less than 3 colors.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6743747679110546}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.261608881194742}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.707148990099507}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.342295973720247}, {"name": "deepseek-coder-33b-instruct", "score": -5.974755729044718}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.111165741920269}, {"name": "Codestral-22B-v0.1", "score": -6.2665931534881425}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.583424607859784}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/42", "prompt": "# Omkar and Time Travel\n\nEl Psy Kongroo.\n\nOmkar is watching Steins;Gate.\n\nIn Steins;Gate, Okabe Rintarou needs to complete n tasks (1 ≤ n ≤ 2 ⋅ 10^5). Unfortunately, he doesn't know when he needs to complete the tasks.\n\nInitially, the time is 0. Time travel will now happen according to the following rules:\n\n  * For each k = 1, 2, …, n, Okabe will realize at time b_k that he was supposed to complete the k-th task at time a_k (a_k < b_k). \n\n  * When he realizes this, if k-th task was already completed at time a_k, Okabe keeps the usual flow of time. Otherwise, he time travels to time a_k then immediately completes the task.\n\n  * If Okabe time travels to time a_k, all tasks completed after this time will become incomplete again. That is, for every j, if a_j>a_k, the j-th task will become incomplete, if it was complete (if it was incomplete, nothing will change).\n\n  * Okabe has bad memory, so he can time travel to time a_k only immediately after getting to time b_k and learning that he was supposed to complete the k-th task at time a_k. That is, even if Okabe already had to perform k-th task before, he wouldn't remember it before stumbling on the info about this task at time b_k again.\n\n\n\n\nPlease refer to the notes for an example of time travelling.\n\nThere is a certain set s of tasks such that the first moment that all of the tasks in s are simultaneously completed (regardless of whether any other tasks are currently completed), a funny scene will take place. Omkar loves this scene and wants to know how many times Okabe will time travel before this scene takes place. Find this number modulo 10^9 + 7. It can be proven that eventually all n tasks will be completed and so the answer always exists.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of tasks that Okabe needs to complete.\n\nn lines follow. The k-th of these lines contain two integers a_k and b_k (1 ≤ a_k < b_k ≤ 2n) — the time at which Okabe needs to complete the k-th task and the time that he realizes this respectively. All 2n of these times are distinct (so every time from 1 to 2n inclusive appears exactly once in the input).\n\nThe next line contains a single integer t (1 ≤ t ≤ n) — the size of the set s of tasks that lead to the funny scene.\n\nThe last line contains t integers s_1, s_2, …, s_t — (1 ≤ s_k ≤ n, the numbers s_1, s_2, …, s_t are distinct) — the set s of tasks.\n\nOutput\n\nOutput a single integer — the number of times that Okabe time travels until all tasks in the set s are simultaneously completed, modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n2\n1 4\n2 3\n2\n1 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n2\n1 4\n2 3\n1\n1\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n1\n1 2\n1\n1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n6\n10 12\n3 7\n4 6\n2 9\n5 8\n1 11\n3\n2 4 6\n\n\nOutput\n\n\n17\n\n\nInput\n\n\n16\n31 32\n3 26\n17 19\n4 24\n1 28\n15 21\n12 16\n18 29\n20 23\n7 8\n11 14\n9 22\n6 30\n5 10\n25 27\n2 13\n6\n3 8 2 5 12 11\n\n\nOutput\n\n\n138\n\nNote\n\nFor the first sample, all tasks need to be completed in order for the funny scene to occur.\n\nInitially, the time is 0. Nothing happens until time 3, when Okabe realizes that he should have done the 2-nd task at time 2. He then time travels to time 2 and completes the task.\n\nAs the task is done now, he does not time travel again when the time is again 3. However, at time 4, he travels to time 1 to complete the 1-st task.\n\nThis undoes the 2-nd task. This means that the 2-nd task is not currently completed, meaning that the funny scene will not occur at this point even though the 1-st task is currently completed and Okabe had previously completed the 2-nd task.\n\nOnce it is again time 3 he travels back to time 2 once more and does the 2-nd task again.\n\nNow all tasks are complete, with Okabe having time travelled 3 times.\n\nThe second sample has the same tasks for Okabe to complete. However, this time the funny scene only needs the first task to be completed in order to occur. From reading the above sample you can see that this occurs once Okabe has time travelled 2 times.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.93213930901297}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.373893651443693}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.30270771484933}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.373165065036758}, {"name": "deepseek-coder-33b-instruct", "score": -6.232526598924537}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.45911541077012}, {"name": "Codestral-22B-v0.1", "score": -6.61362579993464}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.605615336470586}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/43", "prompt": "# Omkar and Tours\n\nOmkar is hosting tours of his country, Omkarland! There are n cities in Omkarland, and, rather curiously, there are exactly n-1 bidirectional roads connecting the cities to each other. It is guaranteed that you can reach any city from any other city through the road network.\n\nEvery city has an enjoyment value e. Each road has a capacity c, denoting the maximum number of vehicles that can be on it, and an associated toll t. However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. (In other words, they pay max t over all the roads on which they traveled.) If a vehicle traverses no roads, they pay 0 toll.\n\nOmkar has decided to host q tour groups. Each tour group consists of v vehicles starting at city x. (Keep in mind that a tour group with v vehicles can travel only on roads with capacity ≥ v.) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city y with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from x to y? (This trip from x to y will always be on the shortest path from x to y.)\n\nIn the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee that he can reimburse the group regardless of which city they choose.\n\nInput\n\nThe first line contains two integers n and q (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ q ≤ 2 ⋅ 10^5), representing the number of cities and the number of groups, respectively.\n\nThe next line contains n integers e_1, e_2, …, e_n (1 ≤ e_i ≤ 10^9), where e_i represents the enjoyment value for city i.\n\nThe next n-1 lines each contain four integers a, b, c, and t (1 ≤ a,b ≤ n, 1 ≤ c ≤ 10^9, 1 ≤ t ≤ 10^9), representing an road between city a and city b with capacity c and toll t.\n\nThe next q lines each contain two integers v and x (1 ≤ v ≤ 10^9, 1 ≤ x ≤ n), representing the number of vehicles in the tour group and the starting city, respectively.\n\nOutput\n\nOutput q lines. The i-th line should contain two integers: the highest possible enjoyment value of a city reachable by the i-th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i-th tour group.\n\nExamples\n\nInput\n\n\n5 3\n2 2 3 3 3\n1 2 4 7\n1 3 2 8\n2 4 8 2\n2 5 1 1\n1 3\n9 5\n6 2\n\n\nOutput\n\n\n3 8\n3 0\n3 2\n\n\nInput\n\n\n5 5\n1 2 3 4 5\n1 2 4 1\n1 3 3 1\n1 4 2 1\n2 5 1 1\n5 1\n4 1\n3 1\n2 1\n1 1\n\n\nOutput\n\n\n1 0\n2 1\n3 1\n4 1\n5 1\n\n\nInput\n\n\n5 5\n1 2 2 2 2\n1 2 5 8\n1 3 6 3\n1 4 4 5\n1 5 7 1\n4 1\n5 1\n6 1\n7 1\n8 1\n\n\nOutput\n\n\n2 8\n2 8\n2 3\n2 1\n1 0\n\nNote\n\nA map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls.\n\n<image>\n\nFor the first query, a tour group of size 1 starting at city 3 can reach cities 1, 2, 3, 4, and 5. Thus, the largest enjoyment value that they can reach is 3. If the tour group chooses to go to city 4, Omkar will have to pay 8 per vehicle, which is the maximum.\n\nFor the second query, a tour group of size 9 starting at city 5 can reach only city 5. Thus, the largest reachable enjoyment value is still 3, and Omkar will pay 0 per vehicle.\n\nFor the third query, a tour group of size 6 starting at city 2 can reach cities 2 and 4. The largest reachable enjoyment value is again 3. If the tour group chooses to go to city 4, Omkar will have to pay 2 per vehicle, which is the maximum.\n\nA map of the second sample is shown below:\n\n<image>\n\nFor the first query, a tour group of size 5 starting at city 1 can only reach city 1. Thus, their maximum enjoyment value is 1 and the cost Omkar will have to pay is 0 per vehicle.\n\nFor the second query, a tour group of size 4 starting at city 1 can reach cities 1 and 2. Thus, their maximum enjoyment value is 2 and Omkar will pay 1 per vehicle.\n\nFor the third query, a tour group of size 3 starting at city 1 can reach cities 1, 2, and 3. Thus, their maximum enjoyment value is 3 and Omkar will pay 1 per vehicle.\n\nFor the fourth query, a tour group of size 2 starting at city 1 can reach cities 1, 2, 3 and 4. Thus, their maximum enjoyment value is 4 and Omkar will pay 1 per vehicle.\n\nFor the fifth query, a tour group of size 1 starting at city 1 can reach cities 1, 2, 3, 4, and 5. Thus, their maximum enjoyment value is 5 and Omkar will pay 1 per vehicle.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -3.3492582132774573}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.269865267785551}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.490028658475159}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.676370167045864}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.819857385631229}, {"name": "deepseek-coder-33b-instruct", "score": -6.560119359694074}, {"name": "Codestral-22B-v0.1", "score": -6.93379332753091}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.688605597210112}], "rank": [4, 0, 1, 3, 2, 6, 5, 7]}
{"id": "code_contests/44", "prompt": "# Omkar and Mosaic\n\nOmkar is creating a mosaic using colored square tiles, which he places in an n × n grid. When the mosaic is complete, each cell in the grid will have either a glaucous or sinoper tile. However, currently he has only placed tiles in some cells. \n\nA completed mosaic will be a mastapeece if and only if each tile is adjacent to exactly 2 tiles of the same color (2 tiles are adjacent if they share a side.) Omkar wants to fill the rest of the tiles so that the mosaic becomes a mastapeece. Now he is wondering, is the way to do this unique, and if it is, what is it?\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 2000).\n\nThen follow n lines with n characters in each line. The i-th character in the j-th line corresponds to the cell in row i and column j of the grid, and will be S if Omkar has placed a sinoper tile in this cell, G if Omkar has placed a glaucous tile, . if it's empty. \n\nOutput\n\nOn the first line, print UNIQUE if there is a unique way to get a mastapeece, NONE if Omkar cannot create any, and MULTIPLE if there is more than one way to do so. All letters must be uppercase.\n\nIf you print UNIQUE, then print n additional lines with n characters in each line, such that the i-th character in the j^{th} line is S if the tile in row i and column j of the mastapeece is sinoper, and G if it is glaucous. \n\nExamples\n\nInput\n\n\n4\nS...\n..G.\n....\n...S\n\n\nOutput\n\n\nMULTIPLE\n\n\nInput\n\n\n6\nS.....\n....G.\n..S...\n.....S\n....G.\nG.....\n\n\nOutput\n\n\nNONE\n\n\nInput\n\n\n10\n.S....S...\n..........\n...SSS....\n..........\n..........\n...GS.....\n....G...G.\n..........\n......G...\n..........\n\n\nOutput\n\n\nUNIQUE\nSSSSSSSSSS\nSGGGGGGGGS\nSGSSSSSSGS\nSGSGGGGSGS\nSGSGSSGSGS\nSGSGSSGSGS\nSGSGGGGSGS\nSGSSSSSSGS\nSGGGGGGGGS\nSSSSSSSSSS\n\n\nInput\n\n\n1\n.\n\n\nOutput\n\n\nNONE\n\nNote\n\nFor the first test case, Omkar can make the mastapeeces\n\nSSSS\n\nSGGS\n\nSGGS\n\nSSSS\n\nand \n\nSSGG\n\nSSGG\n\nGGSS\n\nGGSS.\n\nFor the second test case, it can be proven that it is impossible for Omkar to add tiles to create a mastapeece.\n\nFor the third case, it can be proven that the given mastapeece is the only mastapeece Omkar can create by adding tiles.\n\nFor the fourth test case, it's clearly impossible for the only tile in any mosaic Omkar creates to be adjacent to two tiles of the same color, as it will be adjacent to 0 tiles total. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.388257184424518}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.394152814471722}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.73853166698302}, {"name": "CodeLlama-7b-Instruct-hf", "score": -6.070201787645366}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.558027575558474}, {"name": "Codestral-22B-v0.1", "score": -6.608513314361406}, {"name": "deepseek-coder-33b-instruct", "score": -6.623698626745396}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.387444352516543}], "rank": [1, 0, 3, 2, 4, 5, 6, 7]}
{"id": "code_contests/45", "prompt": "# Life of a Flower\n\nPetya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 ≤ n ≤ 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k — the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.3321813589955127}, {"name": "Codestral-22B-v0.1", "score": -0.7514248672144328}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.280911215787653}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.94359918886289}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.188625748851173}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.2512257590141855}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.435484641334882}, {"name": "deepseek-coder-33b-instruct", "score": -5.8017436828320825}], "rank": [4, 5, 0, 1, 7, 3, 2, 6]}
{"id": "code_contests/46", "prompt": "# Array Eversion\n\nYou are given an array a of length n.\n\nLet's define the eversion operation. Let x = a_n. Then array a is partitioned into two parts: left and right. The left part contains the elements of a that are not greater than x (≤ x). The right part contains the elements of a that are strictly greater than x (> x). The order of elements in each part is kept the same as before the operation, i. e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts.\n\nFor example, if the array a is [2, 4, 1, 5, 3], the eversion goes like this: [2, 4, 1, 5, 3] → [2, 1, 3], [4, 5] → [2, 1, 3, 4, 5].\n\nWe start with the array a and perform eversions on this array. We can prove that after several eversions the array a stops changing. Output the minimum number k such that the array stops changing after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case print a single integer k — the number of eversions after which the array stops changing.\n\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] → [2, 1, 3], [4, 5] → [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] → [2, 1, 3, 4, 5], [] → [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] → [1], [5, 3, 2, 4] → [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] → [1, 3, 2, 4], [5] → [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] → [1, 3, 2, 4, 5], [] → [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.444639939504992}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.575312802153989}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.876851682416705}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.419608108116098}, {"name": "deepseek-coder-33b-instruct", "score": -4.624544511048544}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.208764581095724}, {"name": "Codestral-22B-v0.1", "score": -6.179581776498513}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.731800610470385}], "rank": [0, 3, 1, 4, 6, 2, 5, 7]}
{"id": "code_contests/47", "prompt": "# Minimize Distance\n\nA total of n depots are located on a number line. Depot i lies at the point x_i for 1 ≤ i ≤ n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, …, x_n (-10^9 ≤ x_i ≤ 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 → 2 → 0 → 4 → 0 → 3 → 0 → 1 → 0 → 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 → 6 → 8 → 7 → 0 → 5 → 4 → 3 → 0 → (-5) → (-10) → (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.349061627241627}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.853970073979529}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.623088686490436}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.182232887527235}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.155825778524943}, {"name": "Codestral-22B-v0.1", "score": -6.176428443180024}, {"name": "deepseek-coder-33b-instruct", "score": -6.250677698182243}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "code_contests/48", "prompt": "# Yet Another Sorting Problem\n\nPetya has an array of integers a_1, a_2, …, a_n. He only likes sorted arrays. Unfortunately, the given array could be arbitrary, so Petya wants to sort it.\n\nPetya likes to challenge himself, so he wants to sort array using only 3-cycles. More formally, in one operation he can pick 3 pairwise distinct indices i, j, and k (1 ≤ i, j, k ≤ n) and apply i → j → k → i cycle to the array a. It simultaneously places a_i on position j, a_j on position k, and a_k on position i, without changing any other element.\n\nFor example, if a is [10, 50, 20, 30, 40, 60] and he chooses i = 2, j = 1, k = 5, then the array becomes [\\underline{50}, \\underline{40}, 20, 30, \\underline{10}, 60].\n\nPetya can apply arbitrary number of 3-cycles (possibly, zero). You are to determine if Petya can sort his array a, i. e. make it non-decreasing.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 5 ⋅ 10^5). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 5 ⋅ 10^5) — the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5 ⋅ 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if Petya can sort the array a using 3-cycles, and \"NO\" (without quotes) otherwise. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n7\n1\n1\n2\n2 2\n2\n2 1\n3\n1 2 3\n3\n2 1 3\n3\n3 1 2\n4\n2 1 4 3\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nNO\nYES\nYES\n\nNote\n\nIn the 6-th test case Petya can use the 3-cycle 1 → 3 → 2 → 1 to sort the array.\n\nIn the 7-th test case Petya can apply 1 → 3 → 2 → 1 and make a = [1, 4, 2, 3]. Then he can apply 2 → 4 → 3 → 2 and finally sort the array.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.139832617527748}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8929625026894037}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.984701912069751}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.252734054926071}, {"name": "deepseek-coder-33b-instruct", "score": -5.959911958594875}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.055340348695455}, {"name": "Codestral-22B-v0.1", "score": -6.42629426384605}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.945039502965367}], "rank": [0, 1, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/49", "prompt": "# Frequency Queries\n\nPetya has a rooted tree with an integer written on each vertex. The vertex 1 is the root. You are to answer some questions about the tree.\n\nA tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a node v is the next vertex on the shortest path from v to the root.\n\nEach question is defined by three integers v, l, and k. To get the answer to the question, you need to perform the following steps: \n\n  * First, write down the sequence of all integers written on the shortest path from the vertex v to the root (including those written in the v and the root). \n  * Count the number of times each integer occurs. Remove all integers with less than l occurrences. \n  * Replace the sequence, removing all duplicates and ordering the elements by the number of occurrences in the original list in increasing order. In case of a tie, you can choose the order of these elements arbitrary. \n  * The answer to the question is the k-th number in the remaining sequence. Note that the answer is not always uniquely determined, because there could be several orderings. Also, it is possible that the length of the sequence on this step is less than k, in this case the answer is -1. \n\n\n\nFor example, if the sequence of integers on the path from v to the root is [2, 2, 1, 7, 1, 1, 4, 4, 4, 4], l = 2 and k = 2, then the answer is 1.\n\nPlease answer all questions about the tree.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^6). Description of the test cases follows.\n\nThe first line of each test case contains two integers n, q (1 ≤ n, q ≤ 10^6) — the number of vertices in the tree and the number of questions.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n), where a_i is the number written on the i-th vertex.\n\nThe third line contains n-1 integers p_2, p_3, …, p_n (1 ≤ p_i ≤ n), where p_i is the parent of node i. It's guaranteed that the values p define a correct tree.\n\nEach of the next q lines contains three integers v, l, k (1 ≤ v, l, k ≤ n) — descriptions of questions.\n\nIt is guaranteed that the sum of n and the sum of q over all test cases do not exceed 10^6.\n\nOutput\n\nFor each question of each test case print the answer to the question. In case of multiple answers, print any.\n\nExample\n\nInput\n\n\n2\n3 3\n1 1 1\n1 2\n3 1 1\n3 1 2\n3 2 1\n5 5\n1 2 1 1 2\n1 1 2 2\n3 1 1\n2 1 2\n4 1 1\n4 2 1\n4 2 2\n\n\nOutput\n\n\n1 -1 1 \n1 1 2 1 -1 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.157694877722863}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.4034456020471815}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.57412926642933}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.787682349272392}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.331558787774479}, {"name": "deepseek-coder-33b-instruct", "score": -6.480314464150077}, {"name": "Codestral-22B-v0.1", "score": -6.696293232441765}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [1, 0, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/50", "prompt": "# Non-equal Neighbours\n\nYou are given an array of n positive integers a_1, a_2, …, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, …, b_n such that: \n\n  * 1 ≤ b_i ≤ a_i for every i (1 ≤ i ≤ n), and \n  * b_i ≠ b_{i+1} for every i (1 ≤ i ≤ n - 1). \n\n\n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.3140405395475327}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.230331271421687}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.471958742174489}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.766472375557971}, {"name": "deepseek-coder-33b-instruct", "score": -6.010001668106393}, {"name": "Codestral-22B-v0.1", "score": -6.170489007782641}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.345804767699994}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.712667422872903}], "rank": [0, 1, 2, 3, 6, 5, 4, 7]}
{"id": "code_contests/51", "prompt": "# Consecutive Sum Riddle\n\nTheofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} ≤ l < r ≤ 10^{18} and l + (l + 1) + … + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 ≤ n ≤ 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} ≤ l < r ≤ 10^{18} and l + (l + 1) + … + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.6290069937617573}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.92608368907648}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.07109048979619}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.044815722604977}, {"name": "deepseek-coder-33b-instruct", "score": -6.152690140607202}, {"name": "Codestral-22B-v0.1", "score": -6.3738998261014554}, {"name": "starcoder2-15b-instruct-v0.1", "score": -6.847597548155139}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.882941959106934}], "rank": [0, 1, 2, 4, 6, 5, 3, 7]}
{"id": "code_contests/52", "prompt": "# Special Numbers\n\nTheofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 ≤ n ≤ 10^9; 1 ≤ k ≤ 10^9).\n\nOutput\n\nFor each test case, print one integer — the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.4061656557676772}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9565373747347894}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.964800757752456}, {"name": "Yi-Coder-1.5B-Chat", "score": -5.045461751248301}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.237738993662103}, {"name": "Codestral-22B-v0.1", "score": -6.498357447846259}, {"name": "deepseek-coder-33b-instruct", "score": -6.767803318554692}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.554018377643109}], "rank": [4, 1, 3, 0, 2, 5, 6, 7]}
{"id": "code_contests/53", "prompt": "# Make Them Equal\n\nTheofanis has a string s_1 s_2 ... s_n and a character c. He wants to make all characters of the string equal to c using the minimum number of operations.\n\nIn one operation he can choose a number x (1 ≤ x ≤ n) and for every position i, where i is not divisible by x, replace s_i with c. \n\nFind the minimum number of operations required to make all the characters equal to c and the x-s that he should use in his operations.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains the integer n (3 ≤ n ≤ 3 ⋅ 10^5) and a lowercase Latin letter c — the length of the string s and the character the resulting string should consist of.\n\nThe second line of each test case contains a string s of lowercase Latin letters — the initial string.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, firstly print one integer m — the minimum number of operations required to make all the characters equal to c.\n\nNext, print m integers x_1, x_2, ..., x_m (1 ≤ x_j ≤ n) — the x-s that should be used in the order they are given.\n\nIt can be proved that under given constraints, an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n3\n4 a\naaaa\n4 a\nbaaa\n4 b\nbzyx\n\n\nOutput\n\n\n0\n1\n2\n2 \n2 3\n\nNote\n\nLet's describe what happens in the third test case: \n\n  1. x_1 = 2: we choose all positions that are not divisible by 2 and replace them, i. e. bzyx → bzbx; \n  2. x_2 = 3: we choose all positions that are not divisible by 3 and replace them, i. e. bzbx → bbbb. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.402662973823765}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.815864465868425}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.478790303106189}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.44821903208588}, {"name": "deepseek-coder-33b-instruct", "score": -6.033834143474491}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.381775407444469}, {"name": "Codestral-22B-v0.1", "score": -6.4366950917755625}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/54", "prompt": "# The Number of Imposters\n\nTheofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus).\n\nIn each game, Theofanis plays with n other players. Since they all have the same name, they are numbered from 1 to n.\n\nThe players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 ≤ i, j ≤ n; i ≠ j; c is either imposter or crewmate). The comment means that player i said that player j has the role c.\n\nAn imposter always lies, and a crewmate always tells the truth. \n\nHelp Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation).\n\nNote that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5; 0 ≤ m ≤ 5 ⋅ 10^5) — the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 ≤ i, j ≤ n; i ≠ j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 ⋅ 10^5 and the sum of all m does not exceed 5 ⋅ 10^5.\n\nOutput\n\nFor each test case, print one integer — the maximum possible number of imposters. If the comments contradict each other, print -1.\n\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.795938526407344}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.0427003290697625}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.170302160325404}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.428871832520108}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.478546507888469}, {"name": "Codestral-22B-v0.1", "score": -6.62276291934086}, {"name": "deepseek-coder-33b-instruct", "score": -6.691954701923185}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.650851951431361}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "code_contests/55", "prompt": "# Rubik's Cube Coloring (easy version)\n\nIt is the easy version of the problem. The difference is that in this version, there are no nodes with already chosen colors.\n\nTheofanis is starving, and he wants to eat his favorite food, sheftalia. However, he should first finish his homework. Can you help him with this problem?\n\nYou have a perfect binary tree of 2^k - 1 nodes — a binary tree where all vertices i from 1 to 2^{k - 1} - 1 have exactly two children: vertices 2i and 2i + 1. Vertices from 2^{k - 1} to 2^k - 1 don't have any children. You want to color its vertices with the 6 Rubik's cube colors (White, Green, Red, Blue, Orange and Yellow).\n\nLet's call a coloring good when all edges connect nodes with colors that are neighboring sides in the Rubik's cube.\n\n<image>| <image>  \n---|---  \nA picture of Rubik's cube and its 2D map.\n\nMore formally: \n\n  * a white node can not be neighboring with white and yellow nodes; \n  * a yellow node can not be neighboring with white and yellow nodes; \n  * a green node can not be neighboring with green and blue nodes; \n  * a blue node can not be neighboring with green and blue nodes; \n  * a red node can not be neighboring with red and orange nodes; \n  * an orange node can not be neighboring with red and orange nodes; \n\n\n\nYou want to calculate the number of the good colorings of the binary tree. Two colorings are considered different if at least one node is colored with a different color.\n\nThe answer may be too large, so output the answer modulo 10^9+7.\n\nInput\n\nThe first and only line contains the integers k (1 ≤ k ≤ 60) — the number of levels in the perfect binary tree you need to color.\n\nOutput\n\nPrint one integer — the number of the different colorings modulo 10^9+7.\n\nExamples\n\nInput\n\n\n3\n\n\nOutput\n\n\n24576\n\n\nInput\n\n\n14\n\n\nOutput\n\n\n934234\n\nNote\n\nIn the picture below, you can see one of the correct colorings of the first example.\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.601467997102967}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.21803603456465}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.196948872159748}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.483036047941712}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.293700200567274}, {"name": "deepseek-coder-33b-instruct", "score": -6.477218486444949}, {"name": "Codestral-22B-v0.1", "score": -6.561285230380545}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.136664576390324}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/56", "prompt": "# Rubik's Cube Coloring (hard version)\n\nIt is the hard version of the problem. The difference is that in this version, there are nodes with already chosen colors.\n\nTheofanis is starving, and he wants to eat his favorite food, sheftalia. However, he should first finish his homework. Can you help him with this problem?\n\nYou have a perfect binary tree of 2^k - 1 nodes — a binary tree where all vertices i from 1 to 2^{k - 1} - 1 have exactly two children: vertices 2i and 2i + 1. Vertices from 2^{k - 1} to 2^k - 1 don't have any children. You want to color its vertices with the 6 Rubik's cube colors (White, Green, Red, Blue, Orange and Yellow).\n\nLet's call a coloring good when all edges connect nodes with colors that are neighboring sides in the Rubik's cube.\n\n<image>| <image>  \n---|---  \nA picture of Rubik's cube and its 2D map.\n\nMore formally: \n\n  * a white node can not be neighboring with white and yellow nodes; \n  * a yellow node can not be neighboring with white and yellow nodes; \n  * a green node can not be neighboring with green and blue nodes; \n  * a blue node can not be neighboring with green and blue nodes; \n  * a red node can not be neighboring with red and orange nodes; \n  * an orange node can not be neighboring with red and orange nodes; \n\n\n\nHowever, there are n special nodes in the tree, colors of which are already chosen.\n\nYou want to calculate the number of the good colorings of the binary tree. Two colorings are considered different if at least one node is colored with a different color.\n\nThe answer may be too large, so output the answer modulo 10^9+7.\n\nInput\n\nThe first line contains the integers k (1 ≤ k ≤ 60) — the number of levels in the perfect binary tree you need to color.\n\nThe second line contains the integer n (1 ≤ n ≤ min(2^k - 1, 2000)) — the number of nodes, colors of which are already chosen.\n\nThe next n lines contains integer v (1 ≤ v ≤ 2^k - 1) and string s — the index of the node and the color of the node (s is one of the white, yellow, green, blue, red and orange).\n\nIt is guaranteed that each node v appears in the input at most once.\n\nOutput\n\nPrint one integer — the number of the different colorings modulo 10^9+7.\n\nExamples\n\nInput\n\n\n3\n2\n5 orange\n2 white\n\n\nOutput\n\n\n1024\n\n\nInput\n\n\n2\n2\n1 white\n2 white\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n10\n3\n1 blue\n4 red\n5 orange\n\n\nOutput\n\n\n328925088\n\nNote\n\nIn the picture below, you can see one of the correct colorings of the first test example.\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.4338123078231115}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.5606747861015275}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.9342891551997905}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.981414211254481}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.987486645738758}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.663959939937055}, {"name": "Codestral-22B-v0.1", "score": -6.73902888770249}, {"name": "deepseek-coder-33b-instruct", "score": -7.123753362135475}], "rank": [0, 1, 7, 3, 2, 4, 5, 6]}
{"id": "code_contests/57", "prompt": "# Ideal Farm\n\nTheofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 ≤ s, n, k ≤ 10^{18}; n ≤ s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\nExample\n\nInput\n\n\n4\n1 1 1\n1 1 2\n100 50 200\n56220 47258 14497\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nFor the first and the second test case, the only possible combination is [1] so there always will be a subsegment with 1 animal but not with 2 animals.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.4338581639017036}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7309806301325716}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.9372901078704405}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.046542832434674}, {"name": "deepseek-coder-33b-instruct", "score": -5.958610722236903}, {"name": "Codestral-22B-v0.1", "score": -6.223845303774674}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.232526598924537}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.709620532291402}], "rank": [1, 0, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/58", "prompt": "# Computer Game\n\nMonocarp is playing a computer game. Now he wants to complete the first level of this game.\n\nA level is a rectangular grid of 2 rows and n columns. Monocarp controls a character, which starts in cell (1, 1) — at the intersection of the 1-st row and the 1-st column.\n\nMonocarp's character can move from one cell to another in one step if the cells are adjacent by side and/or corner. Formally, it is possible to move from cell (x_1, y_1) to cell (x_2, y_2) in one step if |x_1 - x_2| ≤ 1 and |y_1 - y_2| ≤ 1. Obviously, it is prohibited to go outside the grid.\n\nThere are traps in some cells. If Monocarp's character finds himself in such a cell, he dies, and the game ends.\n\nTo complete a level, Monocarp's character should reach cell (2, n) — at the intersection of row 2 and column n.\n\nHelp Monocarp determine if it is possible to complete the level.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Then the test cases follow. Each test case consists of three lines.\n\nThe first line contains a single integer n (3 ≤ n ≤ 100) — the number of columns.\n\nThe next two lines describe the level. The i-th of these lines describes the i-th line of the level — the line consists of the characters '0' and '1'. The character '0' corresponds to a safe cell, the character '1' corresponds to a trap cell.\n\nAdditional constraint on the input: cells (1, 1) and (2, n) are safe.\n\nOutput\n\nFor each test case, output YES if it is possible to complete the level, and NO otherwise.\n\nExample\n\nInput\n\n\n4\n3\n000\n000\n4\n0011\n1100\n4\n0111\n1110\n6\n010101\n101010\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\n\nNote\n\nConsider the example from the statement.\n\nIn the first test case, one of the possible paths is (1, 1) → (2, 2) → (2, 3).\n\nIn the second test case, one of the possible paths is (1, 1) → (1, 2) → (2, 3) → (2, 4).\n\nIn the fourth test case, one of the possible paths is (1, 1) → (2, 2) → (1, 3) → (2, 4) → (1, 5) → (2, 6).\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.4487534819541779}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.1788867939849297}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7376696182833684}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.987933553858629}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.033319860384326}, {"name": "deepseek-coder-33b-instruct", "score": -4.482801812399894}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.358640766531142}, {"name": "Codestral-22B-v0.1", "score": -6.4713875661341556}], "rank": [7, 4, 1, 3, 0, 6, 2, 5]}
{"id": "code_contests/59", "prompt": "# Groups\n\nn students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 ≤ n ≤ 1 000) — the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.833585675113195}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.977211315407214}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.986670416642424}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.29665598722137}, {"name": "deepseek-coder-33b-instruct", "score": -5.989382380903657}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.3338620517485715}, {"name": "Codestral-22B-v0.1", "score": -6.48365765872597}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.403843234861666}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/60", "prompt": "# Delete Two Elements\n\nMonocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThe first line of each testcase contains one integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nPrint one integer — the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.2454540175224826}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.954728092067323}, {"name": "Codestral-22B-v0.1", "score": -3.2947644082083696}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4968711317304377}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.7277189846543886}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9110625443330216}, {"name": "deepseek-coder-33b-instruct", "score": -4.573830605282086}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.8282497352542135}], "rank": [4, 7, 5, 0, 2, 1, 6, 3]}
{"id": "code_contests/61", "prompt": "# Training Session\n\nMonocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 50000) — the number of testcases.\n\nThe first line of each testcase contains an integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 ≤ a_i, b_i ≤ n) — the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.763337365031946}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.089733949664417}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.017491734892742}, {"name": "Codestral-22B-v0.1", "score": -5.224810656429822}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.271398277196773}, {"name": "deepseek-coder-33b-instruct", "score": -6.193147457380556}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.392198480840245}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.33624135936577}], "rank": [0, 1, 2, 5, 3, 6, 4, 7]}
{"id": "code_contests/62", "prompt": "# Staircases\n\nYou are given a matrix, consisting of n rows and m columns. The rows are numbered top to bottom, the columns are numbered left to right.\n\nEach cell of the matrix can be either free or locked.\n\nLet's call a path in the matrix a staircase if it: \n\n  * starts and ends in the free cell; \n  * visits only free cells; \n  * has one of the two following structures: \n    1. the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on; \n    2. the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on. \n\n\n\nIn particular, a path, consisting of a single cell, is considered to be a staircase.\n\nHere are some examples of staircases:\n\n<image>\n\nInitially all the cells of the matrix are free.\n\nYou have to process q queries, each of them flips the state of a single cell. So, if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.\n\nPrint the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nInput\n\nThe first line contains three integers n, m and q (1 ≤ n, m ≤ 1000; 1 ≤ q ≤ 10^4) — the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 ≤ x ≤ n; 1 ≤ y ≤ m) — the description of each query.\n\nOutput\n\nPrint q integers — the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nExamples\n\nInput\n\n\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n\n\nOutput\n\n\n5\n10\n5\n2\n5\n3\n1\n0\n\n\nInput\n\n\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n\n\nOutput\n\n\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n\n\nInput\n\n\n1000 1000 2\n239 634\n239 634\n\n\nOutput\n\n\n1332632508\n1333333000\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9682520986945766}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.354295660935571}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.175132265977658}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.260989261282037}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.596304966575929}, {"name": "deepseek-coder-33b-instruct", "score": -6.683476083067633}, {"name": "Codestral-22B-v0.1", "score": -6.726125482866583}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.688605597210112}], "rank": [1, 0, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/63", "prompt": "# RBS\n\nA bracket sequence is a string containing only characters \"(\" and \")\". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example:\n\n  * bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"); \n  * bracket sequences \")(\", \"(\" and \")\" are not. \n\n\n\nLet's denote the concatenation of two strings x and y as x+y. For example, \"()()\" + \")(\" = \"()())(\".\n\nYou are given n bracket sequences s_1, s_2, ..., s_n. You can rearrange them in any order (you can rearrange only the strings themselves, but not the characters in them).\n\nYour task is to rearrange the strings in such a way that the string s_1 + s_2 + ... + s_n has as many non-empty prefixes that are RBS as possible.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 20).\n\nThen n lines follow, the i-th of them contains s_i — a bracket sequence (a string consisting of characters \"(\" and/or \")\". All sequences s_i are non-empty, their total length does not exceed 4 ⋅ 10^5.\n\nOutput\n\nPrint one integer — the maximum number of non-empty prefixes that are RBS for the string s_1 + s_2 + ... + s_n, if the strings s_1, s_2, ..., s_n can be rearranged arbitrarily.\n\nExamples\n\nInput\n\n\n2\n(\n)\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n4\n()()())\n(\n(\n)\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n1\n(())\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n1\n)(()\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, you can concatenate the strings as follows: \"(\" + \")\" = \"()\", the resulting string will have one prefix, that is an RBS: \"()\".\n\nIn the second example, you can concatenate the strings as follows: \"(\" + \")\" + \"()()())\" + \"(\" = \"()()()())(\", the resulting string will have four prefixes that are RBS: \"()\", \"()()\", \"()()()\", \"()()()()\".\n\nThe third and the fourth examples contain only one string each, so the order is fixed.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.927239277108691}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.024851565693467}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.104344192533606}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.178925537477233}, {"name": "deepseek-coder-33b-instruct", "score": -6.349649350634844}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.364571739108021}, {"name": "Codestral-22B-v0.1", "score": -6.405790283648343}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.3833805769959255}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/64", "prompt": "# The Sum of Good Numbers\n\nLet's call a positive integer good if there is no digit 0 in its decimal representation.\n\nFor an array of a good numbers a, one found out that the sum of some two neighboring elements is equal to x (i.e. x = a_i + a_{i + 1} for some i). x had turned out to be a good number as well.\n\nThen the elements of the array a were written out one after another without separators into one string s. For example, if a = [12, 5, 6, 133], then s = 1256133.\n\nYou are given a string s and a number x. Your task is to determine the positions in the string that correspond to the adjacent elements of the array that have sum x. If there are several possible answers, you can print any of them.\n\nInput\n\nThe first line contains the string s (2 ≤ |s| ≤ 5 ⋅ 10^5).\n\nThe second line contains an integer x (2 ≤ x < 10^{200000}).\n\nAn additional constraint on the input: the answer always exists, i.e you can always select two adjacent substrings of the string s so that if you convert these substrings to integers, their sum is equal to x.\n\nOutput\n\nIn the first line, print two integers l_1, r_1, meaning that the first term of the sum (a_i) is in the string s from position l_1 to position r_1.\n\nIn the second line, print two integers l_2, r_2, meaning that the second term of the sum (a_{i + 1}) is in the string s from position l_2 to position r_2.\n\nExamples\n\nInput\n\n\n1256133\n17\n\n\nOutput\n\n\n1 2\n3 3\n\n\nInput\n\n\n9544715561\n525\n\n\nOutput\n\n\n2 3\n4 6\n\n\nInput\n\n\n239923\n5\n\n\nOutput\n\n\n1 1\n2 2\n\n\nInput\n\n\n1218633757639\n976272\n\n\nOutput\n\n\n2 7\n8 13\n\nNote\n\nIn the first example s[1;2] = 12 and s[3;3] = 5, 12+5=17.\n\nIn the second example s[2;3] = 54 and s[4;6] = 471, 54+471=525.\n\nIn the third example s[1;1] = 2 and s[2;2] = 3, 2+3=5.\n\nIn the fourth example s[2;7] = 218633 and s[8;13] = 757639, 218633+757639=976272.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.2976130654055846}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.5922584155095105}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.630135932005839}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.958499539675727}, {"name": "deepseek-coder-33b-instruct", "score": -6.1233082664127}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.126694496368086}, {"name": "Codestral-22B-v0.1", "score": -6.548032838998016}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.044556320474282}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/65", "prompt": "# Weights\n\nYou are given an array A of length N weights of masses A_1, A_2...A_N. No two weights have the same mass. You can put every weight on one side of the balance (left or right). You don't have to put weights in order A_1,...,A_N. There is also a string S consisting of characters \"L\" and \"R\", meaning that after putting the i-th weight (not A_i, but i-th weight of your choice) left or right side of the balance should be heavier. Find the order of putting the weights on the balance such that rules of string S are satisfied. \n\nInput\n\nThe first line contains one integer N (1 ≤ N ≤ 2*10^5) - the length of the array A The second line contains N distinct integers: A_1, A_2,...,A_N (1 ≤ A_i ≤ 10^9) - the weights given The third line contains string S of length N consisting only of letters \"L\" and \"R\" - string determining which side of the balance should be heavier after putting the i-th weight of your choice\n\nOutput\n\nThe output contains N lines. In every line, you should print one integer and one letter - integer representing the weight you are putting on the balance in that move and the letter representing the side of the balance where you are putting the weight. If there is no solution, print -1.\n\nExample\n\nInput\n\n\n5\n3 8 2 13 7\nLLRLL\n\n\nOutput\n\n\n3 L\n2 R\n8 R\n13 L\n7 L\n\nNote\n\nExplanation for the test case: \n\nafter the 1st weight: 3 L (left side is heavier)\n\nafter the 2nd weight: 2 R (left side is heavier)\n\nafter the 3rd weight: 8 R (right side is heavier)\n\nafter the 4th weight: 13 L (left side is heavier)\n\nafter the 5th weight: 7 L (left side is heavier)\n\nSo, the rules given by string S are fulfilled and our order of putting the weights is correct.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6821569083531096}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.143134726391533}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.754141763100492}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.2110586862541926}, {"name": "deepseek-coder-33b-instruct", "score": -6.004420258268198}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.225429337053775}, {"name": "Codestral-22B-v0.1", "score": -6.2960959152684595}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.714918408629222}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/66", "prompt": "# Restaurant Game\n\nAlice and Bob always had hard time choosing restaurant for the dinner. Previously they performed Eenie Meenie Miney Mo game, but eventually as their restaurant list grew, they had to create a new game. This new game starts as they write restaurant names on N cards and align the cards in one line. Before the game begins, they both choose starting card and starting direction they are going to. They take turns in order one after another. After each turn, they move one card in their current direction. If they reach the end or beginning of the line of cards they change direction. Once they meet in a card, the card is marked for removal and is removed the first moment they both leave the card.\n\n<image> Example of how card is removed\n\nThey repeat this process until there is only one restaurant card left. Since there are a lot of restaurant cards, they are bored to simulate this process over and over and need your help to determine the last card that remains. Can you help them? \n\nInput\n\nThe first line of the input is one integer T (1 ≤ T ≤ 10^{4}) representing number of test cases. Each test case contains 3 lines: The first line contains an integer N representing initial number of cards. Next line contains two integer values A,B (0 ≤ A, B < N, 2 ≤ N ≤ 10^{18}) representing starting 0-based index of the card in the array. Last line contains two strings D_A, D_B ∈ {\"left\", \"right\"} representing starting direction of their movement.\n\nOutput\n\nThe output contains T integer number – the 0-based index of the last card that remains for every test case in order.\n\nExample\n\nInput\n\n\n1\n4\n0 1\nleft right\n\n\nOutput\n\n\n0\n\nNote\n\nNote that since Alice is starting at the beginning of the line even though her initial direction is left, on her next move she will go right.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.0288455799894045}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.074617932038067}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.330978148787585}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.546988303883525}, {"name": "Codestral-22B-v0.1", "score": -6.307241972841284}, {"name": "deepseek-coder-33b-instruct", "score": -6.351409139914336}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.381775407444469}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.198455791357181}], "rank": [0, 1, 2, 3, 5, 6, 4, 7]}
{"id": "code_contests/67", "prompt": "# Bubble Strike\n\nLittle Johnny Bubbles enjoys spending hours in front of his computer playing video games. His favorite game is Bubble Strike, fast-paced bubble shooting online game for two players.\n\nEach game is set in one of the N maps, each having different terrain configuration. First phase of each game decides on which map the game will be played. The game system randomly selects three maps and shows them to the players. Each player must pick one of those three maps to be discarded. The game system then randomly selects one of the maps that were not picked by any of the players and starts the game.\n\nJohnny is deeply enthusiastic about the game and wants to spend some time studying maps, thus increasing chances to win games played on those maps. However, he also needs to do his homework, so he does not have time to study all the maps. That is why he asked himself the following question: \"What is the minimum number of maps I have to study, so that the probability to play one of those maps is at least P\"?\n\nCan you help Johnny find the answer for this question? You can assume Johnny's opponents do not know him, and they will randomly pick maps.\n\nInput\n\nThe first line contains two integers N (3 ≤ N ≤ 10^{3}) and P (0 ≤ P ≤ 1) – total number of maps in the game and probability to play map Johnny has studied. P will have at most four digits after the decimal point.\n\nOutput\n\nOutput contains one integer number – minimum number of maps Johnny has to study.\n\nExample\n\nInput\n\n\n7 1.0000\n\n\nOutput\n\n\n6\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.51619134628822}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.740332735702852}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.47387628830376}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.723349780148729}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.960469113405463}, {"name": "Codestral-22B-v0.1", "score": -6.015278725207237}, {"name": "deepseek-coder-33b-instruct", "score": -6.142991788728526}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.274795517169768}], "rank": [1, 0, 3, 2, 4, 5, 6, 7]}
{"id": "code_contests/68", "prompt": "# Bubble Popping\n\nThere are N bubbles in a coordinate plane. Bubbles are so tiny that it can be assumed that each bubble is a point (X_i, Y_i). \n\nQ Bubble Cup finalists plan to play with the bubbles. Each finalist would link to use infinitely long Bubble Cup stick to pop some bubbles. The i-th finalist would like to place the stick in the direction of vector (dxi, dyi), and plays the following game until K_i bubbles are popped. The game starts with finalist placing the stick in the direction of vector (dx_i, dy_i), and sweeping it from the infinity to the left until it hits some bubble, which is immediately popped. It is guaranteed that only one bubble will be hit in this step. After that the finalist starts rotating the stick in the counter clockwise direction with the center of rotation in point where the previous bubble was popped. When the next bubble is hit, it is immediately popped and becomes the new center of rotation. The process continues until K_i bubbles have been popped. It is guaranteed that the stick won't hit two bubbles simultaneously in this process. \n\nFor each finalist find which bubble would be popped the last. Note that each game starts with the configuration of all N bubbles, so the games don't depend on the previous games. \n\nInput\n\nThe first line contains one integer N — the number of bubbles. (1 ≤ N ≤ 10^5)\n\nEach of the next N lines contains two integers. The i-th line contains integers X_i and Y_i — the coordinates of the i-th bubble. (-10^9 ≤ X_i, Y_i ≤ 10^9, (X_i, Y_i) ≠ (X_j, Y_j) for i ≠ j)\n\nThe next line contains one integer Q — the number of finalists willing to play with the bubbles. (1 ≤ Q ≤ 10^5)\n\nEach of the next Q lines contains 3 integers. The i-th line contains integers dx_i, dy_i and K_i. (-10^9 ≤ dx_i, dy_i ≤ 10^9, 1 ≤ K_i ≤ N)\n\nOutput\n\nFor each of the Q finalists, print the index of the bubble which would be popped last, in the separate line. \n\nExamples\n\nInput\n\n\n4\n0 0\n1 0\n0 1\n1 1\n2\n1 -1 3\n-1 1 4\n\n\nOutput\n\n\n4\n2\n\n\nInput\n\n\n4\n1 1\n2 2\n7 1\n1 7\n3\n2 2 1\n1 -5 4\n-6 5 3\n\n\nOutput\n\n\n3\n2\n3\n\nNote\n\nThere are two finalists willing to play with the bubbles. If the first finalist plays with the bubbles, then the bubbles at coordinates (0, 0), (1, 0) and (1, 1) would be popped in that order. Their indexes are 1, 2 and 4, so the answer is 4. If the second finalist plays with the bubbles, then the bubbles at coordinates (1, 1), (0, 1), (0, 0) and (1, 0) would be popped in that order, so the answer is 2.\n\nVisualization: [link](https://petljamediastorage.blob.core.windows.net/uploads/example1.gif). \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.31876729503469}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.386864911314131}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.201718356558783}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.6079321489993665}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.39772933538671}, {"name": "deepseek-coder-33b-instruct", "score": -6.416085014255887}, {"name": "Codestral-22B-v0.1", "score": -6.58149868455058}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.333940240664641}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/69", "prompt": "# Two Arrays\n\nYou are given two integer arrays of length N, A1 and A2. You are also given Q queries of 4 types: \n\n1 k l r x: set Ak_i:=min(Ak_i, x) for each l ≤ i ≤ r.\n\n2 k l r x: set Ak_i:=max(Ak_i, x) for each l ≤ i ≤ r.\n\n3 k l r x: set Ak_i:=Ak_i+x for each l ≤ i ≤ r.\n\n4 l r: find the (∑_{i=l}^r F(A1_i+A2_i)) \\% (10^9+7) where F(k) is the k-th Fibonacci number (F(0)=0, F(1)=1, F(k)=F(k-1)+F(k-2)), and x \\% y denotes the remainder of the division of x by y.\n\nYou should process these queries and answer each query of the fourth type.\n\nInput\n\nThe first line contains two integers N and Q. (1 ≤ N, Q ≤ 5 × 10^4) \n\nThe second line contains N integers, array A1_1, A1_2, ... A1_N. (0 ≤ A1_i ≤ 10^6)\n\nThe third line contains N integers, array A2_1, A2_2, ... A2_N. (0 ≤ A2_i ≤ 10^6)\n\nThe next Q lines describe the queries. Each line contains 5 or 3 integers, where the first integer denotes the type of the query. (k ∈ \\{1, 2\\}, 1 ≤ l ≤ r ≤ N)\n\nFor queries of type 1 and 2, 0 ≤ x ≤ 10^9 holds.\n\nFor queries of type 3, −10^6 ≤ x ≤ 10^6 holds.\n\nIt is guaranteed that after every query each number in arrays A1 and A2 will be nonnegative. \n\nOutput\n\nPrint the answer to each query of the fourth type, in separate lines. \n\nExamples\n\nInput\n\n\n3 4\n1 0 2\n2 1 0\n4 1 3\n3 2 2 2 3\n1 1 1 3 0\n4 1 3\n\n\nOutput\n\n\n4\n4\n\n\nInput\n\n\n5 4\n1 3 5 3 2\n4 2 1 3 3\n4 1 3\n4 2 5\n2 1 2 4 6\n4 2 4\n\n\nOutput\n\n\n18\n26\n68\n\nNote\n\nIn the first example: The answer for the first query is F(1 + 2) + F(0 + 1) + F(2 + 0) = F(3) + F(1) + F(2) = 2 + 1 + 1 = 4. After the second query, the array A2 changes to [2, 4, 0]. After the third query, the array A1 changes to [0, 0, 0]. The answer for the fourth query is F(0 + 2) + F(0 + 4) + F(0 + 0) = F(2) + F(4) + F(0) = 1 + 3 + 0 = 4. \n\nIn the second example: The answer for the first query is F(1 + 4) + F(3 + 2) + F(5 + 1) = F(5) + F(5) + F(6) = 5 + 5 + 8 = 18. The answer for the second query is F(3 + 2) + F(5 + 1) + F(3 + 3) + F(2 + 3) = F(5) + F(6) + F(6) + F(5) = 5 + 8 + 8 + 5 = 26. After the third query, the array A1 changes to [1, 6, 6, 6, 2]. The answer for the fourth query is F(6 + 2) + F(6 + 1) + F(6 + 3) = F(8) + F(7) + F(9) = 21 + 13 + 34 = 68. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.291554731509806}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.460375601084858}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.502057890715291}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.856881172773252}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.44959800378323}, {"name": "deepseek-coder-33b-instruct", "score": -6.663408520016824}, {"name": "Codestral-22B-v0.1", "score": -7.061197136225441}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/70", "prompt": "# Mars\n\nIn the year 2420 humans have finally built a colony on Mars thanks to the work of Elon Tusk. There are 10^9+7 cities arranged in a circle in this colony and none of them are connected yet. Elon Tusk wants to connect some of those cities using only roads of the same size in order to lower the production cost of those roads. Because of that he gave a list on N cites where some cites can appear more than once and Q queries that you need to answer. For the query you need to determine if it is possible to connect all the cities from L_{i} to R_{i} on that list using only roads of length D_{i}. \n\nInput\n\nThe first line contains two integers N and Q (1 ≤ N, Q ≤ 2⋅10^5 ) — the length of the array of cities and the number of queries you need to answer. \n\nThe second lines contains N integers representing the array of cites. Next Q lines contain three integers L, R and D (1 ≤ L_{i}, R_{i} ≤ N, 0 ≤ D_{i} ≤ 10^9+6) — the range of cities that needs to be connected and the length of the road that you can use. \n\nOutput\n\nThe output contains Q lines. If it is possible to connect all the cities from the i-th query can be connected with roads of length D_{i} the i-th line should contain the word \"Yes\", otherwise it should contain the word \"No\". \n\nExamples\n\nInput\n\n\n9 8\n17 0 12 6 10 8 2 4 5\n2 3 12\n2 3 6\n2 4 6\n4 6 2\n2 8 2\n1 2 17\n1 8 2\n9 9 14\n\n\nOutput\n\n\nYes\nNo\nYes\nYes\nYes\nYes\nNo\nYes\n\n\nInput\n\n\n4 1\n7 21 14 0\n1 4 1000000000\n\n\nOutput\n\n\nYes\n\nNote\n\nIn the 5^{th} query of the first test case we can connect cities in this order 0-2-4-6-8-10-12 this way distance between any two connected cities is 2. In the second test case we can connect cities in this order 21-14-7-0 this way distance between any two connected cities is 10^9 module 10^9+7. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.005148983417629}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.22870061472118}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0578241768987136}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.38940044290772}, {"name": "deepseek-coder-33b-instruct", "score": -6.155902134803376}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.224574270734041}, {"name": "Codestral-22B-v0.1", "score": -6.409862333127867}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/71", "prompt": "# Shortest path\n\nYou are given N points on an infinite plane with the Cartesian coordinate system on it. N-1 points lay on one line, and one point isn't on that line. You are on point K at the start, and the goal is to visit every point. You can move between any two points in a straight line, and you can revisit points. What is the minimum length of the path? \n\nInput\n\nThe first line contains two integers: N (3 ≤ N ≤ 2*10^5) - the number of points, and K (1 ≤ K ≤ N) - the index of the starting point.\n\nEach of the next N lines contain two integers, A_i, B_i (-10^6 ≤ A_i, B_i ≤ 10^6) - coordinates of the i-th point.\n\nOutput\n\nThe output contains one number - the shortest path to visit all given points starting from point K. The absolute difference between your solution and the main solution shouldn't exceed 10^-6;\n\nExample\n\nInput\n\n\n5 2\n0 0\n-1 1\n2 -2\n0 1\n-2 2\n\n\nOutput\n\n\n7.478709\n\nNote\n\nThe shortest path consists of these moves: \n\n2 -> 5 \n\n5 -> 4 \n\n4 -> 1 \n\n1 -> 3 \n\nThere isn't any shorter path possible.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.161629309027697}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.21473161189655}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.007109084319697}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.7109169635568}, {"name": "deepseek-coder-33b-instruct", "score": -6.33143067298345}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4006029005824425}, {"name": "Codestral-22B-v0.1", "score": -6.759730795634814}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.504898038808281}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/72", "prompt": "# Hidden Fortress\n\nThis is an interactive problem!\n\nAs part of your contribution in the Great Bubble War, you have been tasked with finding the newly built enemy fortress. The world you live in is a giant 10^9 × 10^9 grid, with squares having both coordinates between 1 and 10^9. \n\nYou know that the enemy base has the shape of a rectangle, with the sides parallel to the sides of the grid. The people of your world are extremely scared of being at the edge of the world, so you know that the base doesn't contain any of the squares on the edges of the grid (the x or y coordinate being 1 or 10^9). \n\nTo help you locate the base, you have been given a device that you can place in any square of the grid, and it will tell you the manhattan distance to the closest square of the base. The manhattan distance from square (a, b) to square (p, q) is calculated as |a−p|+|b−q|. If you try to place the device inside the enemy base, you will be captured by the enemy. Because of this, you need to make sure to never place the device inside the enemy base. \n\nUnfortunately, the device is powered by a battery and you can't recharge it. This means that you can use the device at most 40 times. \n\nInput\n\nThe input contains the answers to your queries. \n\nInteraction\n\nYour code is allowed to place the device on any square in the grid by writing \"? i j\" (1 ≤ i,j ≤ 10^9). In return, it will recieve the manhattan distance to the closest square of the enemy base from square (i,j) or -1 if the square you placed the device on is inside the enemy base or outside the grid. \n\nIf you recieve -1 instead of a positive number, exit immidiately and you will see the wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nYour solution should use no more than 40 queries. \n\nOnce you are sure where the enemy base is located, you should print \"! x y p q\" (1 ≤ x ≤ p≤ 10^9, 1 ≤ y ≤ q≤ 10^9), where (x, y) is the square inside the enemy base with the smallest x and y coordinates, and (p, q) is the square inside the enemy base with the largest x and y coordinates. Note that answering doesn't count as one of the 40 queries.\n\nAfter printing a query or printing the answer, do not forget to output end of line and flush the output. Otherwise, you will get idleness limit exceeded. To do this, use: \n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * See the documentation for other languages.\n\nExample\n\nInput\n\n\n1\n1\n2\n1\n\n\nOutput\n\n\n? 2 2\n? 5 5\n? 4 7\n? 1 5\n! 2 3 4 5\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.008714049582125}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.548896086908915}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.4980858369457115}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.92551703380699}, {"name": "Codestral-22B-v0.1", "score": -6.320660374758418}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.381775407444469}, {"name": "deepseek-coder-33b-instruct", "score": -6.460017124086402}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.100957426872303}], "rank": [1, 0, 3, 2, 5, 4, 6, 7]}
{"id": "code_contests/73", "prompt": "# Desert\n\nYou are given an undirected graph of N nodes and M edges, E_1, E_2, ... E_M.\n\nA connected graph is a cactus if each of it's edges belogs to at most one simple cycle. A graph is a desert if each of it's connected components is a cactus. \n\nFind the number of pairs (L, R), (1 ≤ L ≤ R ≤ M) such that, if we delete all the edges except for E_L, E_{L+1}, ... E_R, the graph is a desert. \n\nInput\n\nThe first line contains two integers N and M (2 ≤ N ≤ 2.5 × 10^5, 1 ≤ M ≤ 5 × 10^5). Each of the next M lines contains two integers. The i-th line describes the i-th edge. It contains integers U_i and V_i, the nodes connected by the i-th edge (E_i=(U_i, V_i)). It is guaranteed that 1 ≤ U_i, V_i ≤ N and U_i ≠ V_i. \n\nOutput\n\nThe output contains one integer number – the answer.\n\nExamples\n\nInput\n\n\n5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n2 4\n\n\nOutput\n\n\n20\n\nInput\n\n\n2 3\n1 2\n1 2\n1 2\n\n\nOutput\n\n\n5\n\nNote\n\nIn the second example: Graphs for pairs (1, 1), (2, 2) and (3, 3) are deserts because they don't have any cycles. Graphs for pairs (1, 2) and (2, 3) have one cycle of length 2 so they are deserts.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.250093963413056}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.351051830374451}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.268929749653444}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.678341582174248}, {"name": "deepseek-coder-33b-instruct", "score": -6.571823696181304}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.684691724468098}, {"name": "Codestral-22B-v0.1", "score": -6.932311296878024}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.403843234861666}], "rank": [0, 1, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/74", "prompt": "# Bob's Beautiful Array\n\nBob really likes playing with arrays of numbers. That's why for his birthday, his friends bought him a really interesting machine – an array beautifier. \n\nThe array beautifier takes an array A consisting of N integers, and it outputs a new array B of length N that it constructed based on the array given to it. The array beautifier constructs the new array in the following way: it takes two numbers at different indices from the original array and writes their sum to the end of the new array. It does this step N times - resulting in an output array of length N. During this process, the machine can take the same index multiple times in different steps. \n\nBob was very excited about the gift that his friends gave him, so he put his favorite array in the machine. However, when the machine finished, Bob was not happy with the resulting array. He misses his favorite array very much, and hopes to get it back. \n\nGiven the array that the machine outputted, help Bob find an array that could be the original array that he put in the machine. Sometimes the machine makes mistakes, so it is possible that no appropriate input array exists for the array it has outputted. In such case, let Bob know that his array is forever lost.\n\nInput\n\nThe first line contains one positive integer N (2 ≤ N ≤ 10^3) – the length of Bob's array.\n\nThe second line contains N integers B_1, B_2, ..., B_N (1 ≤ B_i ≤ 10^6) – the elements of the array the machine outputted.\n\nOutput\n\nIf an appropriate input array exists, print \"YES\", followed by the input array A_1, A_2, ..., A_N (-10^9 ≤ A_i ≤ 10^9) in the next line. Otherwise, print \"NO\".\n\nExamples\n\nInput\n\n\n2\n5 5\n\n\nOutput\n\n\nYES\n2 3\n\n\nInput\n\n\n3\n1 2 3\n\n\nOutput\n\n\nYES\n0 1 2\n\n\nInput\n\n\n3\n2 4 5\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n4\n1 3 5 7\n\n\nOutput\n\n\nYES\n6 -3 4 1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5253011401371173}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.004638649137608}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.694059797989493}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.073722762966512}, {"name": "deepseek-coder-33b-instruct", "score": -6.147852721875432}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.2038302252503135}, {"name": "Codestral-22B-v0.1", "score": -6.3842158427960705}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.997303435623737}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/75", "prompt": "# Array Game\n\nAlice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 ≤ N ≤ 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 ≤ A_i ≤ 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\nExamples\n\nInput\n\n\n1\n5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n3\n5 4 5\n\n\nOutput\n\n\nAlice\n\n\nInput\n\n\n6\n5 8 2 1 10 9\n\n\nOutput\n\n\nBob\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.40452517175483}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8651829385823278}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.61953092220861}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.748296843962844}, {"name": "deepseek-coder-33b-instruct", "score": -5.911966690975883}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.155825778524943}, {"name": "Codestral-22B-v0.1", "score": -6.3144896318317585}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.35430090818968}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/76", "prompt": "# Party Organization\n\nOn the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 ≤ N ≤ 2*10^5) and M (0 ≤ M ≤ 2*10^5) – the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 ≤ U_i,V_i ≤ N) – meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i ≠ V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -3.3765704207262175}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.591487108105287}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1096928391689005}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.2106230543634}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.240603504357563}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.273676252631586}, {"name": "deepseek-coder-33b-instruct", "score": -6.298147454918443}, {"name": "Codestral-22B-v0.1", "score": -6.746870307964492}], "rank": [4, 0, 1, 7, 3, 2, 6, 5]}
{"id": "code_contests/77", "prompt": "# Robot Factory\n\nYou have received data from a Bubble bot. You know your task is to make factory facilities, but before you even start, you need to know how big the factory is and how many rooms it has. When you look at the data you see that you have the dimensions of the construction, which is in rectangle shape: N x M. \n\nThen in the next N lines you have M numbers. These numbers represent factory tiles and they can go from 0 to 15. Each of these numbers should be looked in its binary form. Because from each number you know on which side the tile has walls. For example number 10 in it's binary form is 1010, which means that it has a wall from the North side, it doesn't have a wall from the East, it has a wall on the South side and it doesn't have a wall on the West side. So it goes North, East, South, West. \n\nIt is guaranteed that the construction always has walls on it's edges. The input will be correct. \n\nYour task is to print the size of the rooms from biggest to smallest. \n\nInput\n\nThe first line has two numbers which are N and M, the size of the construction. Both are integers: \n\nn (1 ≤ n ≤ 10^3)\n\nm (1 ≤ m ≤ 10^3)\n\nNext N x M numbers represent each tile of construction.\n\nOutput\n\nOnce you finish processing the data your output consists of one line sorted from biggest to smallest room sizes. \n\nExample\n\nInput\n\n\n4 5\n9 14 11 12 13\n5 15 11 6 7\n5 9 14 9 14\n3 2 14 3 14\n\n\nOutput\n\n\n9 4 4 2 1 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.1050866587540025}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.126101593835292}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.967310169357882}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.97081275937711}, {"name": "deepseek-coder-33b-instruct", "score": -6.4053144047505395}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4286608533775995}, {"name": "Codestral-22B-v0.1", "score": -6.534602460341219}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.412855745265301}], "rank": [0, 1, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/78", "prompt": "# Array Elimination\n\nYou are given array a_1, a_2, …, a_n, consisting of non-negative integers.\n\nLet's define operation of \"elimination\" with integer parameter k (1 ≤ k ≤ n) as follows:\n\n  * Choose k distinct array indices 1 ≤ i_1 < i_2 < … < i_k ≤ n. \n  * Calculate x = a_{i_1} ~ \\& ~ a_{i_2} ~ \\& ~ … ~ \\& ~ a_{i_k}, where \\& denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND) (notes section contains formal definition). \n  * Subtract x from each of a_{i_1}, a_{i_2}, …, a_{i_k}; all other elements remain untouched. \n\n\n\nFind all possible values of k, such that it's possible to make all elements of array a equal to 0 using a finite number of elimination operations with parameter k. It can be proven that exists at least one possible k for any array a.\n\nNote that you firstly choose k and only after that perform elimination operations with value k you've chosen initially.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 200 000) — the length of array a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i < 2^{30}) — array a itself.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 200 000.\n\nOutput\n\nFor each test case, print all values k, such that it's possible to make all elements of a equal to 0 in a finite number of elimination operations with the given parameter k.\n\nPrint them in increasing order.\n\nExample\n\nInput\n\n\n5\n4\n4 4 4 4\n4\n13 7 25 19\n6\n3 5 3 1 7 1\n1\n1\n5\n0 0 0 0 0\n\n\nOutput\n\n\n1 2 4\n1 2\n1\n1\n1 2 3 4 5\n\nNote\n\nIn the first test case:\n\n  * If k = 1, we can make four elimination operations with sets of indices \\{1\\}, \\{2\\}, \\{3\\}, \\{4\\}. Since \\& of one element is equal to the element itself, then for each operation x = a_i, so a_i - x = a_i - a_i = 0. \n  * If k = 2, we can make two elimination operations with, for example, sets of indices \\{1, 3\\} and \\{2, 4\\}: x = a_1 ~ \\& ~ a_3 = a_2 ~ \\& ~ a_4 = 4 ~ \\& ~ 4 = 4. For both operations x = 4, so after the first operation a_1 - x = 0 and a_3 - x = 0, and after the second operation — a_2 - x = 0 and a_4 - x = 0. \n  * If k = 3, it's impossible to make all a_i equal to 0. After performing the first operation, we'll get three elements equal to 0 and one equal to 4. After that, all elimination operations won't change anything, since at least one chosen element will always be equal to 0. \n  * If k = 4, we can make one operation with set \\{1, 2, 3, 4\\}, because x = a_1 ~ \\& ~ a_2 ~ \\& ~ a_3 ~ \\& ~ a_4 = 4. \n\n\n\nIn the second test case, if k = 2 then we can make the following elimination operations:\n\n  * Operation with indices \\{1, 3\\}: x = a_1 ~ \\& ~ a_3 = 13 ~ \\& ~ 25 = 9. a_1 - x = 13 - 9 = 4 and a_3 - x = 25 - 9 = 16. Array a will become equal to [4, 7, 16, 19]. \n  * Operation with indices \\{3, 4\\}: x = a_3 ~ \\& ~ a_4 = 16 ~ \\& ~ 19 = 16. a_3 - x = 16 - 16 = 0 and a_4 - x = 19 - 16 = 3. Array a will become equal to [4, 7, 0, 3]. \n  * Operation with indices \\{2, 4\\}: x = a_2 ~ \\& ~ a_4 = 7 ~ \\& ~ 3 = 3. a_2 - x = 7 - 3 = 4 and a_4 - x = 3 - 3 = 0. Array a will become equal to [4, 4, 0, 0]. \n  * Operation with indices \\{1, 2\\}: x = a_1 ~ \\& ~ a_2 = 4 ~ \\& ~ 4 = 4. a_1 - x = 4 - 4 = 0 and a_2 - x = 4 - 4 = 0. Array a will become equal to [0, 0, 0, 0]. \n\n\n\nFormal definition of bitwise AND:\n\nLet's define bitwise AND (\\&) as follows. Suppose we have two non-negative integers x and y, let's look at their binary representations (possibly, with leading zeroes): x_k ... x_2 x_1 x_0 and y_k ... y_2 y_1 y_0. Here, x_i is the i-th bit of number x, and y_i is the i-th bit of number y. Let r = x ~ \\& ~ y is a result of operation \\& on number x and y. Then binary representation of r will be r_k ... r_2 r_1 r_0, where:\n\n$$$ r_i = \\begin{cases} 1, ~ if ~ x_i = 1 ~ and ~ y_i = 1 \\\\\\ 0, ~ if ~ x_i = 0 ~ or ~ y_i = 0 \\end{cases} $$$\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.725597037049099}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.307141437482092}, {"name": "deepseek-coder-33b-instruct", "score": -4.38173698517611}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.790686633678565}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.191155228943582}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.414376568819867}, {"name": "Codestral-22B-v0.1", "score": -6.527402207688827}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.728984280185925}], "rank": [0, 1, 6, 3, 2, 4, 5, 7]}
{"id": "code_contests/79", "prompt": "# Frog Traveler\n\nFrog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the well and has a long way up.\n\nThe surface of the well's walls vary in quality: somewhere they are slippery, but somewhere have convenient ledges. In other words, if Gorf is on x meters below ground level, then in one jump he can go up on any integer distance from 0 to a_x meters inclusive. (Note that Gorf can't jump down, only up).\n\nUnfortunately, Gorf has to take a break after each jump (including jump on 0 meters). And after jumping up to position x meters below ground level, he'll slip exactly b_x meters down while resting.\n\nCalculate the minimum number of jumps Gorf needs to reach ground level.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 300 000) — the depth of the well.\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ i), where a_i is the maximum height Gorf can jump from i meters below ground level.\n\nThe third line contains n integers b_1, b_2, …, b_n (0 ≤ b_i ≤ n - i), where b_i is the distance Gorf will slip down if he takes a break on i meters below ground level.\n\nOutput\n\nIf Gorf can't reach ground level, print -1. Otherwise, firstly print integer k — the minimum possible number of jumps.\n\nThen print the sequence d_1,\\,d_2, …,\\,d_k where d_j is the depth Gorf'll reach after the j-th jump, but before he'll slip down during the break. Ground level is equal to 0.\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n\n3\n0 2 2\n1 1 0\n\n\nOutput\n\n\n2\n1 0 \n\n\nInput\n\n\n2\n1 1\n1 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n10\n0 1 2 3 5 5 6 7 8 5\n9 8 7 1 5 4 3 2 0 0\n\n\nOutput\n\n\n3\n9 4 0 \n\nNote\n\nIn the first example, Gorf is on the bottom of the well and jump to the height 1 meter below ground level. After that he slip down by meter and stays on height 2 meters below ground level. Now, from here, he can reach ground level in one jump.\n\nIn the second example, Gorf can jump to one meter below ground level, but will slip down back to the bottom of the well. That's why he can't reach ground level.\n\nIn the third example, Gorf can reach ground level only from the height 5 meters below the ground level. And Gorf can reach this height using a series of jumps 10 ⇒ 9 \\dashrightarrow 9 ⇒ 4 \\dashrightarrow 5 where ⇒ is the jump and \\dashrightarrow is slipping during breaks.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.626365548724694}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.97300521036294}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.68213122712422}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.275826328712505}, {"name": "deepseek-coder-33b-instruct", "score": -6.273744554645768}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.33845272545717}, {"name": "Codestral-22B-v0.1", "score": -6.524340270710631}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/80", "prompt": "# Optimal Insertion\n\nYou are given two arrays of integers a_1, a_2, …, a_n and b_1, b_2, …, b_m.\n\nYou need to insert all elements of b into a in an arbitrary way. As a result you will get an array c_1, c_2, …, c_{n+m} of size n + m.\n\nNote that you are not allowed to change the order of elements in a, while you can insert elements of b at arbitrary positions. They can be inserted at the beginning, between any elements of a, or at the end. Moreover, elements of b can appear in the resulting array in any order.\n\nWhat is the minimum possible number of inversions in the resulting array c? Recall that an inversion is a pair of indices (i, j) such that i < j and c_i > c_j.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (1 ≤ n, m ≤ 10^6).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nThe third line of each test case contains m integers b_1, b_2, …, b_m (1 ≤ b_i ≤ 10^9).\n\nIt is guaranteed that the sum of n for all tests cases in one input doesn't exceed 10^6. The sum of m for all tests cases doesn't exceed 10^6 as well.\n\nOutput\n\nFor each test case, print one integer — the minimum possible number of inversions in the resulting array c.\n\nExample\n\nInput\n\n\n3\n3 4\n1 2 3\n4 3 2 1\n3 3\n3 2 1\n1 2 3\n5 4\n1 3 5 3 1\n4 3 6 1\n\n\nOutput\n\n\n0\n4\n6\n\nNote\n\nBelow is given the solution to get the optimal answer for each of the example test cases (elements of a are underscored).\n\n  * In the first test case, c = [\\underline{1}, 1, \\underline{2}, 2, \\underline{3}, 3, 4]. \n  * In the second test case, c = [1, 2, \\underline{3}, \\underline{2}, \\underline{1}, 3]. \n  * In the third test case, c = [\\underline{1}, 1, 3, \\underline{3}, \\underline{5}, \\underline{3}, \\underline{1}, 4, 6]. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9581429410416993}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.049556379431967}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.377416022116198}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.252796851246227}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.28434309446658}, {"name": "deepseek-coder-33b-instruct", "score": -6.369702332961662}, {"name": "Codestral-22B-v0.1", "score": -6.4643078905460944}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.450021428582446}], "rank": [1, 0, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/81", "prompt": "# Difficult Mountain\n\nA group of n alpinists has just reached the foot of the mountain. The initial difficulty of climbing this mountain can be described as an integer d.\n\nEach alpinist can be described by two integers s and a, where s is his skill of climbing mountains and a is his neatness.\n\nAn alpinist of skill level s is able to climb a mountain of difficulty p only if p ≤ s. As an alpinist climbs a mountain, they affect the path and thus may change mountain difficulty. Specifically, if an alpinist of neatness a climbs a mountain of difficulty p the difficulty of this mountain becomes max(p, a). \n\nAlpinists will climb the mountain one by one. And before the start, they wonder, what is the maximum number of alpinists who will be able to climb the mountain if they choose the right order. As you are the only person in the group who does programming, you are to answer the question.\n\nNote that after the order is chosen, each alpinist who can climb the mountain, must climb the mountain at that time. \n\nInput\n\nThe first line contains two integers n and d (1 ≤ n ≤ 500 000; 0 ≤ d ≤ 10^9) — the number of alpinists and the initial difficulty of the mountain.\n\nEach of the next n lines contains two integers s_i and a_i (0 ≤ s_i, a_i ≤ 10^9) that define the skill of climbing and the neatness of the i-th alpinist.\n\nOutput\n\nPrint one integer equal to the maximum number of alpinists who can climb the mountain if they choose the right order to do so.\n\nExamples\n\nInput\n\n\n3 2\n2 6\n3 5\n5 7\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n3 3\n2 4\n6 4\n4 6\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n5 0\n1 5\n4 8\n2 7\n7 6\n3 2\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example, alpinists 2 and 3 can climb the mountain if they go in this order. There is no other way to achieve the answer of 2.\n\nIn the second example, alpinist 1 is not able to climb because of the initial difficulty of the mountain, while alpinists 2 and 3 can go up in any order.\n\nIn the third example, the mountain can be climbed by alpinists 5, 3 and 4 in this particular order. There is no other way to achieve optimal answer.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6300844076034307}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.085976312551584}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.69537645387424}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.339881485625729}, {"name": "deepseek-coder-33b-instruct", "score": -5.870177880899896}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.198283575502324}, {"name": "Codestral-22B-v0.1", "score": -6.323731525440546}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/82", "prompt": "# Phys Ed Online\n\nStudents of one unknown college don't have PE courses. That's why q of them decided to visit a gym nearby by themselves. The gym is open for n days and has a ticket system. At the i-th day, the cost of one ticket is equal to a_i. You are free to buy more than one ticket per day.\n\nYou can activate a ticket purchased at day i either at day i or any day later. Each activated ticket is valid only for k days. In other words, if you activate ticket at day t, it will be valid only at days t, t + 1, ..., t + k - 1. \n\nYou know that the j-th student wants to visit the gym at each day from l_j to r_j inclusive. Each student will use the following strategy of visiting the gym at any day i (l_j ≤ i ≤ r_j):\n\n  1. person comes to a desk selling tickets placed near the entrance and buy several tickets with cost a_i apiece (possibly, zero tickets); \n  2. if the person has at least one activated and still valid ticket, they just go in. Otherwise, they activate one of tickets purchased today or earlier and go in. \n\n\n\nNote that each student will visit gym only starting l_j, so each student has to buy at least one ticket at day l_j.\n\nHelp students to calculate the minimum amount of money they have to spend in order to go to the gym.\n\nInput\n\nThe first line contains three integers n, q and k (1 ≤ n, q ≤ 300 000; 1 ≤ k ≤ n) — the number of days, the number of students and the number of days each ticket is still valid. \n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the cost of one ticket at the corresponding day.\n\nEach of the next q lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) — the segment of days the corresponding student want to visit the gym.\n\nOutput\n\nFor each student, print the minimum possible amount of money they have to spend in order to go to the gym at desired days.\n\nExample\n\nInput\n\n\n7 5 2\n2 15 6 3 7 5 6\n1 2\n3 7\n5 5\n7 7\n3 5\n\n\nOutput\n\n\n2\n12\n7\n6\n9\n\nNote\n\nLet's see how each student have to spend their money: \n\n  * The first student should buy one ticket at day 1. \n  * The second student should buy one ticket at day 3 and two tickets at day 4. Note that student can keep purchased tickets for the next days. \n  * The third student should buy one ticket at day 5. \n  * The fourth student should buy one ticket at day 7. \n  * The fifth student should buy one ticket at day 3 and one at day 4. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.9602796939914344}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1603195511456335}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0813546743089075}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.187877305146912}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.312416972071158}, {"name": "deepseek-coder-33b-instruct", "score": -6.492603405284429}, {"name": "Codestral-22B-v0.1", "score": -6.635815313478964}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.724540322200236}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/83", "prompt": "# Two Sorts\n\nIntegers from 1 to n (inclusive) were sorted lexicographically (considering integers as strings). As a result, array a_1, a_2, ..., a_n was obtained.\n\nCalculate value of (∑_{i = 1}^n ((i - a_i) mod 998244353)) mod 10^9 + 7.\n\nx mod y here means the remainder after division x by y. This remainder is always non-negative and doesn't exceed y - 1. For example, 5 mod 3 = 2, (-1) mod 6 = 5. \n\nInput\n\nThe first line contains the single integer n (1 ≤ n ≤ 10^{12}).\n\nOutput\n\nPrint one integer — the required sum.\n\nExamples\n\nInput\n\n\n3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n12\n\n\nOutput\n\n\n994733045\n\n\nInput\n\n\n21\n\n\nOutput\n\n\n978932159\n\n\nInput\n\n\n1000000000000\n\n\nOutput\n\n\n289817887\n\nNote\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a ≠ b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\n\n\nFor example, 42 is lexicographically smaller than 6, because they differ in the first digit, and 4 < 6; 42 < 420, because 42 is a prefix of 420.\n\nLet's denote 998244353 as M.\n\nIn the first example, array a is equal to [1, 2, 3]. \n\n  * (1 - 1) mod M = 0 mod M = 0 \n  * (2 - 2) mod M = 0 mod M = 0 \n  * (3 - 3) mod M = 0 mod M = 0 \n\n\n\nAs a result, (0 + 0 + 0) mod 10^9 + 7 = 0\n\nIn the second example, array a is equal to [1, 10, 11, 12, 2, 3, 4, 5, 6, 7, 8, 9]. \n\n  * (1 - 1) mod M = 0 mod M = 0 \n  * (2 - 10) mod M = (-8) mod M = 998244345 \n  * (3 - 11) mod M = (-8) mod M = 998244345 \n  * (4 - 12) mod M = (-8) mod M = 998244345 \n  * (5 - 2) mod M = 3 mod M = 3 \n  * (6 - 3) mod M = 3 mod M = 3 \n  * (7 - 4) mod M = 3 mod M = 3 \n  * (8 - 5) mod M = 3 mod M = 3 \n  * (9 - 6) mod M = 3 mod M = 3 \n  * (10 - 7) mod M = 3 mod M = 3 \n  * (11 - 8) mod M = 3 mod M = 3 \n  * (12 - 9) mod M = 3 mod M = 3 \n\n\n\nAs a result, (0 + 998244345 + 998244345 + 998244345 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3) mod 10^9 + 7 = 2994733059 mod 10^9 + 7 = 994733045\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.7753349479078064}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.5712214106457036}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.250322143676454}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.767289035464526}, {"name": "deepseek-coder-33b-instruct", "score": -5.822844691810965}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.2038302252503135}, {"name": "Codestral-22B-v0.1", "score": -6.554816205125419}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.646407232719985}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/84", "prompt": "# Artistic Partition\n\nFor two positive integers l and r (l ≤ r) let c(l, r) denote the number of integer pairs (i, j) such that l ≤ i ≤ j ≤ r and \\operatorname{gcd}(i, j) ≥ l. Here, \\operatorname{gcd}(i, j) is the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers i and j.\n\nYouKn0wWho has two integers n and k where 1 ≤ k ≤ n. Let f(n, k) denote the minimum of ∑_{i=1}^{k}{c(x_i+1,x_{i+1})} over all integer sequences 0=x_1 < x_2 < … < x_{k} < x_{k+1}=n.\n\nHelp YouKn0wWho find f(n, k). \n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 3 ⋅ 10^5) — the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). \n\nOutput\n\nFor each test case, print a single integer — f(n, k).\n\nExample\n\nInput\n\n\n4\n6 2\n4 4\n3 1\n10 3\n\n\nOutput\n\n\n8\n4\n6\n11\n\nNote\n\nIn the first test case, YouKn0wWho can select the sequence [0, 2, 6]. So f(6, 2) = c(1, 2) + c(3, 6) = 3 + 5 = 8 which is the minimum possible.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.869866787894754}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9446837876676946}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.955545327778296}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.365901245871568}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.972461967491826}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.466754180782955}, {"name": "deepseek-coder-33b-instruct", "score": -6.524161245692141}, {"name": "Codestral-22B-v0.1", "score": -6.535705604413376}], "rank": [1, 0, 2, 3, 7, 4, 6, 5]}
{"id": "code_contests/85", "prompt": "# A Perfect Problem\n\nA sequence of integers b_1, b_2, …, b_m is called good if max(b_1, b_2, …, b_m) ⋅ min(b_1, b_2, …, b_m) ≥ b_1 + b_2 + … + b_m.\n\nA sequence of integers a_1, a_2, …, a_n is called perfect if every non-empty subsequence of a is good.\n\nYouKn0wWho has two integers n and M, M is prime. Help him find the number, modulo M, of perfect sequences a_1, a_2, …, a_n such that 1 ≤ a_i ≤ n + 1 for each integer i from 1 to n.\n\nA sequence d is a subsequence of a sequence c if d can be obtained from c by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first and only line of the input contains two space-separated integers n and M (1 ≤ n ≤ 200; 10^8 ≤ M ≤ 10^9). It is guaranteed that M is prime.\n\nOutput\n\nPrint a single integer — the number of perfect sequences modulo M.\n\nExamples\n\nInput\n\n\n2 998244353\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n4 100000007\n\n\nOutput\n\n\n32\n\n\nInput\n\n\n69 999999937\n\n\nOutput\n\n\n456886663\n\nNote\n\nIn the first test case, the perfect sequences are [2, 2], [2, 3], [3, 2] and [3, 3].\n\nIn the second test case, some of the perfect sequences are [3, 4, 3, 5], [4, 5, 4, 4], [4, 5, 5, 5] etc. One example of a sequence which is not perfect is [2, 3, 3, 4], because, for example, the subsequence [2, 3, 4] is not an good as 2 ⋅ 4 < 2 + 3 + 4.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.795309397729783}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.290404645126569}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.080459819663064}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.717567029626817}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.143223798319297}, {"name": "deepseek-coder-33b-instruct", "score": -6.434861076050702}, {"name": "Codestral-22B-v0.1", "score": -6.506904508424718}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.428547075059978}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/86", "prompt": "# October 18, 2017\n\nIt was October 18, 2017. Shohag, a melancholic soul, made a strong determination that he will pursue Competitive Programming seriously, by heart, because he found it fascinating. Fast forward to 4 years, he is happy that he took this road. He is now creating a contest on Codeforces. He found an astounding problem but has no idea how to solve this. Help him to solve the final problem of the round.\n\nYou are given three integers n, k and x. Find the number, modulo 998 244 353, of integer sequences a_1, a_2, …, a_n such that the following conditions are satisfied: \n\n  * 0 ≤ a_i < 2^k for each integer i from 1 to n. \n  * There is no non-empty subsequence in a such that the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of the elements of the subsequence is x. \n\n\n\nA sequence b is a subsequence of a sequence c if b can be obtained from c by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases.\n\nThe first and only line of each test case contains three space-separated integers n, k, and x (1 ≤ n ≤ 10^9, 0 ≤ k ≤ 10^7, 0 ≤ x < 2^{\\operatorname{min}(20, k)}).\n\nIt is guaranteed that the sum of k over all test cases does not exceed 5 ⋅ 10^7.\n\nOutput\n\nFor each test case, print a single integer — the answer to the problem.\n\nExample\n\nInput\n\n\n6\n2 2 0\n2 1 1\n3 2 3\n69 69 69\n2017 10 18\n5 7 0\n\n\nOutput\n\n\n6\n1\n15\n699496932\n892852568\n713939942\n\nNote\n\nIn the first test case, the valid sequences are [1, 2], [1, 3], [2, 1], [2, 3], [3, 1] and [3, 2].\n\nIn the second test case, the only valid sequence is [0, 0].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.834796329014091}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.853970073979529}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.276562434745007}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.6229194305987615}, {"name": "deepseek-coder-33b-instruct", "score": -6.44691909996106}, {"name": "Codestral-22B-v0.1", "score": -6.450596796465082}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.491512297702094}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.429594430583265}], "rank": [0, 1, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/87", "prompt": "# Era\n\nShohag has an integer sequence a_1, a_2, …, a_n. He can perform the following operation any number of times (possibly, zero):\n\n  * Select any positive integer k (it can be different in different operations). \n  * Choose any position in the sequence (possibly the beginning or end of the sequence, or in between any two elements) and insert k into the sequence at this position. \n  * This way, the sequence a changes, and the next operation is performed on this changed sequence. \n\n\n\nFor example, if a=[3,3,4] and he selects k = 2, then after the operation he can obtain one of the sequences [\\underline{2},3,3,4], [3,\\underline{2},3,4], [3,3,\\underline{2},4], or [3,3,4,\\underline{2}].\n\nShohag wants this sequence to satisfy the following condition: for each 1 ≤ i ≤ |a|, a_i ≤ i. Here, |a| denotes the size of a.\n\nHelp him to find the minimum number of operations that he has to perform to achieve this goal. We can show that under the constraints of the problem it's always possible to achieve this goal in a finite number of operations.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 200) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the initial length of the sequence.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the sequence.\n\nOutput\n\nFor each test case, print a single integer — the minimum number of operations needed to perform to achieve the goal mentioned in the statement.\n\nExample\n\nInput\n\n\n4\n3\n1 3 4\n5\n1 2 5 7 4\n1\n1\n3\n69 6969 696969\n\n\nOutput\n\n\n1\n3\n0\n696966\n\nNote\n\nIn the first test case, we have to perform at least one operation, as a_2=3>2. We can perform the operation [1, 3, 4] → [1, \\underline{2}, 3, 4] (the newly inserted element is underlined), now the condition is satisfied.\n\nIn the second test case, Shohag can perform the following operations:\n\n[1, 2, 5, 7, 4] → [1, 2, \\underline{3}, 5, 7, 4] → [1, 2, 3, \\underline{4}, 5, 7, 4] → [1, 2, 3, 4, 5, \\underline{3}, 7, 4].\n\nIn the third test case, the sequence already satisfies the condition.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.049841599201023}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.2378938307039626}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.317808062347231}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.324452840152662}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.7107978095501055}, {"name": "deepseek-coder-33b-instruct", "score": -5.973473677587062}, {"name": "Codestral-22B-v0.1", "score": -6.050370045018507}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/88", "prompt": "# XOR Specia-LIS-t\n\nYouKn0wWho has an integer sequence a_1, a_2, … a_n. Now he will split the sequence a into one or more consecutive subarrays so that each element of a belongs to exactly one subarray. Let k be the number of resulting subarrays, and h_1, h_2, …, h_k be the lengths of the longest increasing subsequences of corresponding subarrays.\n\nFor example, if we split [2, 5, 3, 1, 4, 3, 2, 2, 5, 1] into [2, 5, 3, 1, 4], [3, 2, 2, 5], [1], then h = [3, 2, 1].\n\nYouKn0wWho wonders if it is possible to split the sequence a in such a way that the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of h_1, h_2, …, h_k is equal to 0. You have to tell whether it is possible.\n\nThe longest increasing subsequence (LIS) of a sequence b_1, b_2, …, b_m is the longest sequence of valid indices i_1, i_2, …, i_k such that i_1 < i_2 < … < i_k and b_{i_1} < b_{i_2} < … < b_{i_k}. For example, the LIS of [2, 5, 3, 3, 5] is [2, 3, 5], which has length 3.\n\nAn array c is a subarray of an array b if c can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if it is possible to split into subarrays in the desired way, print \"NO\" (without quotes) otherwise. You can print each letter in any register (upper or lower).\n\nExample\n\nInput\n\n\n4\n7\n1 3 4 2 2 1 5\n3\n1 3 4\n5\n1 3 2 4 2\n4\n4 3 2 1\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, YouKn0wWho can split the sequence in the following way: [1, 3, 4], [2, 2], [1, 5]. This way, the LIS lengths are h = [3, 1, 2], and the bitwise XOR of the LIS lengths is 3 ⊕ 1 ⊕ 2 = 0.\n\nIn the second test case, it can be shown that it is impossible to split the sequence into subarrays that will satisfy the condition.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5609324397833144}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8826353885335543}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.081056478391982}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.491578863380325}, {"name": "deepseek-coder-33b-instruct", "score": -5.884302409503527}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.404897824865323}, {"name": "Codestral-22B-v0.1", "score": -6.463715648894197}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.436449897074567}], "rank": [0, 1, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/89", "prompt": "# Di-visible Confusion\n\nYouKn0wWho has an integer sequence a_1, a_2, …, a_n. He will perform the following operation until the sequence becomes empty: select an index i such that 1 ≤ i ≤ |a| and a_i is not divisible by (i + 1), and erase this element from the sequence. Here |a| is the length of sequence a at the moment of operation. Note that the sequence a changes and the next operation is performed on this changed sequence.\n\nFor example, if a=[3,5,4,5], then he can select i = 2, because a_2 = 5 is not divisible by i+1 = 3. After this operation the sequence is [3,4,5].\n\nHelp YouKn0wWho determine if it is possible to erase the whole sequence using the aforementioned operation.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if it is possible to erase the whole sequence using the aforementioned operation, print \"NO\" (without quotes) otherwise. You can print each letter in any register (upper or lower).\n\nExample\n\nInput\n\n\n5\n3\n1 2 3\n1\n2\n2\n7 7\n10\n384836991 191890310 576823355 782177068 404011431 818008580 954291757 160449218 155374934 840594328\n8\n6 69 696 69696 696969 6969696 69696969 696969696\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\n\nNote\n\nIn the first test case, YouKn0wWho can perform the following operations (the erased elements are underlined): [1, \\underline{2}, 3] → [\\underline{1}, 3] → [\\underline{3}] → [ ].\n\nIn the second test case, it is impossible to erase the sequence as i can only be 1, and when i=1, a_1 = 2 is divisible by i + 1 = 2.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.3361965314447413}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6856743231649878}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.73409096605493}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.083662682629733}, {"name": "deepseek-coder-33b-instruct", "score": -5.711750644305377}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.0506010033315585}, {"name": "Codestral-22B-v0.1", "score": -6.1365600667258215}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.526846793712668}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/90", "prompt": "# Moderate Modular Mode\n\nYouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 ≤ n ≤ 2 ⋅ 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 ≤ x, y ≤ 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 ≤ n ≤ 2 ⋅ 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n4 8\n4 2\n420 420\n69420 42068\n\n\nOutput\n\n\n4\n10\n420\n9969128\n\nNote\n\nIn the first test case, 4 mod 4 = 8 mod 4 = 0.\n\nIn the second test case, 10 mod 4 = 2 mod 10 = 2.\n\nIn the third test case, 420 mod 420 = 420 mod 420 = 0.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.602393345243667}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.591487108105287}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.501408391693962}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.859347179882474}, {"name": "deepseek-coder-33b-instruct", "score": -5.742118180921774}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.8776685526290535}, {"name": "Codestral-22B-v0.1", "score": -5.992289206982538}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.706110763616313}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/91", "prompt": "# Extreme Extension\n\nFor an array b of n integers, the extreme value of this array is the minimum number of times (possibly, zero) the following operation has to be performed to make b non-decreasing: \n\n  * Select an index i such that 1 ≤ i ≤ |b|, where |b| is the current length of b. \n  * Replace b_i with two elements x and y such that x and y both are positive integers and x + y = b_i. \n  * This way, the array b changes and the next operation is performed on this modified array. \n\n\n\nFor example, if b = [2, 4, 3] and index 2 gets selected, then the possible arrays after this operation are [2, \\underline{1}, \\underline{3}, 3], [2, \\underline{2}, \\underline{2}, 3], or [2, \\underline{3}, \\underline{1}, 3]. And consequently, for this array, this single operation is enough to make it non-decreasing: [2, 4, 3] → [2, \\underline{2}, \\underline{2}, 3].\n\nIt's easy to see that every array of positive integers can be made non-decreasing this way.\n\nYouKn0wWho has an array a of n integers. Help him find the sum of extreme values of all nonempty subarrays of a modulo 998 244 353. If a subarray appears in a multiple times, its extreme value should be counted the number of times it appears.\n\nAn array d is a subarray of an array c if d can be obtained from c by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, print a single integer — the sum of extreme values of all subarrays of a modulo 998 244 353.\n\nExample\n\nInput\n\n\n4\n3\n5 4 3\n4\n3 2 1 4\n1\n69\n8\n7264 40515 28226 92776 35285 21709 75124 48163\n\n\nOutput\n\n\n5\n9\n0\n117\n\nNote\n\nLet f(l, r) denote the extreme value of [a_l, a_{l+1}, …, a_r].\n\nIn the first test case, \n\n  * f(1, 3) = 3, because YouKn0wWho can perform the following operations on the subarray [5, 4, 3] (the newly inserted elements are underlined):\n\n[5, 4, 3] → [\\underline{3}, \\underline{2}, 4, 3] → [3, 2, \\underline{2}, \\underline{2}, 3] → [\\underline{1}, \\underline{2}, 2, 2, 2, 3];\n\n  * f(1, 2) = 1, because [5, 4] → [\\underline{2}, \\underline{3}, 4];\n  * f(2, 3) = 1, because [4, 3] → [\\underline{1}, \\underline{3}, 3];\n  * f(1, 1) = f(2, 2) = f(3, 3) = 0, because they are already non-decreasing. \n\n\n\nSo the total sum of extreme values of all subarrays of a = 3 + 1 + 1 + 0 + 0 + 0 = 5.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.691974659021239}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.128359440809378}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.153800135689016}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4181250179527485}, {"name": "deepseek-coder-33b-instruct", "score": -6.207970115682007}, {"name": "Codestral-22B-v0.1", "score": -6.306548972120549}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.455047608550794}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.747218528800753}], "rank": [0, 1, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/92", "prompt": "# AB Balance\n\nYou are given a string s of length n consisting of characters a and/or b.\n\nLet \\operatorname{AB}(s) be the number of occurrences of string ab in s as a substring. Analogically, \\operatorname{BA}(s) is the number of occurrences of ba in s as a substring.\n\nIn one step, you can choose any index i and replace s_i with character a or b.\n\nWhat is the minimum number of steps you need to make to achieve \\operatorname{AB}(s) = \\operatorname{BA}(s)?\n\nReminder:\n\nThe number of occurrences of string d in s as substring is the number of indices i (1 ≤ i ≤ |s| - |d| + 1) such that substring s_i s_{i + 1} ... s_{i + |d| - 1} is equal to d. For example, \\operatorname{AB}(aabbbabaa) = 2 since there are two indices i: i = 2 where aabbbabaa and i = 6 where aabbbabaa.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows.\n\nThe first and only line of each test case contains a single string s (1 ≤ |s| ≤ 100, where |s| is the length of the string s), consisting only of characters a and/or b.\n\nOutput\n\nFor each test case, print the resulting string s with \\operatorname{AB}(s) = \\operatorname{BA}(s) you'll get making the minimum number of steps.\n\nIf there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\nb\naabbbabaa\nabbb\nabbaab\n\n\nOutput\n\n\nb\naabbbabaa\nbbbb\nabbaaa\n\nNote\n\nIn the first test case, both \\operatorname{AB}(s) = 0 and \\operatorname{BA}(s) = 0 (there are no occurrences of ab (ba) in b), so can leave s untouched.\n\nIn the second test case, \\operatorname{AB}(s) = 2 and \\operatorname{BA}(s) = 2, so you can leave s untouched. \n\nIn the third test case, \\operatorname{AB}(s) = 1 and \\operatorname{BA}(s) = 0. For example, we can change s_1 to b and make both values zero.\n\nIn the fourth test case, \\operatorname{AB}(s) = 2 and \\operatorname{BA}(s) = 1. For example, we can change s_6 to a and make both values equal to 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.5183660835992803}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6506582412937387}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.34432476748987}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.337057194863967}, {"name": "deepseek-coder-33b-instruct", "score": -5.9638055391140075}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.99692958653904}, {"name": "Codestral-22B-v0.1", "score": -6.632067651378724}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.943824878742189}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/93", "prompt": "# Update Files\n\nBerland State University has received a new update for the operating system. Initially it is installed only on the 1-st computer.\n\nUpdate files should be copied to all n computers. The computers are not connected to the internet, so the only way to transfer update files from one computer to another is to copy them using a patch cable (a cable connecting two computers directly). Only one patch cable can be connected to a computer at a time. Thus, from any computer where the update files are installed, they can be copied to some other computer in exactly one hour.\n\nYour task is to find the minimum number of hours required to copy the update files to all n computers if there are only k patch cables in Berland State University.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases.\n\nEach test case consists of a single line that contains two integers n and k (1 ≤ k ≤ n ≤ 10^{18}) — the number of computers and the number of patch cables.\n\nOutput\n\nFor each test case print one integer — the minimum number of hours required to copy the update files to all n computers.\n\nExample\n\nInput\n\n\n4\n8 3\n6 6\n7 1\n1 1\n\n\nOutput\n\n\n4\n3\n6\n0\n\nNote\n\nLet's consider the test cases of the example:\n\n  * n=8, k=3: \n    1. during the first hour, we copy the update files from the computer 1 to the computer 2; \n    2. during the second hour, we copy the update files from the computer 1 to the computer 3, and from the computer 2 to the computer 4; \n    3. during the third hour, we copy the update files from the computer 1 to the computer 5, from the computer 2 to the computer 6, and from the computer 3 to the computer 7; \n    4. during the fourth hour, we copy the update files from the computer 2 to the computer 8. \n  * n=6, k=6: \n    1. during the first hour, we copy the update files from the computer 1 to the computer 2; \n    2. during the second hour, we copy the update files from the computer 1 to the computer 3, and from the computer 2 to the computer 4; \n    3. during the third hour, we copy the update files from the computer 1 to the computer 5, and from the computer 2 to the computer 6. \n  * n=7, k=1: \n    1. during the first hour, we copy the update files from the computer 1 to the computer 2; \n    2. during the second hour, we copy the update files from the computer 1 to the computer 3; \n    3. during the third hour, we copy the update files from the computer 1 to the computer 4; \n    4. during the fourth hour, we copy the update files from the computer 4 to the computer 5; \n    5. during the fifth hour, we copy the update files from the computer 4 to the computer 6; \n    6. during the sixth hour, we copy the update files from the computer 3 to the computer 7. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.449987545831587}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.981922132807813}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.6619285198067}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.262855978269878}, {"name": "deepseek-coder-33b-instruct", "score": -5.845698616815117}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.124175603348602}, {"name": "Codestral-22B-v0.1", "score": -6.23544940179384}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.1582773934653465}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/94", "prompt": "# Banknotes\n\nIn Berland, n different types of banknotes are used. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14: 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles can be used to represent exactly 9 ⋅ 1 + 5 ⋅ 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given integer k, find the minimum positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 10; 1 ≤ k ≤ 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n ≤ 9).\n\nOutput\n\nFor each test case, print one integer — the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.179053330681029}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9343322923479804}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.1251061839820355}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.856572228844118}, {"name": "deepseek-coder-33b-instruct", "score": -6.074656137994746}, {"name": "Codestral-22B-v0.1", "score": -6.415784120730677}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4247004521615025}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.363449515453987}], "rank": [0, 1, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/95", "prompt": "# Red-Blue Matrix\n\nYou are given a matrix, consisting of n rows and m columns. The j-th cell of the i-th row contains an integer a_{ij}.\n\nFirst, you have to color each row of the matrix either red or blue in such a way that at least one row is colored red and at least one row is colored blue.\n\nThen, you have to choose an integer k (1 ≤ k < m) and cut the colored matrix in such a way that the first k columns become a separate matrix (the left matrix) and the last m-k columns become a separate matrix (the right matrix).\n\nThe coloring and the cut are called perfect if two properties hold: \n\n  * every red cell in the left matrix contains an integer greater than every blue cell in the left matrix; \n  * every blue cell in the right matrix contains an integer greater than every red cell in the right matrix. \n\n\n\nFind any perfect coloring and cut, or report that there are none.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains two integers n and m (2 ≤ n, m ≤ 5 ⋅ 10^5; n ⋅ m ≤ 10^6) — the number of rows and the number of columns in the matrix, respectively.\n\nThe i-th of the next n lines contains m integers a_{i1}, a_{i2}, ..., a_{im} (1 ≤ a_{ij} ≤ 10^6).\n\nThe sum of n ⋅ m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase print an answer. If there are no perfect colorings and cuts in the matrix, then print \"NO\".\n\nOtherwise, first, print \"YES\". Then a string, consisting of n characters: the i-th character should be 'R' if the i-th row is colored red and 'B' if it's colored blue. The string should contain at least one 'R' and at least one 'B'. Finally, print an integer k (1 ≤ k < m) — the number of columns from the left that are cut.\n\nExample\n\nInput\n\n\n3\n5 5\n1 5 8 8 7\n5 2 1 4 3\n1 6 9 7 5\n9 3 3 3 2\n1 7 9 9 8\n3 3\n8 9 8\n1 5 3\n7 5 7\n2 6\n3 3 3 2 2 2\n1 1 1 4 4 4\n\n\nOutput\n\n\nYES\nBRBRB 1\nNO\nYES\nRB 3\n\nNote\n\nThe coloring and the cut for the first testcase:\n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.200564708291809}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.628574163767108}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.477233130207158}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.531094366830485}, {"name": "deepseek-coder-33b-instruct", "score": -6.273744554645768}, {"name": "Codestral-22B-v0.1", "score": -6.474029575596995}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.580050892180665}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.075501124323703}], "rank": [1, 0, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/96", "prompt": "# Arena\n\nThere are n heroes fighting in the arena. Initially, the i-th hero has a_i health points.\n\nThe fight in the arena takes place in several rounds. At the beginning of each round, each alive hero deals 1 damage to all other heroes. Hits of all heroes occur simultaneously. Heroes whose health is less than 1 at the end of the round are considered killed.\n\nIf exactly 1 hero remains alive after a certain round, then he is declared the winner. Otherwise, there is no winner.\n\nYour task is to calculate the number of ways to choose the initial health points for each hero a_i, where 1 ≤ a_i ≤ x, so that there is no winner of the fight. The number of ways can be very large, so print it modulo 998244353. Two ways are considered different if at least one hero has a different amount of health. For example, [1, 2, 1] and [2, 1, 1] are different.\n\nInput\n\nThe only line contains two integers n and x (2 ≤ n ≤ 500; 1 ≤ x ≤ 500).\n\nOutput\n\nPrint one integer — the number of ways to choose the initial health points for each hero a_i, where 1 ≤ a_i ≤ x, so that there is no winner of the fight, taken modulo 998244353. \n\nExamples\n\nInput\n\n\n2 5\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n3 3\n\n\nOutput\n\n\n15\n\n\nInput\n\n\n5 4\n\n\nOutput\n\n\n1024\n\n\nInput\n\n\n13 37\n\n\nOutput\n\n\n976890680\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.68145193828514}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.044173444975737}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.749166628460378}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.2355053541361665}, {"name": "deepseek-coder-33b-instruct", "score": -6.304156255063791}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.341755154471491}, {"name": "Codestral-22B-v0.1", "score": -6.44094654063292}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.948674548771}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/97", "prompt": "# Tree Queries\n\nYou are given a tree consisting of n vertices. Recall that a tree is an undirected connected acyclic graph. The given tree is rooted at the vertex 1.\n\nYou have to process q queries. In each query, you are given a vertex of the tree v and an integer k.\n\nTo process a query, you may delete any vertices from the tree in any order, except for the root and the vertex v. When a vertex is deleted, its children become the children of its parent. You have to process a query in such a way that maximizes the value of c(v) - m ⋅ k (where c(v) is the resulting number of children of the vertex v, and m is the number of vertices you have deleted). Print the maximum possible value you can obtain.\n\nThe queries are independent: the changes you make to the tree while processing a query don't affect the tree in other queries.\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of vertices in the tree.\n\nThen n-1 lines follow, the i-th of them contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i) — the endpoints of the i-th edge. These edges form a tree.\n\nThe next line contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries.\n\nThen q lines follow, the j-th of them contains two integers v_j and k_j (1 ≤ v_j ≤ n; 0 ≤ k_j ≤ 2 ⋅ 10^5) — the parameters of the j-th query.\n\nOutput\n\nFor each query, print one integer — the maximum value of c(v) - m ⋅ k you can achieve.\n\nExample\n\nInput\n\n\n8\n6 7\n3 2\n8 3\n5 7\n7 4\n7 1\n7 3\n6\n1 0\n1 2\n1 3\n7 1\n5 0\n7 200000\n\n\nOutput\n\n\n5\n2\n1\n4\n0\n4\n\nNote\n\nThe tree in the first example is shown in the following picture:\n\n<image>\n\nAnswers to the queries are obtained as follows:\n\n  1. v=1,k=0: you can delete vertices 7 and 3, so the vertex 1 has 5 children (vertices 2, 4, 5, 6, and 8), and the score is 5 - 2 ⋅ 0 = 5; \n  2. v=1,k=2: you can delete the vertex 7, so the vertex 1 has 4 children (vertices 3, 4, 5, and 6), and the score is 4 - 1 ⋅ 2 = 2. \n  3. v=1,k=3: you shouldn't delete any vertices, so the vertex 1 has only one child (vertex 7), and the score is 1 - 0 ⋅ 3 = 1; \n  4. v=7,k=1: you can delete the vertex 3, so the vertex 7 has 5 children (vertices 2, 4, 5, 6, and 8), and the score is 5 - 1 ⋅ 1 = 4; \n  5. v=5,k=0: no matter what you do, the vertex 5 will have no children, so the score is 0; \n  6. v=7,k=200000: you shouldn't delete any vertices, so the vertex 7 has 4 children (vertices 3, 4, 5, and 6), and the score is 4 - 0 ⋅ 200000 = 4. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.918323117976626}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.285405596069456}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.24212789489666}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.321174148690964}, {"name": "deepseek-coder-33b-instruct", "score": -6.302311236090222}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.322809375294376}, {"name": "Codestral-22B-v0.1", "score": -6.344635860495012}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.606367498973141}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/98", "prompt": "# Linear Keyboard\n\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard — a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.0426135290786736}, {"name": "deepseek-coder-33b-instruct", "score": 0.8824773675083772}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -1.8813164616533276}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.672492105701496}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6121063953080226}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.7333285412083086}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.55126295191918}], "rank": [4, 6, 7, 5, 0, 1, 2, 3]}
{"id": "code_contests/99", "prompt": "# Odd Grasshopper\n\nThe grasshopper is located on the numeric axis at the point with coordinate x_0.\n\nHaving nothing else to do he starts jumping between integer points on the axis. Making a jump from a point with coordinate x with a distance d to the left moves the grasshopper to a point with a coordinate x - d, while jumping to the right moves him to a point with a coordinate x + d.\n\nThe grasshopper is very fond of positive integers, so for each integer i starting with 1 the following holds: exactly i minutes after the start he makes a jump with a distance of exactly i. So, in the first minutes he jumps by 1, then by 2, and so on.\n\nThe direction of a jump is determined as follows: if the point where the grasshopper was before the jump has an even coordinate, the grasshopper jumps to the left, otherwise he jumps to the right.\n\nFor example, if after 18 consecutive jumps he arrives at the point with a coordinate 7, he will jump by a distance of 19 to the right, since 7 is an odd number, and will end up at a point 7 + 19 = 26. Since 26 is an even number, the next jump the grasshopper will make to the left by a distance of 20, and it will move him to the point 26 - 20 = 6.\n\nFind exactly which point the grasshopper will be at after exactly n jumps.\n\nInput\n\nThe first line of input contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nEach of the following t lines contains two integers x_0 (-10^{14} ≤ x_0 ≤ 10^{14}) and n (0 ≤ n ≤ 10^{14}) — the coordinate of the grasshopper's initial position and the number of jumps.\n\nOutput\n\nPrint exactly t lines. On the i-th line print one integer — the answer to the i-th test case — the coordinate of the point the grasshopper will be at after making n jumps from the point x_0.\n\nExample\n\nInput\n\n\n9\n0 1\n0 2\n10 10\n10 99\n177 13\n10000000000 987654321\n-433494437 87178291199\n1 0\n-1 1\n\n\nOutput\n\n\n-1\n1\n11\n110\n190\n9012345679\n-87611785637\n1\n0\n\nNote\n\nThe first two test cases in the example correspond to the first two jumps from the point x_0 = 0. \n\nSince 0 is an even number, the first jump of length 1 is made to the left, and the grasshopper ends up at the point 0 - 1 = -1.\n\nThen, since -1 is an odd number, a jump of length 2 is made to the right, bringing the grasshopper to the point with coordinate -1 + 2 = 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.456190489956195}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4814862128909585}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.765859442654932}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.957740718341731}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.709844066034796}, {"name": "deepseek-coder-33b-instruct", "score": -5.967684018442578}, {"name": "Codestral-22B-v0.1", "score": -6.114544639665212}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [1, 0, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/100", "prompt": "# Minimum Extraction\n\nYelisey has an array a of n integers.\n\nIf a has length strictly greater than 1, then Yelisei can apply an operation called minimum extraction to it: \n\n  1. First, Yelisei finds the minimal number m in the array. If there are several identical minima, Yelisey can choose any of them. \n  2. Then the selected minimal element is removed from the array. After that, m is subtracted from each remaining element. \n\n\n\nThus, after each operation, the length of the array is reduced by 1.\n\nFor example, if a = [1, 6, -4, -2, -4], then the minimum element in it is a_3 = -4, which means that after this operation the array will be equal to a=[1 {- (-4)}, 6 {- (-4)}, -2 {- (-4)}, -4 {- (-4)}] = [5, 10, 2, 0].\n\nSince Yelisey likes big numbers, he wants the numbers in the array a to be as big as possible.\n\nFormally speaking, he wants to make the minimum of the numbers in array a to be maximal possible (i.e. he want to maximize a minimum). To do this, Yelisey can apply the minimum extraction operation to the array as many times as he wants (possibly, zero). Note that the operation cannot be applied to an array of length 1.\n\nHelp him find what maximal value can the minimal element of the array have after applying several (possibly, zero) minimum extraction operations to the array.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the original length of the array a. The second line of the description lists n space-separated integers a_i (-10^9 ≤ a_i ≤ 10^9) — elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nPrint t lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer — the maximal possible minimum in a, which can be obtained by several applications of the described operation to it.\n\nExample\n\nInput\n\n\n8\n1\n10\n2\n0 0\n3\n-1 2 0\n4\n2 10 1 7\n2\n2 3\n5\n3 2 -4 -2 0\n2\n-1 1\n1\n-2\n\n\nOutput\n\n\n10\n0\n2\n5\n2\n2\n2\n-2\n\nNote\n\nIn the first example test case, the original length of the array n = 1. Therefore minimum extraction cannot be applied to it. Thus, the array remains unchanged and the answer is a_1 = 10.\n\nIn the second set of input data, the array will always consist only of zeros.\n\nIn the third set, the array will be changing as follows: [\\color{blue}{-1}, 2, 0] → [3, \\color{blue}{1}] → [\\color{blue}{2}]. The minimum elements are highlighted with \\color{blue}{blue}. The maximal one is 2.\n\nIn the fourth set, the array will be modified as [2, 10, \\color{blue}{1}, 7] → [\\color{blue}{1}, 9, 6] → [8, \\color{blue}{5}] → [\\color{blue}{3}]. Similarly, the maximum of the minimum elements is 5.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.0334430971141155}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.276691800244945}, {"name": "Codestral-22B-v0.1", "score": -4.499775917214682}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.552781555096371}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.975463971084815}, {"name": "deepseek-coder-33b-instruct", "score": -5.93689219828226}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.150926809755854}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [1, 0, 5, 3, 2, 6, 4, 7]}
{"id": "code_contests/101", "prompt": "# Blue-Red Permutation\n\nYou are given an array of integers a of length n. The elements of the array can be either different or the same. \n\nEach element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1. \n\n\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4) — the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 ⋅ 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\nExample\n\nInput\n\n\n8\n4\n1 2 5 2\nBRBR\n2\n1 1\nBB\n5\n3 1 4 2 5\nRBRRB\n5\n3 1 3 1 3\nRBRRB\n5\n5 1 5 1 5\nRBRRB\n4\n2 2 2 2\nBRBR\n2\n1 -2\nBR\n4\n-2 -1 4 0\nRRRR\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\n\nNote\n\nIn the first test case of the example, the following sequence of moves can be performed:\n\n  * choose i=3, element a_3=5 is blue, so we decrease it, we get a=[1,2,4,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,3,4,2]; \n  * choose i=3, element a_3=4 is blue, so we decrease it, we get a=[1,3,3,2]; \n  * choose i=2, element a_2=2 is red, so we increase it, we get a=[1,4,3,2]. \n\n\n\nWe got that a is a permutation. Hence the answer is YES.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.7099557797158527}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7965672595308537}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.408713183770402}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.536404701247848}, {"name": "deepseek-coder-33b-instruct", "score": -6.038052287722214}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.344793900795618}, {"name": "Codestral-22B-v0.1", "score": -6.410487333148212}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.568439183396921}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/102", "prompt": "# Robot on the Board 1\n\nThe robot is located on a checkered rectangular board of size n × m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns — from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 × 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 10^6) — the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' — the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 ≤ r ≤ n) and c (1 ≤ c ≤ m), separated by a space — the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -1.6135965632370919}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7356676156126953}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.0258515657768}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.1800742250591965}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.2641606098965426}, {"name": "deepseek-coder-33b-instruct", "score": -6.284611658990821}, {"name": "Codestral-22B-v0.1", "score": -6.622257485920952}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [4, 0, 1, 3, 2, 6, 5, 7]}
{"id": "code_contests/103", "prompt": "# Robot on the Board 2\n\nThe robot is located on a checkered rectangular board of size n × m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns — from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell — left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. \n\n  * If the robot moves beyond the edge of the board, it falls and breaks. \n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore). \n\n\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 10000) — the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 ≤ n ≤ 2000; 1 ≤ m ≤ 2000) — the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4⋅10^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 ≤ r ≤ n; 1 ≤ c ≤ m; d ≥ 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.013785054363684}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.387561290172356}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.444786612087121}, {"name": "Codestral-22B-v0.1", "score": -5.1261486447985725}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.53228215649383}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.880555332519739}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.383479607491742}, {"name": "deepseek-coder-33b-instruct", "score": -6.403229767764626}], "rank": [1, 0, 7, 5, 3, 2, 4, 6]}
{"id": "code_contests/104", "prompt": "# Banquet Preparations 1\n\nA known chef has prepared n dishes: the i-th dish consists of a_i grams of fish and b_i grams of meat. \n\nThe banquet organizers estimate the balance of n dishes as follows. The balance is equal to the absolute value of the difference between the total mass of fish and the total mass of meat.\n\nTechnically, the balance equals to \\left|∑_{i=1}^n a_i - ∑_{i=1}^n b_i\\right|. The smaller the balance, the better.\n\nIn order to improve the balance, a taster was invited. He will eat exactly m grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he should eat exactly m grams of each dish in total.\n\nDetermine how much of what type of food the taster should eat from each dish so that the value of the balance is as minimal as possible. If there are several correct answers, you may choose any of them.\n\nInput\n\nThe first line of input data contains an integer t (1 ≤ t ≤ 10^4) — the number of the test cases.\n\nEach test case's description is preceded by a blank line. Next comes a line that contains integers n and m (1 ≤ n ≤ 2 ⋅ 10^5; 0 ≤ m ≤ 10^6). The next n lines describe dishes, the i-th of them contains a pair of integers a_i and b_i (0 ≤ a_i, b_i ≤ 10^6) — the masses of fish and meat in the i-th dish.\n\nIt is guaranteed that it is possible to eat m grams of food from each dish. In other words, m ≤ a_i+b_i for all i from 1 to n inclusive.\n\nThe sum of all n values over all test cases in the test does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print on the first line the minimal balance value that can be achieved by eating exactly m grams of food from each dish.\n\nThen print n lines that describe a way to do this: the i-th line should contain two integers x_i and y_i (0 ≤ x_i ≤ a_i; 0 ≤ y_i ≤ b_i; x_i+y_i=m), where x_i is how many grams of fish taster should eat from the i-th meal and y_i is how many grams of meat.\n\nIf there are several ways to achieve a minimal balance, find any of them.\n\nExample\n\nInput\n\n\n8\n\n1 5\n3 4\n\n1 6\n3 4\n\n2 2\n1 3\n4 2\n\n2 4\n1 3\n1 7\n\n3 6\n1 7\n1 8\n1 9\n\n3 6\n1 8\n1 9\n30 10\n\n3 4\n3 1\n3 2\n4 1\n\n5 4\n0 7\n6 4\n0 8\n4 1\n5 3\n\n\nOutput\n\n\n0\n2 3\n1\n3 3\n0\n1 1\n1 1\n2\n1 3\n0 4\n3\n0 6\n0 6\n0 6\n7\n1 5\n1 5\n6 0\n0\n3 1\n3 1\n3 1\n0\n0 4\n2 2\n0 4\n3 1\n1 3\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9099408392238213}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.079366279041388}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.195353975489931}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.583917272795493}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.282191977745723}, {"name": "deepseek-coder-33b-instruct", "score": -6.3834187931881985}, {"name": "Codestral-22B-v0.1", "score": -6.570644838752318}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.55665585774252}], "rank": [1, 0, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/105", "prompt": "# Banquet Preparations 2\n\nThe chef has cooked n dishes yet again: the i-th dish consists of a_i grams of fish and b_i grams of meat. \n\nBanquet organizers consider two dishes i and j equal if a_i=a_j and b_i=b_j at the same time.\n\nThe banquet organizers estimate the variety of n dishes as follows. The variety of a set of dishes is equal to the number of different dishes in it. The less variety is, the better.\n\nIn order to reduce the variety, a taster was invited. He will eat exactly m_i grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he will eat exactly m_i grams of the i-th dish in total.\n\nDetermine how much of what type of food the taster should eat from each dish so that the value of variety is the minimum possible. If there are several correct answers, you may output any of them.\n\nInput\n\nThe first line of input data contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nEach test case's description is preceded by a blank line. Next comes a line that contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of dishes. Then follows n lines, i-th of which contains three integers a_i, b_i and m_i (0 ≤ a_i, b_i ≤ 10^6; 0 ≤ m_i ≤ a_i+b_i) — the mass of fish in i-th dish, the mass of meat in i-th dish and how many grams in total the taster should eat in i-th dish.\n\nThe sum of all n values for all input data sets in the test does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print on the first line the minimum value of variety that can be achieved by eating exactly m_i grams of food (for all i from 1 to n) from a dish i.\n\nThen print n lines that describe a way to do this: the i-th line should contain two integers x_i and y_i (0 ≤ x_i ≤ a_i; 0 ≤ y_i ≤ b_i; x_i+y_i=m_i), where x_i is how many grams of fish the taster should eat from i-th dish, and y_i is how many grams of meat.\n\nIf there are several ways to achieve a minimum balance, print any of them.\n\nExample\n\nInput\n\n\n5\n\n3\n10 10 2\n9 9 0\n10 9 1\n\n2\n3 4 1\n5 1 2\n\n3\n7 2 5\n6 5 4\n5 5 6\n\n1\n13 42 50\n\n5\n5 7 12\n3 1 4\n7 3 7\n0 0 0\n4 1 5\n\n\nOutput\n\n\n1\n1 1\n0 0\n1 0\n2\n0 1\n1 1\n2\n3 2\n0 4\n1 5\n1\n8 42\n2\n5 7\n3 1\n4 3\n0 0\n4 1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.9054413940625916}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.089265016478802}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.895089753380064}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3621931681355095}, {"name": "deepseek-coder-33b-instruct", "score": -6.245804394190576}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4640648022009835}, {"name": "Codestral-22B-v0.1", "score": -6.8143892081726785}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.594010766284235}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/106", "prompt": "# Find Array\n\nGiven n, find any array a_1, a_2, …, a_n of integers such that all of the following conditions hold: \n\n  * 1 ≤ a_i ≤ 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < … <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 ≤ n ≤ 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, …, a_n — the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\nExample\n\nInput\n\n\n3\n1\n2\n7\n\n\nOutput\n\n\n1\n2 3\n111 1111 11111 111111 1111111 11111111 111111111\n\nNote\n\nIn the first test case, array [1] satisfies all the conditions.\n\nIn the second test case, array [2, 3] satisfies all the conditions, as 2<3 and 3 is not divisible by 2.\n\nIn the third test case, array [111, 1111, 11111, 111111, 1111111, 11111111, 111111111] satisfies all the conditions, as it's increasing and a_i isn't divisible by a_{i-1} for any i from 2 to 7.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.2020958248281834}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7813674735490874}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.364676996338768}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.9713953807586515}, {"name": "deepseek-coder-33b-instruct", "score": -5.646322838982923}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.704102423467121}, {"name": "Codestral-22B-v0.1", "score": -5.897785536223993}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.505729870271746}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/107", "prompt": "# Build the Permutation\n\nYou are given three integers n, a, b. Determine if there exists a permutation p_1, p_2, …, p_n of integers from 1 to n, such that:\n\n  * There are exactly a integers i with 2 ≤ i ≤ n-1 such that p_{i-1} < p_i > p_{i+1} (in other words, there are exactly a local maximums).\n\n  * There are exactly b integers i with 2 ≤ i ≤ n-1 such that p_{i-1} > p_i < p_{i+1} (in other words, there are exactly b local minimums).\n\n\n\n\nIf such permutations exist, find any such permutation.\n\nInput\n\nThe first line of the input contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers n, a and b (2 ≤ n ≤ 10^5, 0 ≤ a,b ≤ n).\n\nThe sum of n over all test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, if there is no permutation with the requested properties, output -1.\n\nOtherwise, print the permutation that you are found. If there are several such permutations, you may print any of them.\n\nExample\n\nInput\n\n\n3\n4 1 1\n6 1 2\n6 4 0\n\n\nOutput\n\n\n1 3 2 4\n4 2 3 1 5 6\n-1\n\nNote\n\nIn the first test case, one example of such permutations is [1, 3, 2, 4]. In it p_1 < p_2 > p_3, and 2 is the only such index, and p_2> p_3 < p_4, and 3 the only such index.\n\nOne can show that there is no such permutation for the third test case.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.70721041079866}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.005659057389413}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.3509857151151206}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.536735662693861}, {"name": "deepseek-coder-33b-instruct", "score": -6.1233082664127}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4006029005824425}, {"name": "Codestral-22B-v0.1", "score": -6.522107503944374}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.425548572063721}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/108", "prompt": "# Game Master\n\nn players are playing a game. \n\nThere are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. \n\nYou are the game master and want to organize a tournament. There will be a total of n-1 battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. \n\nIn the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of players.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9, a_i ≠ a_j for i ≠ j), where a_i is the strength of the i-th player on the first map. \n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9, b_i ≠ b_j for i ≠ j), where b_i is the strength of the i-th player on the second map. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a string of length n. i-th character should be \"1\" if the i-th player can win the tournament, or \"0\" otherwise.\n\nExample\n\nInput\n\n\n3\n4\n1 2 3 4\n1 2 3 4\n4\n11 12 20 21\n44 22 11 30\n1\n1000000000\n1000000000\n\n\nOutput\n\n\n0001\n1111\n1\n\nNote\n\nIn the first test case, the 4-th player will beat any other player on any game, so he will definitely win the tournament.\n\nIn the second test case, everyone can be a winner. \n\nIn the third test case, there is only one player. Clearly, he will win the tournament.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.656459562857825}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.017823424314358}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.339305747225347}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4629330962230584}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.03141576261021}, {"name": "deepseek-coder-33b-instruct", "score": -6.107726426392427}, {"name": "Codestral-22B-v0.1", "score": -6.395695560701332}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.4246472651077084}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/109", "prompt": "# Dominoes\n\nYou are given n dominoes. Each domino has a left and a right cell. Each cell can be colored either black or white. Some cells are already colored, while some aren't yet.\n\nThe coloring is said to be valid if and only if it is possible to rearrange the dominoes in some order such that for each 1 ≤ i ≤ n the color of the right cell of the i-th domino is different from the color of the left cell of the ((i mod n)+1)-st domino. \n\nNote that you can't rotate the dominoes, so the left cell always remains the left cell, and the right cell always remains the right cell.\n\nCount the number of valid ways to color the yet uncolored cells of dominoes. Two ways are considered different if there is a cell that is colored white in one way and black in the other. In particular, colorings BW WB and WB BW different (and both invalid).\n\nAs this number can be very big, output it modulo 998 244 353.\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of dominoes.\n\nThe next n lines describe dominoes. Each line contains two characters which represent the left and the right cell. Character B means that the corresponding cell is black, character W means that the corresponding cell is white, and ? means that the cell is yet to be colored. \n\nOutput\n\nPrint a single integer — the answer to the problem.\n\nExamples\n\nInput\n\n\n1\n?W\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n2\n??\nW?\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n4\nBB\n??\nW?\n??\n\n\nOutput\n\n\n10\n\nNote\n\nIn the first test case, there is only one domino, and we need the color of its right cell to be different from the color of its left cell. There is only one way to achieve this.\n\nIn the second test case, there are only 2 such colorings:\n\nBB WW and WB WB.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.824458748355759}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.160756327741352}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.17227783968181}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.399645764132459}, {"name": "deepseek-coder-33b-instruct", "score": -6.380861247037082}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.587219381659278}, {"name": "Codestral-22B-v0.1", "score": -6.828473948054418}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.722868733244671}], "rank": [0, 1, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/110", "prompt": "# The Cells on the Paper\n\nOn an endless checkered sheet of paper, n cells are chosen and colored in three colors, where n is divisible by 3. It turns out that there are exactly n/3 marked cells of each of three colors! \n\nFind the largest such k that it's possible to choose k/3 cells of each color, remove all other marked cells, and then select three rectangles with sides parallel to the grid lines so that the following conditions hold:\n\n  * No two rectangles can intersect (but they can share a part of the boundary). In other words, the area of intersection of any two of these rectangles must be 0.\n  * The i-th rectangle contains all the chosen cells of the i-th color and no chosen cells of other colors, for i = 1, 2, 3. \n\nInput\n\nThe first line of the input contains a single integer n — the number of the marked cells (3 ≤ n ≤ 10^5, n is divisible by 3).\n\nThe i-th of the following n lines contains three integers x_i, y_i, c_i (|x_i|,|y_i| ≤ 10^9; 1 ≤ c_i ≤ 3), where (x_i, y_i) are the coordinates of the i-th marked cell and c_i is its color.\n\nIt's guaranteed that all cells (x_i, y_i) in the input are distinct, and that there are exactly n/3 cells of each color.\n\nOutput\n\nOutput a single integer k — the largest number of cells you can leave.\n\nExamples\n\nInput\n\n\n9\n2 3 1\n4 1 2\n2 1 3\n3 4 1\n5 3 2\n4 4 3\n2 4 1\n5 2 2\n3 5 3\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3\n1 1 1\n2 2 2\n3 3 3\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first sample, it's possible to leave 6 cells with indexes 1, 5, 6, 7, 8, 9.\n\nIn the second sample, it's possible to leave 3 cells with indexes 1, 2, 3.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.527771293719179}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.254477313726906}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.668708206792079}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.989860994879779}, {"name": "deepseek-coder-33b-instruct", "score": -6.396529575194807}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.408937274340423}, {"name": "Codestral-22B-v0.1", "score": -6.664332486809546}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.560205457209978}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/111", "prompt": "# MEX counting\n\nFor an array c of nonnegative integers, MEX(c) denotes the smallest nonnegative integer that doesn't appear in it. For example, MEX([0, 1, 3]) = 2, MEX([42]) = 0.\n\nYou are given integers n, k, and an array [b_1, b_2, …, b_n].\n\nFind the number of arrays [a_1, a_2, …, a_n], for which the following conditions hold:\n\n  * 0 ≤ a_i ≤ n for each i for each i from 1 to n.\n\n  * |MEX([a_1, a_2, …, a_i]) - b_i| ≤ k for each i from 1 to n.\n\n\n\n\nAs this number can be very big, output it modulo 998 244 353.\n\nInput\n\nThe first line of the input contains two integers n, k (1 ≤ n ≤ 2000, 0 ≤ k ≤ 50).\n\nThe second line of the input contains n integers b_1, b_2, …, b_n (-k ≤ b_i ≤ n+k) — elements of the array b.\n\nOutput\n\nOutput a single integer — the number of arrays which satisfy the conditions from the statement, modulo 998 244 353.\n\nExamples\n\nInput\n\n\n4 0\n0 0 0 0\n\n\nOutput\n\n\n256\n\n\nInput\n\n\n4 1\n0 0 0 0\n\n\nOutput\n\n\n431\n\n\nInput\n\n\n4 1\n0 0 1 1\n\n\nOutput\n\n\n509\n\n\nInput\n\n\n5 2\n0 0 2 2 0\n\n\nOutput\n\n\n6546\n\n\nInput\n\n\n3 2\n-2 0 4\n\n\nOutput\n\n\n11\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.9511667925457727}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.376360613047255}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.224455517949581}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.896153367303157}, {"name": "deepseek-coder-33b-instruct", "score": -6.254559313924419}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.301651474899832}, {"name": "Codestral-22B-v0.1", "score": -6.4348674945565385}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.596544979500622}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/112", "prompt": "# Alphabetic Tree\n\nYou are given m strings and a tree on n nodes. Each edge has some letter written on it.\n\nYou have to answer q queries. Each query is described by 4 integers u, v, l and r. The answer to the query is the total number of occurrences of str(u,v) in strings with indices from l to r. str(u,v) is defined as the string that is made by concatenating letters written on the edges on the shortest path from u to v (in order that they are traversed).\n\nInput\n\nThe first line of the input contains three integers n, m and q (2 ≤ n ≤ 10^5, 1 ≤ m,q ≤ 10^5).\n\nThe i-th of the following n-1 lines contains two integers u_i, v_i and a lowercase Latin letter c_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), denoting the edge between nodes u_i, v_i with a character c_i on it. \n\nIt's guaranteed that these edges form a tree.\n\nThe following m lines contain the strings consisting of lowercase Latin letters. The total length of those strings does not exceed 10^5.\n\nThen q lines follow, each containing four integers u, v, l and r (1 ≤ u,v ≤ n, u ≠ v, 1 ≤ l ≤ r ≤ m), denoting the queries. \n\nOutput\n\nFor each query print a single integer — the answer to the query.\n\nExamples\n\nInput\n\n\n2 5 3\n1 2 a\naab\nabab\naaa\nb\na\n2 1 1 5\n1 2 1 3\n2 1 3 5\n\n\nOutput\n\n\n8\n7\n4\n\n\nInput\n\n\n9 5 6\n1 2 a\n2 7 c\n1 3 b\n3 4 b\n4 6 b\n3 5 a\n5 8 b\n5 9 c\nababa\ncabbb\nbac\nbbbac\nabacaba\n2 7 1 4\n2 5 1 5\n6 3 4 4\n6 9 4 5\n5 7 3 5\n5 3 1 5\n\n\nOutput\n\n\n3\n4\n2\n1\n1\n10\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.14933767051614}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.330259543851999}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.15933112324055}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.580665237409115}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.248244014819946}, {"name": "Codestral-22B-v0.1", "score": -6.633318433280377}, {"name": "deepseek-coder-33b-instruct", "score": -6.735699250886043}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.815783167395051}], "rank": [1, 0, 2, 3, 4, 5, 6, 7]}
{"id": "code_contests/113", "prompt": "# Long Comparison\n\nMonocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 ≤ x_1 ≤ 10^6; 0 ≤ p_1 ≤ 10^6) — the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 ≤ x_2 ≤ 10^6; 0 ≤ p_2 ≤ 10^6) — the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "CodeLlama-7b-Instruct-hf", "score": -1.8641006249569658}, {"name": "deepseek-coder-33b-instruct", "score": -2.7365119940913454}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.286160571673797}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.671529815778823}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0271383661952695}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.717448665420015}, {"name": "Codestral-22B-v0.1", "score": -6.168501330721941}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.5220864991063685}], "rank": [2, 6, 0, 1, 3, 4, 5, 7]}
{"id": "code_contests/114", "prompt": "# Absent Remainder\n\nYou are given a sequence a_1, a_2, ..., a_n consisting of n pairwise distinct positive integers.\n\nFind \\left⌊ \\frac n 2 \\right⌋ different pairs of integers x and y such that: \n\n  * x ≠ y; \n  * x and y appear in a; \n  * x~mod~y doesn't appear in a. \n\n\n\nNote that some x or y can belong to multiple pairs.\n\n⌊ x ⌋ denotes the floor function — the largest integer less than or equal to x. x~mod~y denotes the remainder from dividing x by y.\n\nIf there are multiple solutions, print any of them. It can be shown that at least one solution always exists.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThe first line of each testcase contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of the sequence.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nAll numbers in the sequence are pairwise distinct. The sum of n over all testcases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nThe answer for each testcase should contain \\left⌊ \\frac n 2 \\right⌋ different pairs of integers x and y such that x ≠ y, x and y appear in a and x~mod~y doesn't appear in a. Print the pairs one after another.\n\nYou can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is x and the second number is y. All pairs should be pairwise distinct.\n\nIf there are multiple solutions, print any of them.\n\nExample\n\nInput\n\n\n4\n2\n1 4\n4\n2 8 3 4\n5\n3 8 5 9 7\n6\n2 7 5 3 4 8\n\n\nOutput\n\n\n4 1\n8 2\n8 4\n9 5\n7 5\n8 7\n4 3\n5 2\n\nNote\n\nIn the first testcase there are only two pairs: (1, 4) and (4, 1). \\left⌊ \\frac 2 2 \\right⌋=1, so we have to find one pair. 1~mod~4=1, and 1 appears in a, so that pair is invalid. Thus, the only possible answer is a pair (4, 1).\n\nIn the second testcase, we chose pairs 8~mod~2=0 and 8~mod~4=0. 0 doesn't appear in a, so that answer is valid. There are multiple possible answers for that testcase.\n\nIn the third testcase, the chosen pairs are 9~mod~5=4 and 7~mod~5=2. Neither 4, nor 2, appears in a, so that answer is valid.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6961529380804348}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7698140716099355}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.407694381422459}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.067393627914864}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.123544887465189}, {"name": "deepseek-coder-33b-instruct", "score": -6.153761952071009}, {"name": "Codestral-22B-v0.1", "score": -6.431202249158242}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.693786061222026}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/115", "prompt": "# Poisoned Dagger\n\nMonocarp is playing yet another computer game. In this game, his character has to kill a dragon. The battle with the dragon lasts 100^{500} seconds, during which Monocarp attacks the dragon with a poisoned dagger. The i-th attack is performed at the beginning of the a_i-th second from the battle start. The dagger itself does not deal damage, but it applies a poison effect on the dragon, which deals 1 damage during each of the next k seconds (starting with the same second when the dragon was stabbed by the dagger). However, if the dragon has already been poisoned, then the dagger updates the poison effect (i.e. cancels the current poison effect and applies a new one).\n\nFor example, suppose k = 4, and Monocarp stabs the dragon during the seconds 2, 4 and 10. Then the poison effect is applied at the start of the 2-nd second and deals 1 damage during the 2-nd and 3-rd seconds; then, at the beginning of the 4-th second, the poison effect is reapplied, so it deals exactly 1 damage during the seconds 4, 5, 6 and 7; then, during the 10-th second, the poison effect is applied again, and it deals 1 damage during the seconds 10, 11, 12 and 13. In total, the dragon receives 10 damage.\n\nMonocarp knows that the dragon has h hit points, and if he deals at least h damage to the dragon during the battle — he slays the dragon. Monocarp has not decided on the strength of the poison he will use during the battle, so he wants to find the minimum possible value of k (the number of seconds the poison effect lasts) that is enough to deal at least h damage to the dragon.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of the test case contains two integers n and h (1 ≤ n ≤ 100; 1 ≤ h ≤ 10^{18}) — the number of Monocarp's attacks and the amount of damage that needs to be dealt.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9; a_i < a_{i + 1}), where a_i is the second when the i-th attack is performed.\n\nOutput\n\nFor each test case, print a single integer — the minimum value of the parameter k, such that Monocarp will cause at least h damage to the dragon.\n\nExample\n\nInput\n\n\n4\n2 5\n1 5\n3 10\n2 4 10\n5 3\n1 2 4 5 7\n4 1000\n3 25 64 1337\n\n\nOutput\n\n\n3\n4\n1\n470\n\nNote\n\nIn the first example, for k=3, damage is dealt in seconds [1, 2, 3, 5, 6, 7].\n\nIn the second example, for k=4, damage is dealt in seconds [2, 3, 4, 5, 6, 7, 10, 11, 12, 13].\n\nIn the third example, for k=1, damage is dealt in seconds [1, 2, 4, 5, 7].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.7654169528492112}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.846822932179891}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.880903786369276}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.289720519322518}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.332602844514587}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.518454810714074}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.315546048939768}, {"name": "Codestral-22B-v0.1", "score": -6.42629426384605}], "rank": [6, 1, 0, 3, 2, 7, 4, 5]}
{"id": "code_contests/116", "prompt": "# MEX Sequences\n\nLet's call a sequence of integers x_1, x_2, ..., x_k MEX-correct if for all i (1 ≤ i ≤ k) |x_i - \\operatorname{MEX}(x_1, x_2, ..., x_i)| ≤ 1 holds. Where \\operatorname{MEX}(x_1, ..., x_k) is the minimum non-negative integer that doesn't belong to the set x_1, ..., x_k. For example, \\operatorname{MEX}(1, 0, 1, 3) = 2 and \\operatorname{MEX}(2, 1, 5) = 0.\n\nYou are given an array a consisting of n non-negative integers. Calculate the number of non-empty MEX-correct subsequences of a given array. The number of subsequences can be very large, so print it modulo 998244353. \n\nNote: a subsequence of an array a is a sequence [a_{i_1}, a_{i_2}, ..., a_{i_m}] meeting the constraints 1 ≤ i_1 < i_2 < ... < i_m ≤ n. If two different ways to choose the sequence of indices [i_1, i_2, ..., i_m] yield the same subsequence, the resulting subsequence should be counted twice (i. e. two subsequences are different if their sequences of indices [i_1, i_2, ..., i_m] are not the same).\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 5 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ n).\n\nThe sum of n over all test cases doesn't exceed 5 ⋅ 10^5.\n\nOutput\n\nFor each test case, print a single integer — the number of non-empty MEX-correct subsequences of a given array, taken modulo 998244353.\n\nExample\n\nInput\n\n\n4\n3\n0 2 1\n2\n1 0\n5\n0 0 0 0 0\n4\n0 1 2 3\n\n\nOutput\n\n\n4\n2\n31\n7\n\nNote\n\nIn the first example, the valid subsequences are [0], [1], [0,1] and [0,2].\n\nIn the second example, the valid subsequences are [0] and [1].\n\nIn the third example, any non-empty subsequence is valid. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.8323735537526655}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9943768864357185}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.406777074743536}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.47038654687764}, {"name": "Codestral-22B-v0.1", "score": -6.388695850289042}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.417202760055702}, {"name": "deepseek-coder-33b-instruct", "score": -6.4513041976794785}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.410724522050333}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "code_contests/117", "prompt": "# Crazy Robot\n\nThere is a grid, consisting of n rows and m columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 ≤ n, m ≤ 10^6; n ⋅ m ≤ 10^6) — the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' — the cell is free; \n  * '#' — the cell is blocked; \n  * 'L' — the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n ⋅ m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.900355200560464}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.222151266709757}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.391807709635375}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.70645888985961}, {"name": "deepseek-coder-33b-instruct", "score": -6.329186003129626}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.492167105102987}, {"name": "Codestral-22B-v0.1", "score": -6.522945375799006}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.144650244701251}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/118", "prompt": "# Tree Coloring\n\nYou are given a rooted tree consisting of n vertices numbered from 1 to n. The root of the tree is the vertex 1.\n\nYou have to color all vertices of the tree into n colors (also numbered from 1 to n) so that there is exactly one vertex for each color. Let c_i be the color of vertex i, and p_i be the parent of vertex i in the rooted tree. The coloring is considered beautiful if there is no vertex k (k > 1) such that c_k = c_{p_k} - 1, i. e. no vertex such that its color is less than the color of its parent by exactly 1.\n\nCalculate the number of beautiful colorings, and print it modulo 998244353.\n\nInput\n\nThe first line contains one integer n (2 ≤ n ≤ 250000) — the number of vertices in the tree.\n\nThen n-1 lines follow, the i-th line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n; x_i ≠ y_i) denoting an edge between the vertex x_i and the vertex y_i. These edges form a tree.\n\nOutput\n\nPrint one integer — the number of beautiful colorings, taken modulo 998244353.\n\nExamples\n\nInput\n\n\n5\n1 2\n3 2\n4 2\n2 5\n\n\nOutput\n\n\n42\n\n\nInput\n\n\n5\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n53\n\n\nInput\n\n\n20\n20 19\n20 4\n12 4\n5 8\n1 2\n20 7\n3 10\n7 18\n11 8\n9 10\n17 10\n1 15\n11 16\n14 11\n18 10\n10 1\n14 2\n13 17\n20 6\n\n\nOutput\n\n\n955085064\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.097207127835577}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.117018879260973}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.149631726151837}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4207296705880825}, {"name": "deepseek-coder-33b-instruct", "score": -6.340359303727752}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.44914252666308}, {"name": "Codestral-22B-v0.1", "score": -6.744636169412329}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.423444257443825}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/119", "prompt": "# Closing The Gap\n\nThere are n block towers in a row, where tower i has a height of a_i. You're part of a building crew, and you want to make the buildings look as nice as possible. In a single day, you can perform the following operation:\n\n  * Choose two indices i and j (1 ≤ i, j ≤ n; i ≠ j), and move a block from tower i to tower j. This essentially decreases a_i by 1 and increases a_j by 1. \n\n\n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 100) — the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7) — the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer — the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.339180123911629}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.4728356399149494}, {"name": "Codestral-22B-v0.1", "score": -4.474605888078927}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.549742039078474}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.151579146436232}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.330978148787585}, {"name": "deepseek-coder-33b-instruct", "score": -5.553145614128739}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.149683206967728}], "rank": [0, 1, 5, 3, 2, 4, 6, 7]}
{"id": "code_contests/120", "prompt": "# And It's Non-Zero\n\nYou are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 ≤ l ≤ r ≤ 2 ⋅ 10^5) — the description of the array.\n\nOutput\n\nFor each test case, output a single integer — the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.170861359766441}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6982355490379613}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.529756746698217}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.74615207102271}, {"name": "deepseek-coder-33b-instruct", "score": -5.970904633142621}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.18413239595608}, {"name": "Codestral-22B-v0.1", "score": -6.759290072842313}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.4249477910303305}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/121", "prompt": "# Menorah\n\nThere are n candles on a Hanukkah menorah, and some of its candles are initially lit. We can describe which candles are lit with a binary string s, where the i-th candle is lit if and only if s_i=1.\n\n<image>\n\nInitially, the candle lights are described by a string a. In an operation, you select a candle that is currently lit. By doing so, the candle you selected will remain lit, and every other candle will change (if it was lit, it will become unlit and if it was unlit, it will become lit).\n\nYou would like to make the candles look the same as string b. Your task is to determine if it is possible, and if it is, find the minimum number of operations required.\n\nInput\n\nThe first line contains an integer t (1≤ t≤ 10^4) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 10^5) — the number of candles.\n\nThe second line contains a string a of length n consisting of symbols 0 and 1 — the initial pattern of lights.\n\nThe third line contains a string b of length n consisting of symbols 0 and 1 — the desired pattern of lights.\n\nIt is guaranteed that the sum of n does not exceed 10^5.\n\nOutput\n\nFor each test case, output the minimum number of operations required to transform a to b, or -1 if it's impossible.\n\nExample\n\nInput\n\n\n5\n5\n11010\n11010\n2\n01\n11\n3\n000\n101\n9\n100010111\n101101100\n9\n001011011\n011010101\n\n\nOutput\n\n\n0\n1\n-1\n3\n4\n\nNote\n\nIn the first test case, the two strings are already equal, so we don't have to perform any operations.\n\nIn the second test case, we can perform a single operation selecting the second candle to transform 01 into 11.\n\nIn the third test case, it's impossible to perform any operations because there are no lit candles to select.\n\nIn the fourth test case, we can perform the following operations to transform a into b: \n\n  1. Select the 7-th candle: 100010{\\color{red}1}11→ 011101{\\color{red} 1}00. \n  2. Select the 2-nd candle: 0{\\color{red} 1}1101100→ 1{\\color{red} 1}0010011. \n  3. Select the 1-st candle: {\\color{red}1}10010011→ {\\color{red}1}01101100. \n\n\n\nIn the fifth test case, we can perform the following operations to transform a into b: \n\n  1. Select the 6-th candle: 00101{\\color{red}1}011→ 11010{\\color{red}1}100 \n  2. Select the 2-nd candle: 1{\\color{red}1}0101100→ 0{\\color{red}1}1010011 \n  3. Select the 8-th candle: 0110100{\\color{red}1}1→ 1001011{\\color{red}1}0 \n  4. Select the 7-th candle: 100101{\\color{red}1}10→ 011010{\\color{red}1}01 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.579845533089801}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.62263280829501}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.69800457628051}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.37433351697106}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.748220324086769}, {"name": "deepseek-coder-33b-instruct", "score": -6.0970130450960225}, {"name": "Codestral-22B-v0.1", "score": -6.386458355348851}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [1, 0, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/122", "prompt": "# X(or)-mas Tree\n\n'Twas the night before Christmas, and Santa's frantically setting up his new Christmas tree! There are n nodes in the tree, connected by n-1 edges. On each edge of the tree, there's a set of Christmas lights, which can be represented by an integer in binary representation.\n\n<image>\n\nHe has m elves come over and admire his tree. Each elf is assigned two nodes, a and b, and that elf looks at all lights on the simple path between the two nodes. After this, the elf's favorite number becomes the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of the values of the lights on the edges in that path.\n\nHowever, the North Pole has been recovering from a nasty bout of flu. Because of this, Santa forgot some of the configurations of lights he had put on the tree, and he has already left the North Pole! Fortunately, the elves came to the rescue, and each one told Santa what pair of nodes he was assigned (a_i, b_i), as well as the parity of the number of set bits in his favorite number. In other words, he remembers whether the number of 1's when his favorite number is written in binary is odd or even.\n\nHelp Santa determine if it's possible that the memories are consistent, and if it is, remember what his tree looked like, and maybe you'll go down in history!\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers, n and m (2 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ m ≤ 2 ⋅ 10^5) — the size of tree and the number of elves respectively.\n\nThe next n-1 lines of each test case each contains three integers, x, y, and v (1 ≤ x, y ≤ n; -1 ≤ v < 2^{30}) — meaning that there's an edge between nodes x and y. If \n\n  * v = -1: Santa doesn't remember what the set of lights were on for this edge. \n  * v ≥ 0: The set of lights on the edge is v. \n\n\n\nThe next m lines of each test case each contains three integers, a, b, and p (1 ≤ a, b ≤ n; a ≠ b; 0 ≤ p ≤ 1) — the nodes that the elf was assigned to, and the parity of the number of set bits in the elf's favorite number.\n\nIt is guaranteed that the sum of all n and the sum of all m don't exceed 2 ⋅ 10^5 each.\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nFor each test case, first print either YES or NO (in any case), whether there's a tree consistent with Santa's memory or not. \n\nIf the answer is YES, print n-1 lines each containing three integers: x, y, and v (1 ≤ x, y ≤ n; 0 ≤ v < 2^{30}) — the edge and the integer on that edge. The set of edges must be the same as in the input, and if the value of some edge was specified earlier, it can not change. You can print the edges in any order.\n\nIf there are multiple answers, print any.\n\nExample\n\nInput\n\n\n4\n6 5\n1 2 -1\n1 3 1\n4 2 7\n6 3 0\n2 5 -1\n2 3 1\n2 5 0\n5 6 1\n6 1 1\n4 5 1\n5 3\n1 2 -1\n1 3 -1\n1 4 1\n4 5 -1\n2 4 0\n3 4 1\n2 3 1\n3 3\n1 2 -1\n1 3 -1\n1 2 0\n1 3 1\n2 3 0\n2 1\n1 2 1\n1 2 0\n\n\nOutput\n\n\nYES\n1 2 0\n1 3 1\n2 4 7\n3 6 0\n2 5 0\nYES\n1 2 1\n1 3 0\n1 4 1\n4 5 1\nNO\nNO\n\nNote\n\nThe first test case is the image in the statement.\n\nOne possible answer is assigning the value of the edge (1, 2) to 5, and the value of the edge (2, 5) to 3. This is correct because: \n\n  * The first elf goes from node 2 to node 3. This elf's favorite number is 4, so he remembers the value 1 (as 4 has an odd number of 1 bits in its binary representation). \n  * The second elf goes from node 2 to node 5. This elf's favorite number is 3, so he remembers the value 0 (as 3 has an even number of 1 bits in its binary representation). \n  * The third elf goes from node 5 to node 6. This elf's favorite number is 7, so he remembers the value 1 (as 7 has an odd number of 1 bits in its binary representation). \n  * The fourth elf goes from node 6 to node 1. This elf's favorite number is 1, so he remembers the value 1 (as 1 has an odd number of 1 bits in its binary representation). \n  * The fifth elf goes from node 4 to node 5. This elf's favorite number is 4, so he remembers the number 1 (as 4 has an odd number of 1 bits in its binary representation). \n\n\n\nNote that there are other possible answers.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.22174050474054}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.393806973209413}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.381922950402833}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.525086338077286}, {"name": "deepseek-coder-33b-instruct", "score": -6.612250690273209}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.634118113450941}, {"name": "Codestral-22B-v0.1", "score": -6.852253139820531}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.663713865073769}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/123", "prompt": "# Purple Crayon\n\nTwo players, Red and Blue, are at it again, and this time they're playing with crayons! The mischievous duo is now vandalizing a rooted tree, by coloring the nodes while playing their favorite game.\n\nThe game works as follows: there is a tree of size n, rooted at node 1, where each node is initially white. Red and Blue get one turn each. Red goes first. \n\nIn Red's turn, he can do the following operation any number of times: \n\n  * Pick any subtree of the rooted tree, and color every node in the subtree red. \n\nHowever, to make the game fair, Red is only allowed to color k nodes of the tree. In other words, after Red's turn, at most k of the nodes can be colored red.\n\nThen, it's Blue's turn. Blue can do the following operation any number of times: \n\n  * Pick any subtree of the rooted tree, and color every node in the subtree blue. However, he's not allowed to choose a subtree that contains a node already colored red, as that would make the node purple and no one likes purple crayon. \n\nNote: there's no restriction on the number of nodes Blue can color, as long as he doesn't color a node that Red has already colored.\n\nAfter the two turns, the score of the game is determined as follows: let w be the number of white nodes, r be the number of red nodes, and b be the number of blue nodes. The score of the game is w ⋅ (r - b).\n\nRed wants to maximize this score, and Blue wants to minimize it. If both players play optimally, what will the final score of the game be?\n\nInput\n\nThe first line contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ n) — the number of vertices in the tree and the maximum number of red nodes.\n\nNext n - 1 lines contains description of edges. The i-th line contains two space separated integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i) — the i-th edge of the tree.\n\nIt's guaranteed that given edges form a tree.\n\nOutput\n\nPrint one integer — the resulting score if both Red and Blue play optimally.\n\nExamples\n\nInput\n\n\n4 2\n1 2\n1 3\n1 4\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n5 2\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n7 2\n1 2\n1 3\n4 2\n3 5\n6 3\n6 7\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n4 1\n1 2\n1 3\n1 4\n\n\nOutput\n\n\n-1\n\nNote\n\nIn the first test case, the optimal strategy is as follows: \n\n  * Red chooses to color the subtrees of nodes 2 and 3. \n  * Blue chooses to color the subtree of node 4. \n\nAt the end of this process, nodes 2 and 3 are red, node 4 is blue, and node 1 is white. The score of the game is 1 ⋅ (2 - 1) = 1.\n\nIn the second test case, the optimal strategy is as follows: \n\n  * Red chooses to color the subtree of node 4. This colors both nodes 4 and 5. \n  * Blue does not have any options, so nothing is colored blue. \n\nAt the end of this process, nodes 4 and 5 are red, and nodes 1, 2 and 3 are white. The score of the game is 3 ⋅ (2 - 0) = 6.\n\nFor the third test case:\n\n<image>\n\nThe score of the game is 4 ⋅ (2 - 1) = 4.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.198043698553261}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.3372384518837475}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.444804470332775}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.489648217499578}, {"name": "deepseek-coder-33b-instruct", "score": -6.394847489011822}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4383786531286855}, {"name": "Codestral-22B-v0.1", "score": -6.726353299247566}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.466586759428835}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/124", "prompt": "# LEGOndary Grandmaster\n\nAfter getting bored by playing with crayons, you decided to switch to Legos! Today, you're working with a long strip, with height 1 and length n, some positions of which are occupied by 1 by 1 Lego pieces.\n\nIn one second, you can either remove two adjacent Lego pieces from the strip (if both are present), or add two Lego pieces to adjacent positions (if both are absent). You can only add or remove Lego's at two adjacent positions at the same time, as otherwise your chubby fingers run into precision issues.\n\nYou want to know exactly how much time you'll spend playing with Legos. You value efficiency, so given some starting state and some ending state, you'll always spend the least number of seconds to transform the starting state into the ending state. If it's impossible to transform the starting state into the ending state, you just skip it (so you spend 0 seconds).\n\nThe issue is that, for some positions, you don't remember whether there were Legos there or not (in either the starting state, the ending state, or both). Over all pairs of (starting state, ending state) that are consistent with your memory, find the total amount of time it will take to transform the starting state to the ending state. Print this value modulo 1 000 000 007 (10^9 + 7). \n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 2000) — the size of the Lego strip.\n\nThe second line of each test case contains a string s of length n, consisting of the characters 0, 1, and ? — your memory of the starting state: \n\n  * 1 represents a position that definitely has a Lego piece, \n  * 0 represents a position that definitely does not have a Lego piece, \n  * and ? represents a position that you don't remember. \n\n\n\nThe third line of each test case contains a string t of length n, consisting of the characters 0, 1, and ? — your memory of the ending state. It follows a similar format to the starting state.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 2000.\n\nOutput\n\nFor each test case, output a single integer — the answer to the problem modulo 1 000 000 007 (10^9 + 7). \n\nExample\n\nInput\n\n\n6\n2\n00\n11\n3\n???\n???\n3\n??1\n0?0\n4\n??0?\n??11\n5\n?????\n0??1?\n10\n?01??01?1?\n??100?1???\n\n\nOutput\n\n\n1\n16\n1\n14\n101\n1674\n\nNote\n\nFor the first test case, 00 is the only possible starting state, and 11 is the only possible ending state. It takes exactly one operation to change 00 to 11.\n\nFor the second test case, some of the possible starting and ending state pairs are: \n\n  * (000, 011) — takes 1 operation. \n  * (001, 100) — takes 2 operations. \n  * (010, 000) — takes 0 operations, as it's impossible to achieve the ending state. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.80408138380262}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.126553571244116}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4993134636068}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.809222987114198}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.658062392434391}, {"name": "deepseek-coder-33b-instruct", "score": -6.663408520016824}, {"name": "Codestral-22B-v0.1", "score": -6.687806618564446}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.094078817155389}], "rank": [1, 0, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/125", "prompt": "# Maximum Adjacent Pairs\n\nYou are given an array a consisting of n non-negative integers.\n\nYou have to replace each 0 in a with an integer from 1 to n (different elements equal to 0 can be replaced by different integers).\n\nThe value of the array you obtain is the number of integers k from 1 to n such that the following condition holds: there exist a pair of adjacent elements equal to k (i. e. there exists some i ∈ [1, n - 1] such that a_i = a_{i + 1} = k). If there are multiple such pairs for some integer k, this integer is counted in the value only once.\n\nYour task is to obtain the array with the maximum possible value.\n\nInput\n\nThe first line contains one integer n (2 ≤ n ≤ 3 ⋅ 10^5) — the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ min(n, 600)) — the elements of the array.\n\nOutput\n\nPrint n integers not less than 1 and not greater than n — the array with the maximum possible value you can obtain.\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n\n4\n1 1 0 2\n\n\nOutput\n\n\n1 1 2 2 \n\n\nInput\n\n\n5\n0 0 0 0 0\n\n\nOutput\n\n\n3 1 1 3 3\n\n\nInput\n\n\n5\n1 2 3 4 5\n\n\nOutput\n\n\n1 2 3 4 5 \n\n\nInput\n\n\n6\n1 0 0 0 0 1\n\n\nOutput\n\n\n1 2 3 3 1 1\n\n\nInput\n\n\n3\n3 0 2\n\n\nOutput\n\n\n3 2 2 \n\n\nInput\n\n\n5\n1 0 2 0 1\n\n\nOutput\n\n\n1 2 2 1 1 \n\n\nInput\n\n\n7\n1 0 2 3 1 0 2\n\n\nOutput\n\n\n1 2 2 3 1 1 2 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.9317269435780786}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8727830920905424}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.884255411214354}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.0345861682520425}, {"name": "Codestral-22B-v0.1", "score": -6.003615425276966}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.062072114271935}, {"name": "deepseek-coder-33b-instruct", "score": -6.108847502743026}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "code_contests/126", "prompt": "# Reindeer Games\n\nThere are n reindeer at the North Pole, all battling for the highest spot on the \"Top Reindeer\" leaderboard on the front page of CodeNorses (a popular competitive reindeer gaming website). Interestingly, the \"Top Reindeer\" title is just a measure of upvotes and has nothing to do with their skill level in the reindeer games, but they still give it the utmost importance.\n\nCurrently, the i-th reindeer has a score of a_i. You would like to influence the leaderboard with some operations. In an operation, you can choose a reindeer, and either increase or decrease his score by 1 unit. Negative scores are allowed.\n\nYou have m requirements for the resulting scores. Each requirement is given by an ordered pair (u, v), meaning that after all operations, the score of reindeer u must be less than or equal to the score of reindeer v.\n\nYour task is to perform the minimum number of operations so that all requirements will be satisfied.\n\nInput\n\nThe first line contains two integers n and m (2≤ n≤ 1000; 1≤ m≤ 1000) — the number of reindeer and requirements, respectively.\n\nThe second line contains n integers a_1,…, a_n (1≤ a_i≤ 10^9), where a_i is the current score of reindeer i.\n\nThe next m lines describe the requirements.\n\nThe i-th of these lines contains two integers u_i and v_i (1≤ u_i, v_i≤ n; u_i≠ v_i) — the two reindeer of the i-th requirement.\n\nOutput\n\nPrint n integers b_1,…, b_n (-10^{15}≤ b_i≤ 10^{15}), where b_i is the score of the i-th reindeer after all operations.\n\nIf there are multiple solutions achieving the minimum number of operations, you may output any.\n\nWe can prove that there is always an optimal solution such that |b_i|≤ 10^{15} for all i.\n\nExamples\n\nInput\n\n\n7 6\n3 1 4 9 2 5 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n\n\nOutput\n\n\n1 1 4 4 4 5 6 \n\n\nInput\n\n\n4 6\n6 5 8 2\n3 1\n4 1\n3 2\n1 2\n2 3\n3 1\n\n\nOutput\n\n\n6 6 6 2 \n\n\nInput\n\n\n10 18\n214 204 195 182 180 176 176 172 169 167\n1 2\n3 2\n4 2\n5 2\n6 2\n7 2\n8 2\n9 2\n10 2\n6 1\n6 2\n6 3\n6 4\n6 5\n6 7\n6 8\n6 9\n6 10\n\n\nOutput\n\n\n204 204 195 182 180 167 176 172 169 167 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.8498071182202183}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9392489916817373}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.046002437933547}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.342755215978604}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.077054914942165}, {"name": "deepseek-coder-33b-instruct", "score": -6.413196627680018}, {"name": "Codestral-22B-v0.1", "score": -6.419506209395051}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.263912488919748}], "rank": [0, 1, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/127", "prompt": "# Forbidden Subsequence\n\nYou are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. \n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a ≠ b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 ≤ |S| ≤ 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nExample\n\nInput\n\n\n7\nabacaba\nabc\ncccba\nacb\ndbsic\nbac\nabracadabra\nabc\ndddddddddddd\ncba\nbbc\nabc\nac\nabc\n\n\nOutput\n\n\naaaacbb\nabccc\nbcdis\naaaaacbbdrr\ndddddddddddd\nbbc\nac\n\nNote\n\nIn the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence.\n\nIn the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence.\n\nIn the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5876216220397095}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6828613817883733}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.810817568085542}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.251917343713719}, {"name": "deepseek-coder-33b-instruct", "score": -5.971547513267623}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.315806363922365}, {"name": "Codestral-22B-v0.1", "score": -6.717429775899029}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.845032708008544}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/128", "prompt": "# GCD Problem\n\nGiven a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 ≤ n ≤ 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\nExample\n\nInput\n\n\n6\n18\n63\n73\n91\n438\n122690412\n\n\nOutput\n\n\n6 9 3\n21 39 3\n29 43 1\n49 35 7\n146 219 73\n28622 122661788 2\n\nNote\n\nIn the first test case, 6 + 9 + 3 = 18 and \\operatorname{gcd}(6, 9) = 3.\n\nIn the second test case, 21 + 39 + 3 = 63 and \\operatorname{gcd}(21, 39) = 3.\n\nIn the third test case, 29 + 43 + 1 = 73 and \\operatorname{gcd}(29, 43) = 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.0577676644734435}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8071956809319785}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.803758715245918}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.211974856725972}, {"name": "deepseek-coder-33b-instruct", "score": -6.024734899619377}, {"name": "Codestral-22B-v0.1", "score": -6.049473987610881}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.380800273286263}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.489242141735728}], "rank": [0, 1, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/129", "prompt": "# Paprika and Permutation\n\nPaprika loves permutations. She has an array a_1, a_2, ..., a_n. She wants to make the array a permutation of integers 1 to n.\n\nIn order to achieve this goal, she can perform operations on the array. In each operation she can choose two integers i (1 ≤ i ≤ n) and x (x > 0), then perform a_i := a_i mod x (that is, replace a_i by the remainder of a_i divided by x). In different operations, the chosen i and x can be different.\n\nDetermine the minimum number of operations needed to make the array a permutation of integers 1 to n. If it is impossible, output -1.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n. (1 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, output the minimum number of operations needed to make the array a permutation of integers 1 to n, or -1 if it is impossible.\n\nExample\n\nInput\n\n\n4\n2\n1 7\n3\n1 5 4\n4\n12345678 87654321 20211218 23571113\n9\n1 2 3 4 18 19 5 6 7\n\n\nOutput\n\n\n1\n-1\n4\n2\n\nNote\n\nFor the first test, the only possible sequence of operations which minimizes the number of operations is: \n\n  * Choose i=2, x=5. Perform a_2 := a_2 mod 5 = 2. \n\n\n\nFor the second test, it is impossible to obtain a permutation of integers from 1 to n.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.162601725789024}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.906568154745182}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.529756746698217}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.424068571853597}, {"name": "deepseek-coder-33b-instruct", "score": -6.064752182877801}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.211370864229208}, {"name": "Codestral-22B-v0.1", "score": -6.37000371727689}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/130", "prompt": "# Too Many Impostors (hard version)\n\nThis is an interactive problem. The only difference between the easy and hard version is the limit on number of questions.\n\nThere are n players labelled from 1 to n. It is guaranteed that n is a multiple of 3.\n\nAmong them, there are k impostors and n-k crewmates. The number of impostors, k, is not given to you. It is guaranteed that n/3 < k < 2n/3.\n\nIn each question, you can choose three distinct integers a, b, c (1 ≤ a, b, c ≤ n) and ask: \"Among the players labelled a, b and c, are there more impostors or more crewmates?\" You will be given the integer 0 if there are more impostors than crewmates, and 1 otherwise.\n\nFind the number of impostors k and the indices of players that are impostors after asking at most n+6 questions.\n\nThe jury is adaptive, which means the indices of impostors may not be fixed beforehand and can depend on your questions. It is guaranteed that there is at least one set of impostors which fulfills the constraints and the answers to your questions at any time.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (6 ≤ n < 10^4, n is a multiple of 3) — the number of players.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^4.\n\nInteraction\n\nFor each test case, the interaction starts with reading n.\n\nThen you are allowed to make at most n+6 questions in the following way:\n\n\"? a b c\" (1 ≤ a, b, c ≤ n, a, b and c are pairwise distinct).\n\nAfter each one, you should read an integer r, which is equal to 0 if there are more impostors than crewmates among players labelled a, b and c, and equal to 1 otherwise.\n\nAnswer -1 instead of 0 or 1 means that you made an invalid query. Exit immediately after receiving -1 and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nWhen you have found the indices of all impostors, print a single line \"! \" (without quotes), followed by the number of impostors k, followed by k integers representing the indices of the impostors. Please note that you must print all this information on the same line. \n\nAfter printing the answer, your program must then continue to solve the remaining test cases, or exit if all test cases have been solved.\n\nAfter printing the queries and answers do not forget to output end of line and flush the output buffer. Otherwise, you will get the Idleness limit exceeded verdict. To do flush use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * Read documentation for other languages. \n\n\n\nHacks\n\nYou cannot make hacks in this problem.\n\nExample\n\nInput\n\n\n2\n6\n\n0\n\n1\n\n9\n\n1\n\nOutput\n\n\n? 1 2 3\n\n? 3 4 5\n\n! 3 4 1 2\n\n? 7 1 9\n\n! 4 2 3 6 8\n\nNote\n\nExplanation for example interaction (note that this example only exists to demonstrate the interaction procedure and does not provide any hint for the solution):\n\nFor the first test case:\n\nQuestion \"? 1 2 3\" returns 0, so there are more impostors than crewmates among players 1, 2 and 3.\n\nQuestion \"? 3 4 5\" returns 1, so there are more crewmates than impostors among players 3, 4 and 5.\n\nOutputting \"! 3 4 1 2\" means that one has found all the impostors, by some miracle. There are k = 3 impostors. The players who are impostors are players 4, 1 and 2.\n\nFor the second test case:\n\nQuestion \"? 7 1 9\" returns 1, so there are more crewmates than impostors among players 7, 1 and 9.\n\nOutputting \"! 4 2 3 6 8\" means that one has found all the impostors, by some miracle. There are k = 4 impostors. The players who are impostors are players 2, 3, 6 and 8.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.206422465627451}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.699825606029473}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.459364213063136}, {"name": "starcoder2-15b-instruct-v0.1", "score": -6.280036223744595}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.5220457382393215}, {"name": "Codestral-22B-v0.1", "score": -6.5276801012573795}, {"name": "deepseek-coder-33b-instruct", "score": -6.918220328829901}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.597936064138479}], "rank": [1, 0, 2, 3, 4, 5, 6, 7]}
{"id": "code_contests/131", "prompt": "# Christmas Chocolates\n\nChristmas is coming, Icy has just received a box of chocolates from her grandparents! The box contains n chocolates. The i-th chocolate has a non-negative integer type a_i.\n\nIcy believes that good things come in pairs. Unfortunately, all types of chocolates are distinct (all a_i are distinct). Icy wants to make at least one pair of chocolates the same type. \n\nAs a result, she asks her grandparents to perform some chocolate exchanges. Before performing any chocolate exchanges, Icy chooses two chocolates with indices x and y (1 ≤ x, y ≤ n, x ≠ y).\n\nIn a chocolate exchange, Icy's grandparents choose a non-negative integer k, such that 2^k ≥ a_x, and change the type of the chocolate x from a_x to 2^k - a_x (that is, perform a_x := 2^k - a_x).\n\nThe chocolate exchanges will be stopped only when a_x = a_y. Note that other pairs of equal chocolate types do not stop the procedure.\n\nIcy's grandparents are smart, so they would choose the sequence of chocolate exchanges that minimizes the number of exchanges needed. Since Icy likes causing trouble, she wants to maximize the minimum number of exchanges needed by choosing x and y appropriately. She wonders what is the optimal pair (x, y) such that the minimum number of exchanges needed is maximized across all possible choices of (x, y).\n\nSince Icy is not good at math, she hopes that you can help her solve the problem.\n\nInput\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of chocolates.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that all a_i are distinct.\n\nOutput\n\nOutput three integers x, y, and m.\n\nx and y are indices of the optimal chocolates to perform exchanges on. Your output must satisfy 1 ≤ x, y ≤ n, x ≠ y.\n\nm is the number of exchanges needed to obtain a_x = a_y. We can show that m ≤ 10^9 for any pair of chocolates.\n\nIf there are multiple solutions, output any.\n\nExamples\n\nInput\n\n\n5\n5 6 7 8 9\n\n\nOutput\n\n\n2 5 5\n\n\nInput\n\n\n2\n4 8\n\n\nOutput\n\n\n1 2 2\n\nNote\n\nIn the first test case, the minimum number of exchanges needed to exchange a chocolate of type 6 to a chocolate of type 9 is 5. The sequence of exchanges is as follows: 6 → 2 → 0 → 1 → 7 → 9.\n\nIn the second test case, the minimum number of exchanges needed to exchange a chocolate of type 4 to a chocolate of type 8 is 2. The sequence of exchanges is as follows: 4 → 0 → 8.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6793340412704048}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.209338526848165}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.098206514344399}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.213347540537944}, {"name": "deepseek-coder-33b-instruct", "score": -5.99880752136324}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.175484660537518}, {"name": "Codestral-22B-v0.1", "score": -6.555086585010803}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.206899410337351}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/132", "prompt": "# Polycarp and Sums of Subsequences\n\nPolycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 5000) — the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 ≤ b_i ≤ 10^9; b_i ≤ b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers — a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.498566047390429}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.755509536411699}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.637133861193484}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.395897694886901}, {"name": "deepseek-coder-33b-instruct", "score": -5.866615354866293}, {"name": "Codestral-22B-v0.1", "score": -6.064157232501422}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.214544096374104}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.577121930876679}], "rank": [0, 1, 3, 2, 6, 5, 4, 7]}
{"id": "code_contests/133", "prompt": "# Missing Bigram\n\nPolycarp has come up with a new game to play with you. He calls it \"A missing bigram\".\n\nA bigram of a word is a sequence of two adjacent letters in it.\n\nFor example, word \"abbaaba\" contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nThe game goes as follows. First, Polycarp comes up with a word, consisting only of lowercase letters 'a' and 'b'. Then, he writes down all its bigrams on a whiteboard in the same order as they appear in the word. After that, he wipes one of them off the whiteboard.\n\nFinally, Polycarp invites you to guess what the word that he has come up with was.\n\nYour goal is to find any word such that it's possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 2000) — the number of testcases.\n\nThe first line of each testcase contains a single integer n (3 ≤ n ≤ 100) — the length of the word Polycarp has come up with.\n\nThe second line of each testcase contains n-2 bigrams of that word, separated by a single space. Each bigram consists of two letters, each of them is either 'a' or 'b'.\n\nAdditional constraint on the input: there exists at least one string such that it is possible to write down all its bigrams, except one, so that the resulting sequence is the same as the sequence in the input. In other words, the answer exists.\n\nOutput\n\nFor each testcase print a word, consisting of n letters, each of them should be either 'a' or 'b'. It should be possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them. \n\nExample\n\nInput\n\n\n4\n7\nab bb ba aa ba\n7\nab ba aa ab ba\n3\naa\n5\nbb ab bb\n\n\nOutput\n\n\nabbaaba\nabaabaa\nbaa\nbbabb\n\nNote\n\nThe first two testcases from the example are produced from the word \"abbaaba\". As listed in the statement, it contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nIn the first testcase, the 5-th bigram is removed. \n\nIn the second testcase, the 2-nd bigram is removed. However, that sequence could also have been produced from the word \"abaabaa\". It contains bigrams \"ab\", \"ba\", \"aa\", \"ab\", \"ba\" and \"aa\". The missing bigram is the 6-th one.\n\nIn the third testcase, all of \"baa\", \"aab\" and \"aaa\" are valid answers.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.722894332701214}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8762714677209966}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.588552880164653}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.330571562077369}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.7436183831534}, {"name": "deepseek-coder-33b-instruct", "score": -5.977953685080035}, {"name": "Codestral-22B-v0.1", "score": -6.216665979531635}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.139666680116088}], "rank": [1, 0, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/134", "prompt": "# Paint the Array\n\nYou are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThe first line of each testcase contains one integer n (2 ≤ n ≤ 100) — the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 ≤ d ≤ 10^{18}).\n\nExample\n\nInput\n\n\n5\n5\n1 2 3 4 5\n3\n10 5 15\n3\n100 10 200\n10\n9 8 2 6 6 2 8 6 5 4\n2\n1 3\n\n\nOutput\n\n\n2\n0\n100\n0\n3\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.1015326924402027}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.5061578172986416}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.707148990099507}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.304617479096517}, {"name": "deepseek-coder-33b-instruct", "score": -5.800981778033321}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.235633507228017}, {"name": "Codestral-22B-v0.1", "score": -6.455685865972553}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.931350704517013}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/135", "prompt": "# Array and Operations\n\nYou are given an array a of n integers, and another integer k such that 2k ≤ n.\n\nYou have to perform exactly k operations with this array. In one operation, you have to choose two elements of the array (let them be a_i and a_j; they can be equal or different, but their positions in the array must not be the same), remove them from the array, and add ⌊ (a_i)/(a_j) ⌋ to your score, where ⌊ x/y ⌋ is the maximum integer not exceeding x/y.\n\nInitially, your score is 0. After you perform exactly k operations, you add all the remaining elements of the array to the score.\n\nCalculate the minimum possible score you can get.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 500) — the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and k (1 ≤ n ≤ 100; 0 ≤ k ≤ ⌊ n/2 ⌋).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2 ⋅ 10^5).\n\nOutput\n\nPrint one integer — the minimum possible score you can get.\n\nExample\n\nInput\n\n\n5\n7 3\n1 1 1 2 1 3 1\n5 1\n5 5 5 5 5\n4 2\n1 3 3 7\n2 0\n4 2\n9 2\n1 10 10 1 10 2 7 10 3\n\n\nOutput\n\n\n2\n16\n0\n6\n16\n\nNote\n\nLet's consider the example test.\n\nIn the first test case, one way to obtain a score of 2 is the following one:\n\n  1. choose a_7 = 1 and a_4 = 2 for the operation; the score becomes 0 + ⌊ 1/2 ⌋ = 0, the array becomes [1, 1, 1, 1, 3]; \n  2. choose a_1 = 1 and a_5 = 3 for the operation; the score becomes 0 + ⌊ 1/3 ⌋ = 0, the array becomes [1, 1, 1]; \n  3. choose a_1 = 1 and a_2 = 1 for the operation; the score becomes 0 + ⌊ 1/1 ⌋ = 1, the array becomes [1]; \n  4. add the remaining element 1 to the score, so the resulting score is 2. \n\n\n\nIn the second test case, no matter which operations you choose, the resulting score is 16.\n\nIn the third test case, one way to obtain a score of 0 is the following one:\n\n  1. choose a_1 = 1 and a_2 = 3 for the operation; the score becomes 0 + ⌊ 1/3 ⌋ = 0, the array becomes [3, 7]; \n  2. choose a_1 = 3 and a_2 = 7 for the operation; the score becomes 0 + ⌊ 3/7 ⌋ = 0, the array becomes empty; \n  3. the array is empty, so the score doesn't change anymore. \n\n\n\nIn the fourth test case, no operations can be performed, so the score is the sum of the elements of the array: 4 + 2 = 6.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6256201144747453}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7023878041387284}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.910063295170226}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.1573987554894964}, {"name": "deepseek-coder-33b-instruct", "score": -5.9422007708020255}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.093118200834482}, {"name": "Codestral-22B-v0.1", "score": -6.129964824353087}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.709733545796636}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/136", "prompt": "# Singers' Tour\n\nn towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i ∈ [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 ⋅ a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) ⋅ a_i, ..., in the town ((i + n - 2) mod n + 1) — n ⋅ a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^3) — the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 4 ⋅ 10^4) — the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^{9}) — the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 ≤ a_i ≤ 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd — for 6 minutes, in the 3-rd — for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd — for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd — for 9 minutes, in the 3-rd — for 3 minutes. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.722894332701214}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7659330835562277}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.175200129300951}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.668321086378041}, {"name": "deepseek-coder-33b-instruct", "score": -6.089044875446846}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.328993368204319}, {"name": "Codestral-22B-v0.1", "score": -6.373575729517837}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.221920555080809}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/137", "prompt": "# Reverse\n\nYou are given two positive integers x and y. You can perform the following operation with x: write it in its binary form without leading zeros, add 0 or 1 to the right of it, reverse the binary form and turn it into a decimal number which is assigned as the new value of x.\n\nFor example: \n\n  * 34 can be turned into 81 via one operation: the binary form of 34 is 100010, if you add 1, reverse it and remove leading zeros, you will get 1010001, which is the binary form of 81. \n  * 34 can be turned into 17 via one operation: the binary form of 34 is 100010, if you add 0, reverse it and remove leading zeros, you will get 10001, which is the binary form of 17. \n  * 81 can be turned into 69 via one operation: the binary form of 81 is 1010001, if you add 0, reverse it and remove leading zeros, you will get 1000101, which is the binary form of 69. \n  * 34 can be turned into 69 via two operations: first you turn 34 into 81 and then 81 into 69. \n\n\n\nYour task is to find out whether x can be turned into y after a certain number of operations (possibly zero).\n\nInput\n\nThe only line of the input contains two integers x and y (1 ≤ x, y ≤ 10^{18}).\n\nOutput\n\nPrint YES if you can make x equal to y and NO if you can't.\n\nExamples\n\nInput\n\n\n3 3\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n7 4\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n2 8\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n34 69\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n8935891487501725 71487131900013807\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example, you don't even need to do anything.\n\nThe fourth example is described in the statement.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.6647250763638364}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.533511366880239}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.713737554193384}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.170302160325404}, {"name": "deepseek-coder-33b-instruct", "score": -5.848609827022575}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.170982176569202}, {"name": "Codestral-22B-v0.1", "score": -6.5006438163758355}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.848782042877432}], "rank": [0, 1, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/138", "prompt": "# Trader Problem\n\nMonocarp plays a computer game (yet again!). This game has a unique trading mechanics.\n\nTo trade with a character, Monocarp has to choose one of the items he possesses and trade it for some item the other character possesses. Each item has an integer price. If Monocarp's chosen item has price x, then he can trade it for any item (exactly one item) with price not greater than x+k.\n\nMonocarp initially has n items, the price of the i-th item he has is a_i. The character Monocarp is trading with has m items, the price of the i-th item they have is b_i. Monocarp can trade with this character as many times as he wants (possibly even zero times), each time exchanging one of his items with one of the other character's items according to the aforementioned constraints. Note that if Monocarp gets some item during an exchange, he can trade it for another item (since now the item belongs to him), and vice versa: if Monocarp trades one of his items for another item, he can get his item back by trading something for it.\n\nYou have to answer q queries. Each query consists of one integer, which is the value of k, and asks you to calculate the maximum possible total cost of items Monocarp can have after some sequence of trades, assuming that he can trade an item of cost x for an item of cost not greater than x+k during each trade. Note that the queries are independent: the trades do not actually occur, Monocarp only wants to calculate the maximum total cost he can get.\n\nInput\n\nThe first line contains three integers n, m and q (1 ≤ n, m, q ≤ 2 ⋅ 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the prices of the items Monocarp has.\n\nThe third line contains m integers b_1, b_2, ..., b_m (1 ≤ b_i ≤ 10^9) — the prices of the items the other character has.\n\nThe fourth line contains q integers, where the i-th integer is the value of k for the i-th query (0 ≤ k ≤ 10^9).\n\nOutput\n\nFor each query, print one integer — the maximum possible total cost of items Monocarp can have after some sequence of trades, given the value of k from the query.\n\nExample\n\nInput\n\n\n3 4 5\n10 30 15\n12 31 14 18\n0 1 2 3 4\n\n\nOutput\n\n\n55\n56\n60\n64\n64\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.004128054283522}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.0451543180313285}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.250156004641018}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.313403003966077}, {"name": "deepseek-coder-33b-instruct", "score": -6.129363886349189}, {"name": "Codestral-22B-v0.1", "score": -6.241016311698493}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.295561160827857}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.711765607909293}], "rank": [0, 1, 2, 3, 6, 5, 4, 7]}
{"id": "code_contests/139", "prompt": "# Square String?\n\nA string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 ≤ t ≤ 100) —the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.9684004011664396}, {"name": "deepseek-coder-33b-instruct", "score": 0.8654117735190496}, {"name": "Codestral-22B-v0.1", "score": 0.56595314227099}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.329811079247637}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.225634997942089}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.5203424522905986}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.671407263761244}], "rank": [4, 6, 5, 7, 0, 3, 1, 2]}
{"id": "code_contests/140", "prompt": "# Squares and Cubes\n\nPolycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 20) — the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 ≤ n ≤ 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for — the number of integers from 1 to n that Polycarp likes.\n\nExample\n\nInput\n\n\n6\n10\n1\n25\n1000000000\n999999999\n500000000\n\n\nOutput\n\n\n4\n1\n6\n32591\n32590\n23125\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -2.6973262377392344}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.3477464171939872}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7762491002508436}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.746669748261791}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.096078775913723}, {"name": "deepseek-coder-33b-instruct", "score": -5.834705468364155}, {"name": "Codestral-22B-v0.1", "score": -6.354926407735689}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.661153727629735}], "rank": [0, 4, 1, 3, 2, 6, 5, 7]}
{"id": "code_contests/141", "prompt": "# Wrong Addition\n\nTanya is learning how to add numbers, but so far she is not doing it correctly. She is adding two numbers a and b using the following algorithm:\n\n  1. If one of the numbers is shorter than the other, Tanya adds leading zeros so that the numbers are the same length. \n  2. The numbers are processed from right to left (that is, from the least significant digits to the most significant). \n  3. In the first step, she adds the last digit of a to the last digit of b and writes their sum in the answer. \n  4. At each next step, she performs the same operation on each pair of digits in the same place and writes the result to the left side of the answer. \n\n\n\nFor example, the numbers a = 17236 and b = 3465 Tanya adds up as follows:\n\n$$$ \\large{ \\begin{array}{r} + \\begin{array}{r} 17236\\\\\\ 03465\\\\\\ \\end{array} \\\\\\ \\hline \\begin{array}{r} 1106911 \\end{array} \\end{array}} $$$\n\n  * calculates the sum of 6 + 5 = 11 and writes 11 in the answer. \n  * calculates the sum of 3 + 6 = 9 and writes the result to the left side of the answer to get 911. \n  * calculates the sum of 2 + 4 = 6 and writes the result to the left side of the answer to get 6911. \n  * calculates the sum of 7 + 3 = 10, and writes the result to the left side of the answer to get 106911. \n  * calculates the sum of 1 + 0 = 1 and writes the result to the left side of the answer and get 1106911. \n\n\n\nAs a result, she gets 1106911.\n\nYou are given two positive integers a and s. Find the number b such that by adding a and b as described above, Tanya will get s. Or determine that no suitable b exists.\n\nInput\n\nThe first line of input data contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nEach test case consists of a single line containing two positive integers a and s (1 ≤ a < s ≤ 10^{18}) separated by a space.\n\nOutput\n\nFor each test case print the answer on a separate line.\n\nIf the solution exists, print a single positive integer b. The answer must be written without leading zeros. If multiple answers exist, print any of them.\n\nIf no suitable number b exists, output -1.\n\nExample\n\nInput\n\n\n6\n17236 1106911\n1 5\n108 112\n12345 1023412\n1 11\n1 20\n\n\nOutput\n\n\n3465\n4\n-1\n90007\n10\n-1\n\nNote\n\nThe first test case is explained in the main part of the statement.\n\nIn the third test case, we cannot choose b that satisfies the problem statement.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.7126936322131914}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.068411180195596}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.101206992280643}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.255743838988975}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.311110294765156}, {"name": "deepseek-coder-33b-instruct", "score": -6.315155449364462}, {"name": "Codestral-22B-v0.1", "score": -6.64401106281912}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.424496968271173}], "rank": [0, 1, 2, 3, 4, 6, 5, 7]}
{"id": "code_contests/142", "prompt": "# New Year's Problem\n\nVlad has n friends, for each of whom he wants to buy one gift for the New Year.\n\nThere are m shops in the city, in each of which he can buy a gift for any of his friends. If the j-th friend (1 ≤ j ≤ n) receives a gift bought in the shop with the number i (1 ≤ i ≤ m), then the friend receives p_{ij} units of joy. The rectangular table p_{ij} is given in the input.\n\nVlad has time to visit at most n-1 shops (where n is the number of friends). He chooses which shops he will visit and for which friends he will buy gifts in each of them.\n\nLet the j-th friend receive a_j units of joy from Vlad's gift. Let's find the value α=min\\\\{a_1, a_2, ..., a_n\\}. Vlad's goal is to buy gifts so that the value of α is as large as possible. In other words, Vlad wants to maximize the minimum of the joys of his friends.\n\nFor example, let m = 2, n = 2. Let the joy from the gifts that we can buy in the first shop: p_{11} = 1, p_{12}=2, in the second shop: p_{21} = 3, p_{22}=4.\n\nThen it is enough for Vlad to go only to the second shop and buy a gift for the first friend, bringing joy 3, and for the second — bringing joy 4. In this case, the value α will be equal to min\\{3, 4\\} = 3\n\nHelp Vlad choose gifts for his friends so that the value of α is as high as possible. Please note that each friend must receive one gift. Vlad can visit at most n-1 shops (where n is the number of friends). In the shop, he can buy any number of gifts.\n\nInput\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input.\n\nAn empty line is written before each test case. Then there is a line containing integers m and n (2 ≤ n, 2 ≤ n ⋅ m ≤ 10^5) separated by a space — the number of shops and the number of friends, where n ⋅ m is the product of n and m.\n\nThen m lines follow, each containing n numbers. The number in the i-th row of the j-th column p_{ij} (1 ≤ p_{ij} ≤ 10^9) is the joy of the product intended for friend number j in shop number i.\n\nIt is guaranteed that the sum of the values n ⋅ m over all test cases in the test does not exceed 10^5.\n\nOutput\n\nPrint t lines, each line must contain the answer to the corresponding test case — the maximum possible value of α, where α is the minimum of the joys from a gift for all of Vlad's friends.\n\nExample\n\nInput\n\n\n5\n\n2 2\n1 2\n3 4\n\n4 3\n1 3 1\n3 1 1\n1 2 2\n1 1 3\n\n2 3\n5 3 4\n2 5 1\n\n4 2\n7 9\n8 1\n9 6\n10 8\n\n2 4\n6 5 2 1\n7 9 7 2\n\n\nOutput\n\n\n3\n2\n4\n8\n2\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6693907775300736}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8669419539875074}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.079564163535119}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.370042501999964}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.9526405552504}, {"name": "deepseek-coder-33b-instruct", "score": -6.2622776349229206}, {"name": "Codestral-22B-v0.1", "score": -6.458369630815835}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.992452981489987}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/143", "prompt": "# MEX and Increments\n\nDmitry has an array of n non-negative integers a_1, a_2, ..., a_n.\n\nIn one operation, Dmitry can choose any index j (1 ≤ j ≤ n) and increase the value of the element a_j by 1. He can choose the same index j multiple times.\n\nFor each i from 0 to n, determine whether Dmitry can make the MEX of the array equal to exactly i. If it is possible, then determine the minimum number of operations to do it.\n\nThe MEX of the array is equal to the minimum non-negative integer that is not in the array. For example, the MEX of the array [3, 1, 0] is equal to 2, and the array [3, 3, 1, 4] is equal to 0.\n\nInput\n\nThe first line of input data contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. \n\nThe descriptions of the test cases follow.\n\nThe first line of the description of each test case contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a.\n\nThe second line of the description of each test case contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ n) — elements of the array a.\n\nIt is guaranteed that the sum of the values n over all test cases in the test does not exceed 2⋅10^5.\n\nOutput\n\nFor each test case, output n + 1 integer — i-th number is equal to the minimum number of operations for which you can make the array MEX equal to i (0 ≤ i ≤ n), or -1 if this cannot be done.\n\nExample\n\nInput\n\n\n5\n3\n0 1 3\n7\n0 1 2 3 4 3 2\n4\n3 0 0 0\n7\n4 6 2 3 5 0 5\n5\n4 0 1 0 4\n\n\nOutput\n\n\n1 1 0 -1 \n1 1 2 2 1 0 2 6 \n3 0 1 4 3 \n1 0 -1 -1 -1 -1 -1 -1 \n2 1 0 2 -1 -1 \n\nNote\n\nIn the first set of example inputs, n=3:\n\n  * to get MEX=0, it is enough to perform one increment: a_1++; \n  * to get MEX=1, it is enough to perform one increment: a_2++; \n  * MEX=2 for a given array, so there is no need to perform increments; \n  * it is impossible to get MEX=3 by performing increments. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6940659808012364}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.718826530481888}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.070035637377703}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.286082828879694}, {"name": "deepseek-coder-33b-instruct", "score": -6.174960414129705}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.351848603775507}, {"name": "Codestral-22B-v0.1", "score": -6.596654448908785}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [1, 0, 2, 3, 6, 4, 5, 7]}
{"id": "code_contests/144", "prompt": "# Let's Play the Hat?\n\nThe Hat is a game of speedy explanation/guessing words (similar to Alias). It's fun. Try it! In this problem, we are talking about a variant of the game when the players are sitting at the table and everyone plays individually (i.e. not teams, but individual gamers play).\n\nn people gathered in a room with m tables (n ≥ 2m). They want to play the Hat k times. Thus, k games will be played at each table. Each player will play in k games.\n\nTo do this, they are distributed among the tables for each game. During each game, one player plays at exactly one table. A player can play at different tables.\n\nPlayers want to have the most \"fair\" schedule of games. For this reason, they are looking for a schedule (table distribution for each game) such that:\n\n  * At any table in each game there are either ⌊n/m⌋ people or ⌈n/m⌉ people (that is, either n/m rounded down, or n/m rounded up). Different numbers of people can play different games at the same table.\n  * Let's calculate for each player the value b_i — the number of times the i-th player played at a table with ⌈n/m⌉ persons (n/m rounded up). Any two values of b_imust differ by no more than 1. In other words, for any two players i and j, it must be true |b_i - b_j| ≤ 1. \n\n\n\nFor example, if n=5, m=2 and k=2, then at the request of the first item either two players or three players should play at each table. Consider the following schedules:\n\n  * First game: 1, 2, 3 are played at the first table, and 4, 5 at the second one. The second game: at the first table they play 5, 1, and at the second — 2, 3, 4. This schedule is not \"fair\" since b_2=2 (the second player played twice at a big table) and b_5=0 (the fifth player did not play at a big table).\n  * First game: 1, 2, 3 are played at the first table, and 4, 5 at the second one. The second game: at the first table they play 4, 5, 2, and at the second one — 1, 3. This schedule is \"fair\": b=[1,2,1,1,1] (any two values of b_i differ by no more than 1). \n\n\n\nFind any \"fair\" game schedule for n people if they play on the m tables of k games.\n\nInput\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test.\n\nEach test case consists of one line that contains three integers n, m and k (2 ≤ n ≤ 2⋅10^5, 1 ≤ m ≤ ⌊n/2⌋, 1 ≤ k ≤ 10^5) — the number of people, tables and games, respectively.\n\nIt is guaranteed that the sum of nk (n multiplied by k) over all test cases does not exceed 2⋅10^5.\n\nOutput\n\nFor each test case print a required schedule — a sequence of k blocks of m lines. Each block corresponds to one game, a line in a block corresponds to one table. In each line print the number of players at the table and the indices of the players (numbers from 1 to n) who should play at this table.\n\nIf there are several required schedules, then output any of them. We can show that a valid solution always exists.\n\nYou can output additional blank lines to separate responses to different sets of inputs.\n\nExample\n\nInput\n\n\n3\n5 2 2\n8 3 1\n2 1 3\n\n\nOutput\n\n\n3 1 2 3\n2 4 5\n3 4 5 2\n2 1 3\n\n2 6 2\n3 3 5 1\n3 4 7 8\n\n2 2 1\n2 2 1\n2 2 1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.988687706363558}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.070325056377881}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.20013105463821}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.408390759134367}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.309801907819379}, {"name": "deepseek-coder-33b-instruct", "score": -6.363641708349971}, {"name": "Codestral-22B-v0.1", "score": -6.6255382459614145}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.579313076948933}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/145", "prompt": "# Unusual Minesweeper\n\nPolycarp is very fond of playing the game Minesweeper. Recently he found a similar game and there are such rules.\n\nThere are mines on the field, for each the coordinates of its location are known (x_i, y_i). Each mine has a lifetime in seconds, after which it will explode. After the explosion, the mine also detonates all mines vertically and horizontally at a distance of k (two perpendicular lines). As a result, we get an explosion on the field in the form of a \"plus\" symbol ('+'). Thus, one explosion can cause new explosions, and so on.\n\nAlso, Polycarp can detonate anyone mine every second, starting from zero seconds. After that, a chain reaction of explosions also takes place. Mines explode instantly and also instantly detonate other mines according to the rules described above.\n\nPolycarp wants to set a new record and asks you to help him calculate in what minimum number of seconds all mines can be detonated.\n\nInput\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test.\n\nAn empty line is written in front of each test suite.\n\nNext comes a line that contains integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k ≤ 10^9) — the number of mines and the distance that hit by mines during the explosion, respectively.\n\nThen n lines follow, the i-th of which describes the x and y coordinates of the i-th mine and the time until its explosion (-10^9 ≤ x, y ≤ 10^9, 0 ≤ timer ≤ 10^9). It is guaranteed that all mines have different coordinates.\n\nIt is guaranteed that the sum of the values n over all test cases in the test does not exceed 2 ⋅ 10^5.\n\nOutput\n\nPrint t lines, each of the lines must contain the answer to the corresponding set of input data — the minimum number of seconds it takes to explode all the mines.\n\nExample\n\nInput\n\n\n3\n\n5 0\n0 0 1\n0 1 4\n1 0 2\n1 1 3\n2 2 9\n\n5 2\n0 0 1\n0 1 4\n1 0 2\n1 1 3\n2 2 9\n\n6 1\n1 -1 3\n0 -1 9\n0 1 7\n-1 0 1\n-1 1 9\n-1 -1 7\n\n\nOutput\n\n\n2\n1\n0\n\nNote\n\n<image> Picture from examples\n\nFirst example: \n\n  * 0 second: we explode a mine at the cell (2, 2), it does not detonate any other mine since k=0. \n  * 1 second: we explode the mine at the cell (0, 1), and the mine at the cell (0, 0) explodes itself. \n  * 2 second: we explode the mine at the cell (1, 1), and the mine at the cell (1, 0) explodes itself.\n\n\n\nSecond example:\n\n  * 0 second: we explode a mine at the cell (2, 2) we get: \n\n<image>\n\n  * 1 second: the mine at coordinate (0, 0) explodes and since k=2 the explosion detonates mines at the cells (0, 1) and (1, 0), and their explosions detonate the mine at the cell (1, 1) and there are no mines left on the field. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.159445425215848}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.188745237643585}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.191355569523236}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.663085472324097}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.376645311913439}, {"name": "deepseek-coder-33b-instruct", "score": -6.504366014818312}, {"name": "Codestral-22B-v0.1", "score": -6.703077677695229}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.5380457234109794}], "rank": [1, 0, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/146", "prompt": "# Permutation and Queries\n\nYou are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y — swap p_x and p_y. \n  * 2 i k — print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 ≤ t ≤ 2) — type of query. If t = 1, then the next two integers are x and y (1 ≤ x, y ≤ n; x ≠ y) — first-type query. If t = 2, then the next two integers are i and k (1 ≤ i, k ≤ n) — second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line — answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.5742098327298253}, {"name": "Codestral-22B-v0.1", "score": -0.24858960562955268}, {"name": "deepseek-coder-33b-instruct", "score": -2.95078439393051}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6367436996934077}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.656459562857825}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.982400415081472}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.677356360419678}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.096046254865459}], "rank": [3, 5, 6, 1, 0, 2, 4, 7]}
{"id": "code_contests/147", "prompt": "# Equal or Not Equal\n\nYou had n positive integers a_1, a_2, ..., a_n arranged in a circle. For each pair of neighboring numbers (a_1 and a_2, a_2 and a_3, ..., a_{n - 1} and a_n, and a_n and a_1), you wrote down: are the numbers in the pair equal or not.\n\nUnfortunately, you've lost a piece of paper with the array a. Moreover, you are afraid that even information about equality of neighboring elements may be inconsistent. So, you are wondering: is there any array a which is consistent with information you have about equality or non-equality of corresponding pairs?\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Next t cases follow.\n\nThe first and only line of each test case contains a non-empty string s consisting of characters E and/or N. The length of s is equal to the size of array n and 2 ≤ n ≤ 50. For each i from 1 to n: \n\n  * if s_i = E then a_i is equal to a_{i + 1} (a_n = a_1 for i = n); \n  * if s_i = N then a_i is not equal to a_{i + 1} (a_n ≠ a_1 for i = n). \n\nOutput\n\nFor each test case, print YES if it's possible to choose array a that are consistent with information from s you know. Otherwise, print NO.\n\nIt can be proved, that if there exists some array a, then there exists an array a of positive integers with values less or equal to 10^9.\n\nExample\n\nInput\n\n\n4\nEEE\nEN\nENNEENE\nNENN\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, you can choose, for example, a_1 = a_2 = a_3 = 5.\n\nIn the second test case, there is no array a, since, according to s_1, a_1 is equal to a_2, but, according to s_2, a_2 is not equal to a_1.\n\nIn the third test case, you can, for example, choose array a = [20, 20, 4, 50, 50, 50, 20].\n\nIn the fourth test case, you can, for example, choose a = [1, 3, 3, 7].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.424783691468297}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7730367621206597}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.775014221270933}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.224261700718623}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.61953092220861}, {"name": "deepseek-coder-33b-instruct", "score": -5.884302409503527}, {"name": "Codestral-22B-v0.1", "score": -6.399177127756626}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.382283656099289}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/148", "prompt": "# Triangles on a Rectangle\n\nA rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 ≤ w, h ≤ 10^6) — the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 ≤ k ≤ 2 ⋅ 10^5) — the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) — the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 ≤ k ≤ 2 ⋅ 10^5) — the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) — the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each testcase print a single integer — the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) — its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.264762214513231}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.450619426139493}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.6208698862906115}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.1905539662738995}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.625647945251966}, {"name": "deepseek-coder-33b-instruct", "score": -6.285081473422766}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.376890199878419}, {"name": "Codestral-22B-v0.1", "score": -6.610817167933863}], "rank": [0, 1, 7, 3, 2, 6, 4, 5]}
{"id": "code_contests/149", "prompt": "# BA-String\n\nYou are given an integer k and a string s that consists only of characters 'a' (a lowercase Latin letter) and '*' (an asterisk).\n\nEach asterisk should be replaced with several (from 0 to k inclusive) lowercase Latin letters 'b'. Different asterisk can be replaced with different counts of letter 'b'.\n\nThe result of the replacement is called a BA-string.\n\nTwo strings a and b are different if they either have different lengths or there exists such a position i that a_i ≠ b_i.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a ≠ b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\n\n\nNow consider all different BA-strings and find the x-th lexicographically smallest of them.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 2000) — the number of testcases.\n\nThe first line of each testcase contains three integers n, k and x (1 ≤ n ≤ 2000; 0 ≤ k ≤ 2000; 1 ≤ x ≤ 10^{18}). n is the length of string s.\n\nThe second line of each testcase is a string s. It consists of n characters, each of them is either 'a' (a lowercase Latin letter) or '*' (an asterisk).\n\nThe sum of n over all testcases doesn't exceed 2000. For each testcase x doesn't exceed the total number of different BA-strings. String s contains at least one character 'a'.\n\nOutput\n\nFor each testcase, print a single string, consisting only of characters 'b' and 'a' (lowercase Latin letters) — the x-th lexicographically smallest BA-string.\n\nExample\n\nInput\n\n\n3\n2 4 3\na*\n4 1 3\na**a\n6 3 20\n**a***\n\n\nOutput\n\n\nabb\nabba\nbabbbbbbbbb\n\nNote\n\nIn the first testcase of the example, BA-strings ordered lexicographically are: \n\n  1. a\n  2. ab\n  3. abb\n  4. abbb\n  5. abbbb\n\n\n\nIn the second testcase of the example, BA-strings ordered lexicographically are: \n\n  1. aa\n  2. aba\n  3. abba\n\n\n\nNote that string \"aba\" is only counted once, even though there are two ways to replace asterisks with characters 'b' to get it.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.010238052925101}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.5474139464271275}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.101718370455939}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3091979576442485}, {"name": "deepseek-coder-33b-instruct", "score": -6.055931190662421}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.365315141446804}, {"name": "Codestral-22B-v0.1", "score": -6.37260280905841}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [1, 0, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/150", "prompt": "# Exact Change\n\nOne day, early in the morning, you decided to buy yourself a bag of chips in the nearby store. The store has chips of n different flavors. A bag of the i-th flavor costs a_i burles.\n\nThe store may run out of some flavors, so you'll decide which one to buy after arriving there. But there are two major flaws in this plan: \n\n  1. you have only coins of 1, 2 and 3 burles; \n  2. since it's morning, the store will ask you to pay in exact change, i. e. if you choose the i-th flavor, you'll have to pay exactly a_i burles. \n\n\n\nCoins are heavy, so you'd like to take the least possible number of coins in total. That's why you are wondering: what is the minimum total number of coins you should take with you, so you can buy a bag of chips of any flavor in exact change?\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains the single integer n (1 ≤ n ≤ 100) — the number of flavors in the store.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the cost of one bag of each flavor.\n\nOutput\n\nFor each test case, print one integer — the minimum number of coins you need to buy one bag of any flavor you'll choose in exact change.\n\nExample\n\nInput\n\n\n4\n1\n1337\n3\n10 8 10\n5\n1 2 3 4 5\n3\n7 77 777\n\n\nOutput\n\n\n446\n4\n3\n260\n\nNote\n\nIn the first test case, you should, for example, take with you 445 coins of value 3 and 1 coin of value 2. So, 1337 = 445 ⋅ 3 + 1 ⋅ 2.\n\nIn the second test case, you should, for example, take 2 coins of value 3 and 2 coins of value 2. So you can pay either exactly 8 = 2 ⋅ 3 + 1 ⋅ 2 or 10 = 2 ⋅ 3 + 2 ⋅ 2.\n\nIn the third test case, it's enough to take 1 coin of value 3 and 2 coins of value 1.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.40452517175483}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.7502567337888397}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.863341055065484}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.122963479069675}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.440441733590578}, {"name": "deepseek-coder-33b-instruct", "score": -5.919442091060666}, {"name": "Codestral-22B-v0.1", "score": -6.453294235535106}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.73660399570081}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/151", "prompt": "# Replace the Numbers\n\nYou have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" — add the element x to the end of the array; \n  * \"2 x y\" — replace all occurrences of x in the array with y. \n\n\n\nFind the resulting array after performing all the queries.\n\nInput\n\nThe first line contains a single integer q (1 ≤ q ≤ 5 ⋅ 10^5) — the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 ≤ x ≤ 5 ⋅ 10^5); \n  * \"2 x y\" (1 ≤ x, y ≤ 5 ⋅ 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers — the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] → [3] → [3, 1] → [3, 2] → [3, 2, 2] → [3, 2, 2, 1] → [3, 2, 2, 1, 2] → [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] → [1] → [1, 2] → [1, 2, 1] → [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] → [] → [1] → [1, 4] → [1, 4, 2] → [1, 4, 4] → [1, 3, 3] → [1, 3, 3, 2] → [1, 3, 3, 7].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "CodeLlama-7b-Instruct-hf", "score": 2.574148323755945}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.4217629822106539}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.6893687654291014}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.089116099540357}, {"name": "deepseek-coder-33b-instruct", "score": -2.74532179995291}, {"name": "Codestral-22B-v0.1", "score": -4.32166711020035}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.452298687659213}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [2, 0, 4, 1, 6, 5, 3, 7]}
{"id": "code_contests/152", "prompt": "# Bipartite Array\n\nYou are given a permutation p consisting of n integers 1, 2, ..., n (a permutation is an array where each element from 1 to n occurs exactly once).\n\nLet's call an array a bipartite if the following undirected graph is bipartite:\n\n  * the graph consists of n vertices; \n  * two vertices i and j are connected by an edge if i < j and a_i > a_j. \n\n\n\nYour task is to find a bipartite array of integers a of size n, such that a_i = p_i or a_i = -p_i, or report that no such array exists. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 2 ⋅ 10^5) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^6) — the size of the permutation.\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nThe sum of n over all test cases doesn't exceed 10^6.\n\nOutput\n\nFor each test case, print the answer in the following format. If such an array a does not exist, print \"NO\" in a single line. Otherwise, print \"YES\" in the first line and n integers — array a in the second line.\n\nExample\n\nInput\n\n\n4\n3\n1 2 3\n6\n1 3 2 6 5 4\n4\n4 1 3 2\n8\n3 2 1 6 7 8 5 4\n\n\nOutput\n\n\nYES\n1 2 3\nNO\nYES\n-4 -1 -3 -2\nYES\n-3 -2 1 6 7 -8 -5 -4\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.4994124291591104}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.074141854904581}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.64408315948669}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.9955622645987345}, {"name": "deepseek-coder-33b-instruct", "score": -6.00814465735918}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.492167105102987}, {"name": "Codestral-22B-v0.1", "score": -6.535981200391419}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.033950829995963}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/153", "prompt": "# Subsequences Galore\n\nFor a sequence of strings [t_1, t_2, ..., t_m], let's define the function f([t_1, t_2, ..., t_m]) as the number of different strings (including the empty string) that are subsequences of at least one string t_i. f([]) = 0 (i. e. the number of such strings for an empty sequence is 0).\n\nYou are given a sequence of strings [s_1, s_2, ..., s_n]. Every string in this sequence consists of lowercase Latin letters and is sorted (i. e., each string begins with several (maybe zero) characters a, then several (maybe zero) characters b, ..., ends with several (maybe zero) characters z).\n\nFor each of 2^n subsequences of [s_1, s_2, ..., s_n], calculate the value of the function f modulo 998244353.\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 23) — the number of strings.\n\nThen n lines follow. The i-th line contains the string s_i (1 ≤ |s_i| ≤ 2 ⋅ 10^4), consisting of lowercase Latin letters. Each string s_i is sorted.\n\nOutput\n\nSince printing up to 2^{23} integers would be really slow, you should do the following:\n\nFor each of the 2^n subsequences (which we denote as [s_{i_1}, s_{i_2}, ..., s_{i_k}]), calculate f([s_{i_1}, s_{i_2}, ..., s_{i_k}]), take it modulo 998244353, then multiply it by k ⋅ (i_1 + i_2 + ... + i_k). Print the XOR of all 2^n integers you get.\n\nThe indices i_1, i_2, ..., i_k in the description of each subsequences are 1-indexed (i. e. are from 1 to n).\n\nExamples\n\nInput\n\n\n3\na\nb\nc\n\n\nOutput\n\n\n92\n\n\nInput\n\n\n2\naa\na\n\n\nOutput\n\n\n21\n\n\nInput\n\n\n2\na\na\n\n\nOutput\n\n\n10\n\n\nInput\n\n\n2\nabcd\naabb\n\n\nOutput\n\n\n124\n\n\nInput\n\n\n3\nddd\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaabbbbbbbbbbbcccccccccccciiiiiiiiiiiiiiiiiiiiiiooooooooooqqqqqqqqqqqqqqqqqqvvvvvzzzzzzzzzzzz\n\n\nOutput\n\n\n15706243380\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.938703884009477}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9703673824023897}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.090259452651868}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.231023051696666}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.227421653067846}, {"name": "deepseek-coder-33b-instruct", "score": -6.347886459036815}, {"name": "Codestral-22B-v0.1", "score": -6.588059526874762}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.151388280499195}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/154", "prompt": "# Construct a Rectangle\n\nThere are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 ≤ l_i ≤ 10^8) — the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.372386299808036}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6426260695964743}, {"name": "Codestral-22B-v0.1", "score": -4.763354163548351}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.898943668076189}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.901534458822706}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.647339099232989}, {"name": "deepseek-coder-33b-instruct", "score": -5.687287172127004}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.690018419684737}], "rank": [0, 1, 5, 2, 3, 4, 6, 7]}
{"id": "code_contests/155", "prompt": "# Berland Music\n\nBerland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 ≤ p_i ≤ n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 ≤ q_i ≤ n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest value of ∑_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n) — the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each testcase, print a permutation q — the re-evaluated ratings of the songs. If there are multiple answers such that ∑_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. ∑_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.87801110283644}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.906568154745182}, {"name": "deepseek-coder-33b-instruct", "score": -4.533877421124663}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.322580618683716}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.364161285283296}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.350843831020792}, {"name": "Codestral-22B-v0.1", "score": -6.475201565183239}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [1, 0, 6, 3, 2, 4, 5, 7]}
{"id": "code_contests/156", "prompt": "# Set or Decrease\n\nYou are given an integer array a_1, a_2, ..., a_n and integer k.\n\nIn one step you can \n\n  * either choose some index i and decrease a_i by one (make a_i = a_i - 1); \n  * or choose two indices i and j and set a_i equal to a_j (make a_i = a_j). \n\n\n\nWhat is the minimum number of steps you need to make the sum of array ∑_{i=1}^{n}{a_i} ≤ k? (You are allowed to make values of array negative).\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ k ≤ 10^{15}) — the size of array a and upper bound on its sum.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the array itself.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print one integer — the minimum number of steps to make ∑_{i=1}^{n}{a_i} ≤ k.\n\nExample\n\nInput\n\n\n4\n1 10\n20\n2 69\n6 9\n7 8\n1 2 1 3 1 2 1\n10 1\n1 2 3 1 2 6 1 6 8 10\n\n\nOutput\n\n\n10\n0\n2\n7\n\nNote\n\nIn the first test case, you should decrease a_1 10 times to get the sum lower or equal to k = 10.\n\nIn the second test case, the sum of array a is already less or equal to 69, so you don't need to change it.\n\nIn the third test case, you can, for example: \n\n  1. set a_4 = a_3 = 1; \n  2. decrease a_4 by one, and get a_4 = 0. \n\nAs a result, you'll get array [1, 2, 1, 0, 1, 2, 1] with sum less or equal to 8 in 1 + 1 = 2 steps.\n\nIn the fourth test case, you can, for example: \n\n  1. choose a_7 and decrease in by one 3 times; you'll get a_7 = -2; \n  2. choose 4 elements a_6, a_8, a_9 and a_{10} and them equal to a_7 = -2. \n\nAs a result, you'll get array [1, 2, 3, 1, 2, -2, -2, -2, -2, -2] with sum less or equal to 1 in 3 + 4 = 7 steps.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.898086339689273}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.931590310920675}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.86999296429379}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.166065155421894}, {"name": "deepseek-coder-33b-instruct", "score": -6.179668767060092}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.208477343691867}, {"name": "Codestral-22B-v0.1", "score": -6.29749598550066}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.703498758270041}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/157", "prompt": "# Shuffle\n\nYou are given a binary string (i. e. a string consisting of characters 0 and/or 1) s of length n. You can perform the following operation with the string s at most once: choose a substring (a contiguous subsequence) of s having exactly k characters 1 in it, and shuffle it (reorder the characters in the substring as you wish).\n\nCalculate the number of different strings which can be obtained from s by performing this operation at most once.\n\nInput\n\nThe first line contains two integers n and k (2 ≤ n ≤ 5000; 0 ≤ k ≤ n).\n\nThe second line contains the string s of length n, consisting of characters 0 and/or 1.\n\nOutput\n\nPrint one integer — the number of different strings which can be obtained from s by performing the described operation at most once. Since the answer can be large, output it modulo 998244353.\n\nExamples\n\nInput\n\n\n7 2\n1100110\n\n\nOutput\n\n\n16\n\n\nInput\n\n\n5 0\n10010\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n8 1\n10001000\n\n\nOutput\n\n\n10\n\n\nInput\n\n\n10 8\n0010011000\n\n\nOutput\n\n\n1\n\nNote\n\nSome strings you can obtain in the first example:\n\n  * to obtain 0110110, you can take the substring from the 1-st character to the 4-th character, which is 1100, and reorder its characters to get 0110; \n  * to obtain 1111000, you can take the substring from the 3-rd character to the 7-th character, which is 00110, and reorder its characters to get 11000; \n  * to obtain 1100101, you can take the substring from the 5-th character to the 7-th character, which is 110, and reorder its characters to get 101. \n\n\n\nIn the second example, k = 0 so you can only choose the substrings consisting only of 0 characters. Reordering them doesn't change the string at all, so the only string you can obtain is 10010.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6352676846652874}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.037774210733707}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.258744591428213}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.315823240677702}, {"name": "deepseek-coder-33b-instruct", "score": -6.316521880913896}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.419786437359074}, {"name": "Codestral-22B-v0.1", "score": -6.504916718475853}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.196569710073812}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/158", "prompt": "# Math Test\n\nPetya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to ∑_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 ≤ n ≤ 10; 1 ≤ m ≤ 10^4) — the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 ≤ x_i ≤ (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} ∈ \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers — a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -3.3416826392948185}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7502567337888397}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.995407814362077}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.463916051874186}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3471075307174685}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.643777660719172}, {"name": "deepseek-coder-33b-instruct", "score": -5.954043014458349}, {"name": "Codestral-22B-v0.1", "score": -7.133032552291648}], "rank": [4, 0, 1, 7, 2, 3, 6, 5]}
{"id": "code_contests/159", "prompt": "# Quadratic Set\n\nLet's call a set of positive integers a_1, a_2, ..., a_k quadratic if the product of the factorials of its elements is a square of an integer, i. e. ∏_{i=1}^{k} a_i! = m^2, for some integer m.\n\nYou are given a positive integer n.\n\nYour task is to find a quadratic subset of a set 1, 2, ..., n of maximum size. If there are multiple answers, print any of them.\n\nInput\n\nA single line contains a single integer n (1 ≤ n ≤ 10^6).\n\nOutput\n\nIn the first line, print a single integer — the size of the maximum subset. In the second line, print the subset itself in an arbitrary order.\n\nExamples\n\nInput\n\n\n1\n\n\nOutput\n\n\n1\n1 \n\n\nInput\n\n\n4\n\n\nOutput\n\n\n3\n1 3 4 \n\n\nInput\n\n\n7\n\n\nOutput\n\n\n4\n1 4 5 6 \n\n\nInput\n\n\n9\n\n\nOutput\n\n\n7\n1 2 4 5 6 7 9 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.4192992170261376}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.6665315904500284}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.827096997374405}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.103250937805718}, {"name": "deepseek-coder-33b-instruct", "score": -5.907865523231668}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.336415027350155}, {"name": "Codestral-22B-v0.1", "score": -6.671817732430986}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.130834828248259}], "rank": [0, 1, 3, 2, 6, 4, 5, 7]}
{"id": "code_contests/160", "prompt": "# Robot Cleaner\n\nA robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 ≤ n, m ≤ 100, 1 ≤ r_b, r_d ≤ n, 1 ≤ c_b, c_d ≤ m) — the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer — the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10× 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 × 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 × 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n\n<image>\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.8262908099368964}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.871617590793107}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.522907933141093}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.709746394157193}, {"name": "Codestral-22B-v0.1", "score": -5.136127713428217}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3091979576442485}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.693489685170769}, {"name": "deepseek-coder-33b-instruct", "score": -6.24726888066174}], "rank": [0, 1, 7, 3, 5, 2, 4, 6]}
{"id": "code_contests/161", "prompt": "# Game on Ranges\n\nAlice and Bob play the following game. Alice has a set S of disjoint ranges of integers, initially containing only one range [1, n]. In one turn, Alice picks a range [l, r] from the set S and asks Bob to pick a number in the range. Bob chooses a number d (l ≤ d ≤ r). Then Alice removes [l, r] from S and puts into the set S the range [l, d - 1] (if l ≤ d - 1) and the range [d + 1, r] (if d + 1 ≤ r). The game ends when the set S is empty. We can show that the number of turns in each game is exactly n.\n\nAfter playing the game, Alice remembers all the ranges [l, r] she picked from the set S, but Bob does not remember any of the numbers that he picked. But Bob is smart, and he knows he can find out his numbers d from Alice's ranges, and so he asks you for help with your programming skill.\n\nGiven the list of ranges that Alice has picked ([l, r]), for each range, help Bob find the number d that Bob has picked.\n\nWe can show that there is always a unique way for Bob to choose his number for a list of valid ranges picked by Alice.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 1000).\n\nEach of the next n lines contains two integers l and r (1 ≤ l ≤ r ≤ n), denoting the range [l, r] that Alice picked at some point.\n\nNote that the ranges are given in no particular order.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000, and the ranges for each test case are from a valid game.\n\nOutput\n\nFor each test case print n lines. Each line should contain three integers l, r, and d, denoting that for Alice's range [l, r] Bob picked the number d.\n\nYou can print the lines in any order. We can show that the answer is unique.\n\nIt is not required to print a new line after each test case. The new lines in the output of the example are for readability only. \n\nExample\n\nInput\n\n\n4\n1\n1 1\n3\n1 3\n2 3\n2 2\n6\n1 1\n3 5\n4 4\n3 6\n4 5\n1 6\n5\n1 5\n1 2\n4 5\n2 2\n4 4\n\n\nOutput\n\n\n1 1 1\n\n1 3 1\n2 2 2\n2 3 3\n\n1 1 1\n3 5 3\n4 4 4\n3 6 6\n4 5 5\n1 6 2\n\n1 5 3\n1 2 1\n4 5 5\n2 2 2\n4 4 4\n\nNote\n\nIn the first test case, there is only 1 range [1, 1]. There was only one range [1, 1] for Alice to pick, and there was only one number 1 for Bob to pick.\n\nIn the second test case, n = 3. Initially, the set contains only one range [1, 3]. \n\n  * Alice picked the range [1, 3]. Bob picked the number 1. Then Alice put the range [2, 3] back to the set, which after this turn is the only range in the set. \n  * Alice picked the range [2, 3]. Bob picked the number 3. Then Alice put the range [2, 2] back to the set. \n  * Alice picked the range [2, 2]. Bob picked the number 2. The game ended. \n\n\n\nIn the fourth test case, the game was played with n = 5. Initially, the set contains only one range [1, 5]. The game's turn is described in the following table. \n\nGame turn| Alice's picked range| Bob's picked number| The range set after  \n---|---|---|---  \nBefore the game start| | |  \\{ [1, 5] \\}   \n1| [1, 5]| 3|  \\{ [1, 2], [4, 5] \\}  \n2| [1, 2]| 1|  \\{ [2, 2], [4, 5] \\}   \n3| [4, 5]| 5|  \\{ [2, 2], [4, 4] \\}   \n4| [2, 2]| 2|  \\{ [4, 4] \\}   \n5| [4, 4]| 4|  \\{ \\}  (empty set)\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.015806277891618}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.096276029071848}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.708448535441593}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.382088499612714}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.9638055391140075}, {"name": "deepseek-coder-33b-instruct", "score": -6.061820489191974}, {"name": "Codestral-22B-v0.1", "score": -6.547488176675183}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.604360473713373}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/162", "prompt": "# Balanced Stone Heaps\n\nThere are n heaps of stone. The i-th heap has h_i stones. You want to change the number of stones in the heap by performing the following process once: \n\n  * You go through the heaps from the 3-rd heap to the n-th heap, in this order. \n  * Let i be the number of the current heap. \n  * You can choose a number d (0 ≤ 3 ⋅ d ≤ h_i), move d stones from the i-th heap to the (i - 1)-th heap, and 2 ⋅ d stones from the i-th heap to the (i - 2)-th heap. \n  * So after that h_i is decreased by 3 ⋅ d, h_{i - 1} is increased by d, and h_{i - 2} is increased by 2 ⋅ d. \n  * You can choose different or same d for different operations. Some heaps may become empty, but they still count as heaps. \n\n\n\nWhat is the maximum number of stones in the smallest heap after the process?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 2⋅ 10^5). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (3 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second lines of each test case contains n integers h_1, h_2, h_3, …, h_n (1 ≤ h_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print the maximum number of stones that the smallest heap can contain.\n\nExample\n\nInput\n\n\n4\n4\n1 2 10 100\n4\n100 100 100 1\n5\n5 1 1 1 8\n6\n1 2 3 4 5 6\n\n\nOutput\n\n\n7\n1\n1\n3\n\nNote\n\nIn the first test case, the initial heap sizes are [1, 2, 10, 100]. We can move the stones as follows. \n\n  * move 3 stones and 6 from the 3-rd heap to the 2-nd and 1 heap respectively. The heap sizes will be [7, 5, 1, 100]; \n  * move 6 stones and 12 stones from the last heap to the 3-rd and 2-nd heap respectively. The heap sizes will be [7, 17, 7, 82]. \n\n\n\nIn the second test case, the last heap is 1, and we can not increase its size.\n\nIn the third test case, it is better not to move any stones.\n\nIn the last test case, the final achievable configuration of the heaps can be [3, 5, 3, 4, 3, 3].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.3312040098416205}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8901045413271236}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.888603244150457}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.391315785381789}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.233374895313594}, {"name": "deepseek-coder-33b-instruct", "score": -6.260834980188459}, {"name": "Codestral-22B-v0.1", "score": -6.269115222920853}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.843942751370743}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "code_contests/163", "prompt": "# Robot Cleaner Revisit\n\nThe statement of this problem shares a lot with problem A. The differences are that in this problem, the probability is introduced, and the constraint is different.\n\nA robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell. \n\nAfter a lot of testings in problem A, the robot is now broken. It cleans the floor as described above, but at each second the cleaning operation is performed with probability \\frac p {100} only, and not performed with probability 1 - \\frac p {100}. The cleaning or not cleaning outcomes are independent each second.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the expected time for the robot to do its job.\n\nIt can be shown that the answer can be expressed as an irreducible fraction \\frac x y, where x and y are integers and y not ≡ 0 \\pmod{10^9 + 7} . Output the integer equal to x ⋅ y^{-1} mod (10^9 + 7). In other words, output such an integer a that 0 ≤ a < 10^9 + 7 and a ⋅ y ≡ x \\pmod {10^9 + 7}.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10). Description of the test cases follows.\n\nA test case consists of only one line, containing n, m, r_b, c_b, r_d, c_d, and p (4 ≤ n ⋅ m ≤ 10^5, n, m ≥ 2, 1 ≤ r_b, r_d ≤ n, 1 ≤ c_b, c_d ≤ m, 1 ≤ p ≤ 99) — the sizes of the room, the initial position of the robot, the position of the dirt cell and the probability of cleaning in percentage.\n\nOutput\n\nFor each test case, print a single integer — the expected time for the robot to clean the dirty cell, modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n6\n2 2 1 1 2 1 25\n3 3 1 2 2 2 25\n10 10 1 1 10 10 75\n10 10 10 10 1 1 75\n5 5 1 3 2 2 10\n97 98 3 5 41 43 50\n\n\nOutput\n\n\n3\n3\n15\n15\n332103349\n99224487\n\nNote\n\nIn the first test case, the robot has the opportunity to clean the dirty cell every second. Using the [geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution), we can find out that with the success rate of 25\\%, the expected number of tries to clear the dirty cell is \\frac 1 {0.25} = 4. But because the first moment the robot has the opportunity to clean the cell is before the robot starts moving, the answer is 3.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirt cell. The purple square is the initial position of the robot. Each second the robot has an opportunity to clean a row and a column, denoted by yellow stripes.\n\nIn the second test case, the board size and the position are different, but the robot still has the opportunity to clean the dirty cell every second, and it has the same probability of cleaning. Therefore the answer is the same as in the first example.\n\n<image> Illustration for the second example.\n\nThe third and the fourth case are almost the same. The only difference is that the position of the dirty cell and the robot are swapped. But the movements in both cases are identical, hence the same result.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.388257184424518}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.425469192516719}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.4687687507715035}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.975182714533699}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.431215133182697}, {"name": "Codestral-22B-v0.1", "score": -6.708193967925483}, {"name": "deepseek-coder-33b-instruct", "score": -7.005564152631103}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.161019804586656}], "rank": [1, 0, 3, 2, 4, 5, 6, 7]}
{"id": "code_contests/164", "prompt": "# Middle Duplication\n\nA binary tree of n nodes is given. Nodes of the tree are numbered from 1 to n and the root is the node 1. Each node can have no child, only one left child, only one right child, or both children. For convenience, let's denote l_u and r_u as the left and the right child of the node u respectively, l_u = 0 if u does not have the left child, and r_u = 0 if the node u does not have the right child.\n\nEach node has a string label, initially is a single character c_u. Let's define the string representation of the binary tree as the concatenation of the labels of the nodes in the in-order. Formally, let f(u) be the string representation of the tree rooted at the node u. f(u) is defined as follows: $$$ f(u) = \\begin{cases} <empty string>, & if u = 0; \\\\\\ f(l_u) + c_u + f(r_u) & otherwise, \\end{cases}  where +$$$ denotes the string concatenation operation.\n\nThis way, the string representation of the tree is f(1).\n\nFor each node, we can duplicate its label at most once, that is, assign c_u with c_u + c_u, but only if u is the root of the tree, or if its parent also has its label duplicated.\n\nYou are given the tree and an integer k. What is the lexicographically smallest string representation of the tree, if we can duplicate labels of at most k nodes?\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a ≠ b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains a string c of n lower-case English letters, where c_i is the initial label of the node i for 1 ≤ i ≤ n. Note that the given string c is not the initial string representation of the tree.\n\nThe i-th of the next n lines contains two integers l_i and r_i (0 ≤ l_i, r_i ≤ n). If the node i does not have the left child, l_i = 0, and if the node i does not have the right child, r_i = 0.\n\nIt is guaranteed that the given input forms a binary tree, rooted at 1.\n\nOutput\n\nPrint a single line, containing the lexicographically smallest string representation of the tree if at most k nodes have their labels duplicated.\n\nExamples\n\nInput\n\n\n4 3\nabab\n2 3\n0 0\n0 4\n0 0\n\n\nOutput\n\n\nbaaaab\n\nInput\n\n\n8 2\nkadracyn\n2 5\n3 4\n0 0\n0 0\n6 8\n0 7\n0 0\n0 0\n\n\nOutput\n\n\ndaarkkcyan\n\nInput\n\n\n8 3\nkdaracyn\n2 5\n0 3\n0 4\n0 0\n6 8\n0 7\n0 0\n0 0\n\n\nOutput\n\n\ndarkcyan\n\nNote\n\nThe images below present the tree for the examples. The number in each node is the node number, while the subscripted letter is its label. To the right is the string representation of the tree, with each letter having the same color as the corresponding node.\n\nHere is the tree for the first example. Here we duplicated the labels of nodes 1 and 3. We should not duplicate the label of node 2 because it would give us the string \"bbaaab\", which is lexicographically greater than \"baaaab\".\n\n<image>\n\nIn the second example, we can duplicate the labels of nodes 1 and 2. Note that only duplicating the label of the root will produce a worse result than the initial string.\n\n<image>\n\nIn the third example, we should not duplicate any character at all. Even though we would want to duplicate the label of the node 3, by duplicating it we must also duplicate the label of the node 2, which produces a worse result.\n\n<image>\n\nThere is no way to produce string \"darkkcyan\" from a tree with the initial string representation \"darkcyan\" :(.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.098137360460797}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.267120706172523}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.372608179128286}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.83617822268043}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.443202367546824}, {"name": "deepseek-coder-33b-instruct", "score": -6.488396093666014}, {"name": "Codestral-22B-v0.1", "score": -6.960281313233583}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.7804050467722385}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "LeetCode/0", "prompt": "# Divide an Array Into Subarrays With Minimum Cost I\n\nYou are given an array of integers `nums` of length `n`.\n\n\nThe **cost** of an array is the value of its **first** element. For example, the cost of `[1,2,3]` is `1` while the cost of `[3,4,1]` is `3`.\n\n\nYou need to divide `nums` into `3` **disjoint contiguous** subarrays.\n\n\nReturn *the **minimum** possible **sum** of the cost of these subarrays*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,12]\n**Output:** 6\n**Explanation:** The best possible way to form 3 subarrays is: [1], [2], and [3,12] at a total cost of 1 + 2 + 3 = 6.\nThe other possible ways to form 3 subarrays are:\n- [1], [2,3], and [12] at a total cost of 1 + 2 + 12 = 15.\n- [1,2], [3], and [12] at a total cost of 1 + 3 + 12 = 16.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,4,3]\n**Output:** 12\n**Explanation:** The best possible way to form 3 subarrays is: [5], [4], and [3] at a total cost of 5 + 4 + 3 = 12.\nIt can be shown that 12 is the minimum cost achievable.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [10,3,1,1]\n**Output:** 12\n**Explanation:** The best possible way to form 3 subarrays is: [10,3], [1], and [1] at a total cost of 10 + 1 + 1 = 12.\nIt can be shown that 12 is the minimum cost achievable.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= n <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.25689488185526255}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.92608368907648}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9766865187538682}, {"name": "Codestral-22B-v0.1", "score": -4.681546821835601}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.19854122918411}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.496561483885806}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.331302541776919}, {"name": "deepseek-coder-33b-instruct", "score": -6.517854417144777}], "rank": [7, 1, 0, 5, 3, 2, 4, 6]}
{"id": "LeetCode/1", "prompt": "# Find if Array Can Be Sorted\n\nYou are given a **0-indexed** array of **positive** integers `nums`.\n\n\nIn one **operation**, you can swap any two **adjacent** elements if they have the **same** number of set bits. You are allowed to do this operation **any** number of times (**including zero**).\n\n\nReturn `true` *if you can sort the array, else return* `false`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,4,2,30,15]\n**Output:** true\n**Explanation:** Let's look at the binary representation of every element. The numbers 2, 4, and 8 have one set bit each with binary representation \"10\", \"100\", and \"1000\" respectively. The numbers 15 and 30 have four set bits each with binary representation \"1111\" and \"11110\".\nWe can sort the array using 4 operations:\n- Swap nums[0] with nums[1]. This operation is valid because 8 and 4 have one set bit each. The array becomes [4,8,2,30,15].\n- Swap nums[1] with nums[2]. This operation is valid because 8 and 2 have one set bit each. The array becomes [4,2,8,30,15].\n- Swap nums[0] with nums[1]. This operation is valid because 4 and 2 have one set bit each. The array becomes [2,4,8,30,15].\n- Swap nums[3] with nums[4]. This operation is valid because 30 and 15 have four set bits each. The array becomes [2,4,8,15,30].\nThe array has become sorted, hence we return true.\nNote that there may be other sequences of operations which also sort the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** true\n**Explanation:** The array is already sorted, hence we return true.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [3,16,8,4,2]\n**Output:** false\n**Explanation:** It can be shown that it is not possible to sort the input array using any number of operations.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 28`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canSortArray(self, nums: List[int]) -> bool:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -3.4547987045701474}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6499307039753615}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9099408392238213}, {"name": "Codestral-22B-v0.1", "score": -4.375996952281291}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.79426872706107}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.470740091162743}, {"name": "deepseek-coder-33b-instruct", "score": -6.111085892038005}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.794967247495514}], "rank": [4, 0, 1, 5, 3, 2, 6, 7]}
{"id": "LeetCode/2", "prompt": "# Minimize Length of Array Using Operations\n\nYou are given a **0-indexed** integer array `nums` containing **positive** integers.\n\n\nYour task is to **minimize** the length of `nums` by performing the following operations **any** number of times (including zero):\n\n\n* Select **two** **distinct** indices `i` and `j` from `nums`, such that `nums[i] > 0` and `nums[j] > 0`.\n* Insert the result of `nums[i] % nums[j]` at the end of `nums`.\n* Delete the elements at indices `i` and `j` from `nums`.\n\n\nReturn *an integer denoting the **minimum** **length** of* `nums` *after performing the operation any number of times.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,4,3,1]\n**Output:** 1\n**Explanation:** One way to minimize the length of the array is as follows:\nOperation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.\nnums becomes [1,1,3].\nOperation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [1,1,3,1], then delete elements at indices 1 and 2.\nnums becomes [1,1].\nOperation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [1,1,0], then delete elements at indices 1 and 0.\nnums becomes [0].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length. \n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,5,5,10,5]\n**Output:** 2\n**Explanation:** One way to minimize the length of the array is as follows:\nOperation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.\nnums becomes [5,5,5,5]. \nOperation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3. \nnums becomes [5,5,0]. \nOperation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end and it becomes [5,5,0,0], then delete elements at indices 0 and 1.\nnums becomes [0,0].\nThe length of nums cannot be reduced further. Hence, the answer is 2.\nIt can be shown that 2 is the minimum achievable length. \n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,3,4]\n**Output:** 1\n**Explanation:** One way to minimize the length of the array is as follows: \nOperation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end and it becomes [2,3,4,3], then delete elements at indices 1 and 2.\nnums becomes [2,3].\nOperation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end and it becomes [2,3,1], then delete elements at indices 1 and 0.\nnums becomes [1].\nThe length of nums cannot be reduced further. Hence, the answer is 1.\nIt can be shown that 1 is the minimum achievable length.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumArrayLength(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3286557532056564}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9484706463991914}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.068889992749632}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.51252844273804}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.6289727178476845}, {"name": "Codestral-22B-v0.1", "score": -6.14921587965514}, {"name": "deepseek-coder-33b-instruct", "score": -6.189019484542525}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.280305947279609}], "rank": [7, 0, 1, 3, 2, 5, 6, 4]}
{"id": "LeetCode/3", "prompt": "# Divide an Array Into Subarrays With Minimum Cost II\n\nYou are given a **0-indexed** array of integers `nums` of length `n`, and two **positive** integers `k` and `dist`.\n\n\nThe **cost** of an array is the value of its **first** element. For example, the cost of `[1,2,3]` is `1` while the cost of `[3,4,1]` is `3`.\n\n\nYou need to divide `nums` into `k` **disjoint contiguous** subarrays, such that the difference between the starting index of the **second** subarray and the starting index of the `kth` subarray should be **less than or equal to** `dist`. In other words, if you divide `nums` into the subarrays `nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)]`, then `ik-1 - i1 <= dist`.\n\n\nReturn *the **minimum** possible sum of the cost of these* *subarrays*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,6,4,2], k = 3, dist = 3\n**Output:** 5\n**Explanation:** The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,1,2,2,2,1], k = 4, dist = 3\n**Output:** 15\n**Explanation:** The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [10,8,18,9], k = 3, dist = 1\n**Output:** 36\n**Explanation:** The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= n <= 105`\n* `1 <= nums[i] <= 109`\n* `3 <= k <= n`\n* `k - 2 <= dist <= n - 2`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.798451090543227}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.371420588886657}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.300554861488228}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.558987889752967}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.719687277181941}, {"name": "Codestral-22B-v0.1", "score": -6.034116865562959}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.371488762734193}, {"name": "deepseek-coder-33b-instruct", "score": -6.488779308846025}], "rank": [0, 1, 3, 2, 7, 5, 4, 6]}
{"id": "LeetCode/4", "prompt": "# Count Elements With Maximum Frequency\n\nYou are given an array `nums` consisting of **positive** integers.\n\n\nReturn *the **total frequencies** of elements in*`nums` *such that those elements all have the **maximum** frequency*.\n\n\nThe **frequency** of an element is the number of occurrences of that element in the array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,2,3,1,4]\n**Output:** 4\n**Explanation:** The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 5\n**Explanation:** All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxFrequencyElements(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.8220770503175343}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.1645733252729076}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.82025011141522}, {"name": "Codestral-22B-v0.1", "score": -3.3116637124320785}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.523650974746159}, {"name": "deepseek-coder-33b-instruct", "score": -4.447706529351999}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.0323967858777685}], "rank": [4, 7, 1, 3, 5, 0, 6, 2]}
{"id": "LeetCode/5", "prompt": "# Find Beautiful Indices in the Given Array I\n\nYou are given a **0-indexed** string `s`, a string `a`, a string `b`, and an integer `k`.\n\n\nAn index `i` is **beautiful** if:\n\n\n* `0 <= i <= s.length - a.length`\n* `s[i..(i + a.length - 1)] == a`\n* There exists an index `j` such that:\n\t+ `0 <= j <= s.length - b.length`\n\t+ `s[j..(j + b.length - 1)] == b`\n\t+ `|j - i| <= k`\n\n\nReturn *the array that contains beautiful indices in **sorted order from smallest to largest***.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\n**Output:** [16,33]\n**Explanation:** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", a = \"a\", b = \"a\", k = 4\n**Output:** [0]\n**Explanation:** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= s.length <= 105`\n* `1 <= a.length, b.length <= 10`\n* `s`, `a`, and `b` contain only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.8619283028745715}, {"name": "Codestral-22B-v0.1", "score": 0.7631166588691451}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.1879327258640915}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.3611093864184935}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.652359068790549}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.72901481302307}, {"name": "deepseek-coder-33b-instruct", "score": -4.985520035451539}], "rank": [4, 5, 7, 0, 1, 2, 3, 6]}
{"id": "LeetCode/6", "prompt": "# Maximum Number That Sum of the Prices Is Less Than or Equal to K\n\nYou are given an integer `k` and an integer `x`.\n\n\nConsider `s` is the **1-indexed** binary representation of an integer `num`. The **price** of a number `num` is the number of `i`'s such that `i % x == 0` and `s[i]` is a **set bit**.\n\n\nReturn *the **greatest** integer* `num` *such that the sum of **prices** of all numbers from* `1` *to* `num` *is less than or equal to* `k`*.*\n\n\n**Note**:\n\n\n* In the binary representation of a number **set bit** is a bit of value `1`.\n* The binary representation of a number will be indexed from right to left. For example, if `s == 11100`, `s[4] == 1` and `s[2] == 0`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** k = 9, x = 1\n**Output:** 6\n**Explanation:** The numbers 1, 2, 3, 4, 5, and 6 can be written in binary representation as \"1\", \"10\", \"11\", \"100\", \"101\", and \"110\" respectively.\nSince x is equal to 1, the price of each number is the number of its set bits.\nThe number of set bits in these numbers is 9. So the sum of the prices of the first 6 numbers is 9.\nSo the answer is 6.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** k = 7, x = 2\n**Output:** 9\n**Explanation:** Since x is equal to 2, we should just check eventh bits.\nThe second bit of binary representation of numbers 2 and 3 is a set bit. So the sum of their prices is 2.\nThe second bit of binary representation of numbers 6 and 7 is a set bit. So the sum of their prices is 2.\nThe fourth bit of binary representation of numbers 8 and 9 is a set bit but their second bit is not. So the sum of their prices is 2.\nNumbers 1, 4, and 5 don't have set bits in their eventh bits in their binary representation. So the sum of their prices is 0.\nThe second and the fourth bit of the binary representation of the number 10 are a set bit. So its price is 2.\nThe sum of the prices of the first 9 numbers is 6.\nBecause the sum of the prices of the first 10 numbers is 8, the answer is 9.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= 1015`\n* `1 <= x <= 8`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.9517051505668506}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.277665619349139}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.7378812422287115}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.837403863230966}, {"name": "Codestral-22B-v0.1", "score": -5.85624601778267}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.121650349481408}, {"name": "deepseek-coder-33b-instruct", "score": -6.200330659124049}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.872293890703977}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/7", "prompt": "# Find Beautiful Indices in the Given Array II\n\nYou are given a **0-indexed** string `s`, a string `a`, a string `b`, and an integer `k`.\n\n\nAn index `i` is **beautiful** if:\n\n\n* `0 <= i <= s.length - a.length`\n* `s[i..(i + a.length - 1)] == a`\n* There exists an index `j` such that:\n\t+ `0 <= j <= s.length - b.length`\n\t+ `s[j..(j + b.length - 1)] == b`\n\t+ `|j - i| <= k`\n\n\nReturn *the array that contains beautiful indices in **sorted order from smallest to largest***.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\n**Output:** [16,33]\n**Explanation:** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", a = \"a\", b = \"a\", k = 4\n**Output:** [0]\n**Explanation:** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= s.length <= 5 * 105`\n* `1 <= a.length, b.length <= 5 * 105`\n* `s`, `a`, and `b` contain only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.7213707931891458}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.6331789734098061}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7638580859999884}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.1713523343239434}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3765367189106223}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.025880605410993}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.6386436460456295}, {"name": "deepseek-coder-33b-instruct", "score": -5.003470557109575}], "rank": [5, 3, 4, 0, 7, 1, 2, 6]}
{"id": "LeetCode/8", "prompt": "# Maximum Area of Longest Diagonal Rectangle\n\nYou are given a 2D **0-indexed** integer array `dimensions`.\n\n\nFor all indices `i`, `0 <= i < dimensions.length`, `dimensions[i][0]` represents the length and `dimensions[i][1]` represents the width of the rectangle `i`.\n\n\nReturn *the **area** of the rectangle having the **longest** diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the **maximum** area.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** dimensions = [[9,3],[8,6]]\n**Output:** 48\n**Explanation:** \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) ≈ 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** dimensions = [[3,4],[4,3]]\n**Output:** 12\n**Explanation:** Length of diagonal is the same for both which is 5, so maximum area = 12.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= dimensions.length <= 100`\n* `dimensions[i].length == 2`\n* `1 <= dimensions[i][0], dimensions[i][1] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.012780453908805}, {"name": "Codestral-22B-v0.1", "score": 0.6937677988364781}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6030932132142084}, {"name": "deepseek-coder-33b-instruct", "score": 0.5638620788168742}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.2490703222455606}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.7449227449600526}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.623636092502844}], "rank": [3, 5, 4, 6, 7, 0, 1, 2]}
{"id": "LeetCode/9", "prompt": "# Maximum Size of a Set After Removals\n\nYou are given two **0-indexed** integer arrays `nums1` and `nums2` of even length `n`.\n\n\nYou must remove `n / 2` elements from `nums1` and `n / 2` elements from `nums2`. After the removals, you insert the remaining elements of `nums1` and `nums2` into a set `s`.\n\n\nReturn *the **maximum** possible size of the set* `s`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,1,2], nums2 = [1,1,1,1]\n**Output:** 2\n**Explanation:** We remove two occurences of 1 from nums1 and nums2. After the removals, the arrays become equal to nums1 = [2,2] and nums2 = [1,1]. Therefore, s = {1,2}.\nIt can be shown that 2 is the maximum possible size of the set s after the removals.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3,4,5,6], nums2 = [2,3,2,3,2,3]\n**Output:** 5\n**Explanation:** We remove 2, 3, and 6 from nums1, as well as 2 and two occurrences of 3 from nums2. After the removals, the arrays become equal to nums1 = [1,4,5] and nums2 = [2,3,2]. Therefore, s = {1,2,3,4,5}.\nIt can be shown that 5 is the maximum possible size of the set s after the removals.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,1,2,2,3,3], nums2 = [4,4,5,5,6,6]\n**Output:** 6\n**Explanation:** We remove 1, 2, and 3 from nums1, as well as 4, 5, and 6 from nums2. After the removals, the arrays become equal to nums1 = [1,2,3] and nums2 = [4,5,6]. Therefore, s = {1,2,3,4,5,6}.\nIt can be shown that 6 is the maximum possible size of the set s after the removals.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 2 * 104`\n* `n` is even.\n* `1 <= nums1[i], nums2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.0328237055738505}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.129850268718273}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.242477169723796}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.86111388265266}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.908912597986386}, {"name": "Codestral-22B-v0.1", "score": -5.92200728209276}, {"name": "deepseek-coder-33b-instruct", "score": -6.334564770019416}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.45028083071314}], "rank": [1, 7, 0, 3, 2, 5, 6, 4]}
{"id": "LeetCode/10", "prompt": "# Maximize the Number of Partitions After Operations\n\nYou are given a **0-indexed** string `s` and an integer `k`.\n\n\nYou are to perform the following partitioning operations until `s` is **empty**:\n\n\n* Choose the **longest** **prefix** of `s` containing at most `k` **distinct** characters.\n* **Delete** the prefix from `s` and increase the number of partitions by one. The remaining characters (if any) in `s` maintain their initial order.\n\n\n**Before** the operations, you are allowed to change **at most** **one** index in `s` to another lowercase English letter.\n\n\nReturn *an integer denoting the **maximum** number of resulting partitions after the operations by optimally choosing at most one index to change.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"accca\", k = 2\n**Output:** 3\n**Explanation:** In this example, to maximize the number of resulting partitions, s[2] can be changed to 'b'.\ns becomes \"acbca\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 2 distinct characters, \"acbca\".\n- Delete the prefix, and s becomes \"bca\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 2 distinct characters, \"bca\".\n- Delete the prefix, and s becomes \"a\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 2 distinct characters, \"a\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 3.\nHence, the answer is 3.\nIt can be shown that it is not possible to obtain more than 3 partitions.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aabaab\", k = 3\n**Output:** 1\n**Explanation:** In this example, to maximize the number of resulting partitions we can leave s as it is.\nThe operations can now be performed as follows until s becomes empty: \n- Choose the longest prefix containing at most 3 distinct characters, \"aabaab\".\n- Delete the prefix, and s becomes empty. The number of partitions becomes 1. \nHence, the answer is 1. \nIt can be shown that it is not possible to obtain more than 1 partition.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"xxyz\", k = 1\n**Output:** 4\n**Explanation:** In this example, to maximize the number of resulting partitions, s[1] can be changed to 'a'.\ns becomes \"xayz\".\nThe operations can now be performed as follows until s becomes empty:\n- Choose the longest prefix containing at most 1 distinct character, \"xayz\".\n- Delete the prefix, and s becomes \"ayz\". The number of partitions is now 1.\n- Choose the longest prefix containing at most 1 distinct character, \"ayz\".\n- Delete the prefix, and s becomes \"yz\". The number of partitions is now 2.\n- Choose the longest prefix containing at most 1 distinct character, \"yz\".\n- Delete the prefix, and s becomes \"z\". The number of partitions is now 3.\n- Choose the longest prefix containing at most 1 distinct character, \"z\".\n- Delete the prefix, and s becomes empty. The number of partitions is now 4.\nHence, the answer is 4.\nIt can be shown that it is not possible to obtain more than 4 partitions.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s` consists only of lowercase English letters.\n* `1 <= k <= 26`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxPartitionsAfterOperations(self, s: str, k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.957088568475446}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9629442306065323}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.254874849013398}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.167844150075135}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.18653819565302}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.973473677587062}, {"name": "deepseek-coder-33b-instruct", "score": -6.083888748297475}, {"name": "Codestral-22B-v0.1", "score": -6.555086585010803}], "rank": [7, 0, 1, 3, 4, 2, 6, 5]}
{"id": "LeetCode/11", "prompt": "# Smallest Missing Integer Greater Than Sequential Prefix Sum\n\nYou are given a **0-indexed** array of integers `nums`.\n\n\nA prefix `nums[0..i]` is **sequential** if, for all `1 <= j <= i`, `nums[j] = nums[j - 1] + 1`. In particular, the prefix consisting only of `nums[0]` is **sequential**.\n\n\nReturn *the **smallest** integer* `x` *missing from* `nums` *such that* `x` *is greater than or equal to the sum of the **longest** sequential prefix.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,2,5]\n**Output:** 6\n**Explanation:** The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,4,5,1,12,14,13]\n**Output:** 15\n**Explanation:** The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def missingInteger(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.10950791353127087}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8704507295171866}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.018830473744884}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.185529335061413}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.21979350484377}, {"name": "deepseek-coder-33b-instruct", "score": -5.892682346810278}, {"name": "Codestral-22B-v0.1", "score": -5.9692445002061385}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.219715035790336}], "rank": [7, 0, 1, 2, 3, 6, 5, 4]}
{"id": "LeetCode/12", "prompt": "# Minimum Number of Operations to Make Array XOR Equal to K\n\nYou are given a **0-indexed** integer array `nums` and a positive integer `k`.\n\n\nYou can apply the following operation on the array **any** number of times:\n\n\n* Choose **any** element of the array and **flip** a bit in its **binary** representation. Flipping a bit means changing a `0` to `1` or vice versa.\n\n\nReturn *the **minimum** number of operations required to make the bitwise* `XOR` *of **all** elements of the final array equal to* `k`.\n\n\n**Note** that you can flip leading zero bits in the binary representation of elements. For example, for the number `(101)2` you can flip the fourth bit and obtain `(1101)2`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,4], k = 1\n**Output:** 2\n**Explanation:** We can do the following operations:\n- Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].\n- Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].\nThe XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\nIt can be shown that we cannot make the XOR equal to k in less than 2 operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,0,2,0], k = 0\n**Output:** 0\n**Explanation:** The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n* `0 <= k <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.8854332962216729}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.00031128404920632846}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.0816207051254736}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.572856159100482}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.078892457663179}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.478790303106189}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.598021878977034}, {"name": "deepseek-coder-33b-instruct", "score": -6.384695117547803}], "rank": [5, 7, 4, 0, 1, 3, 2, 6]}
{"id": "LeetCode/13", "prompt": "# Minimum Number of Operations to Make X and Y Equal\n\nYou are given two positive integers `x` and `y`.\n\n\nIn one operation, you can do one of the four following operations:\n\n\n1. Divide `x` by `11` if `x` is a multiple of `11`.\n2. Divide `x` by `5` if `x` is a multiple of `5`.\n3. Decrement `x` by `1`.\n4. Increment `x` by `1`.\n\n\nReturn *the **minimum** number of operations required to make*  `x` *and* `y` equal.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 26, y = 1\n**Output:** 3\n**Explanation:** We can make 26 equal to 1 by applying the following operations: \n1. Decrement x by 1\n2. Divide x by 5\n3. Divide x by 5\nIt can be shown that 3 is the minimum number of operations required to make 26 equal to 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 54, y = 2\n**Output:** 4\n**Explanation:** We can make 54 equal to 2 by applying the following operations: \n1. Increment x by 1\n2. Divide x by 11 \n3. Divide x by 5\n4. Increment x by 1\nIt can be shown that 4 is the minimum number of operations required to make 54 equal to 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** x = 25, y = 30\n**Output:** 5\n**Explanation:** We can make 25 equal to 30 by applying the following operations: \n1. Increment x by 1\n2. Increment x by 1\n3. Increment x by 1\n4. Increment x by 1\n5. Increment x by 1\nIt can be shown that 5 is the minimum number of operations required to make 25 equal to 30.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= x, y <= 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperationsToMakeEqual(self, x: int, y: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.594517206684575}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.1368930654680565}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.4953553199808844}, {"name": "Codestral-22B-v0.1", "score": -4.897572487085224}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.949610592258481}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.476028310784308}, {"name": "deepseek-coder-33b-instruct", "score": -6.144074039916411}], "rank": [4, 7, 0, 1, 5, 3, 2, 6]}
{"id": "LeetCode/14", "prompt": "# Count the Number of Powerful Integers\n\nYou are given three integers `start`, `finish`, and `limit`. You are also given a **0-indexed** string `s` representing a **positive** integer.\n\n\nA **positive** integer `x` is called **powerful** if it ends with `s` (in other words, `s` is a **suffix** of `x`) and each digit in `x` is at most `limit`.\n\n\nReturn *the **total** number of powerful integers in the range* `[start..finish]`.\n\n\nA string `x` is a suffix of a string `y` if and only if `x` is a substring of `y` that starts from some index (**including** `0`) in `y` and extends to the index `y.length - 1`. For example, `25` is a suffix of `5125` whereas `512` is not.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** start = 1, finish = 6000, limit = 4, s = \"124\"\n**Output:** 5\n**Explanation:** The powerful integers in the range [1..6000] are 124, 1124, 2124, 3124, and, 4124. All these integers have each digit <= 4, and \"124\" as a suffix. Note that 5124 is not a powerful integer because the first digit is 5 which is greater than 4.\nIt can be shown that there are only 5 powerful integers in this range.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** start = 15, finish = 215, limit = 6, s = \"10\"\n**Output:** 2\n**Explanation:** The powerful integers in the range [15..215] are 110 and 210. All these integers have each digit <= 6, and \"10\" as a suffix.\nIt can be shown that there are only 2 powerful integers in this range.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** start = 1000, finish = 2000, limit = 4, s = \"3000\"\n**Output:** 0\n**Explanation:** All integers in the range [1000..2000] are smaller than 3000, hence \"3000\" cannot be a suffix of any integer in this range.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= start <= finish <= 1015`\n* `1 <= limit <= 9`\n* `1 <= s.length <= floor(log10(finish)) + 1`\n* `s` only consists of numeric digits which are at most `limit`.\n* `s` does not have leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfPowerfulInt(self, start: int, finish: int, limit: int, s: str) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.2089511752439224}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.4596965494924534}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9629442306065323}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.572605671114691}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.258494872360865}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.666683432012212}, {"name": "Codestral-22B-v0.1", "score": -6.338611745891631}, {"name": "deepseek-coder-33b-instruct", "score": -6.644570678130743}], "rank": [3, 4, 0, 1, 2, 7, 5, 6]}
{"id": "LeetCode/15", "prompt": "# Check if Bitwise OR Has Trailing Zeros\n\nYou are given an array of **positive** integers `nums`.\n\n\nYou have to check if it is possible to select **two or more** elements in the array such that the bitwise `OR` of the selected elements has **at least** one trailing zero in its binary representation.\n\n\nFor example, the binary representation of `5`, which is `\"101\"`, does not have any trailing zeros, whereas the binary representation of `4`, which is `\"100\"`, has two trailing zeros.\n\n\nReturn `true` *if it is possible to select two or more elements whose bitwise* `OR` *has trailing zeros, return* `false` *otherwise*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** true\n**Explanation:** If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,8,16]\n**Output:** true\n**Explanation:** If we select the elements 2 and 4, their bitwise OR is 6, which has the binary representation \"110\" with one trailing zero.\nOther possible ways to select elements to have trailing zeroes in the binary representation of their bitwise OR are: (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (2, 4, 8), (2, 4, 16), (2, 8, 16), (4, 8, 16), and (2, 4, 8, 16).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,5,7,9]\n**Output:** false\n**Explanation:** There is no possible way to select two or more elements to have trailing zeros in the binary representation of their bitwise OR.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def hasTrailingZeros(self, nums: List[int]) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.5957961837207675}, {"name": "Codestral-22B-v0.1", "score": -0.5576723584129244}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.1342942210293843}, {"name": "deepseek-coder-v2-lite-instruct", "score": -1.972104690502512}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.2892970091639273}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.8018509327730974}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.700577343707252}, {"name": "deepseek-coder-33b-instruct", "score": -6.055340348695455}], "rank": [7, 5, 1, 4, 0, 3, 2, 6]}
{"id": "LeetCode/16", "prompt": "# Find Longest Special Substring That Occurs Thrice I\n\nYou are given a string `s` that consists of lowercase English letters.\n\n\nA string is called **special** if it is made up of only a single character. For example, the string `\"abc\"` is not special, whereas the strings `\"ddd\"`, `\"zz\"`, and `\"f\"` are special.\n\n\nReturn *the length of the **longest special substring** of* `s` *which occurs **at least thrice***, *or* `-1` *if no special substring occurs at least thrice*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aaaa\"\n**Output:** 2\n**Explanation:** The longest special substring which occurs thrice is \"aa\": substrings \"**aa**aa\", \"a**aa**a\", and \"aa**aa**\".\nIt can be shown that the maximum length achievable is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcdef\"\n**Output:** -1\n**Explanation:** There exists no special substring which occurs at least thrice. Hence return -1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"abcaba\"\n**Output:** 1\n**Explanation:** The longest special substring which occurs thrice is \"a\": substrings \"**a**bcaba\", \"abc**a**ba\", and \"abcab**a**\".\nIt can be shown that the maximum length achievable is 1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= s.length <= 50`\n* `s` consists of only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumLength(self, s: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3238236335464109}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.862832761237374}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2105856689761385}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.608843431354387}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.817852416437292}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.216543160696352}, {"name": "Codestral-22B-v0.1", "score": -5.901950039900234}, {"name": "deepseek-coder-33b-instruct", "score": -6.299537309207497}], "rank": [7, 0, 1, 3, 4, 2, 5, 6]}
{"id": "LeetCode/17", "prompt": "# Find Longest Special Substring That Occurs Thrice II\n\nYou are given a string `s` that consists of lowercase English letters.\n\n\nA string is called **special** if it is made up of only a single character. For example, the string `\"abc\"` is not special, whereas the strings `\"ddd\"`, `\"zz\"`, and `\"f\"` are special.\n\n\nReturn *the length of the **longest special substring** of* `s` *which occurs **at least thrice***, *or* `-1` *if no special substring occurs at least thrice*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aaaa\"\n**Output:** 2\n**Explanation:** The longest special substring which occurs thrice is \"aa\": substrings \"**aa**aa\", \"a**aa**a\", and \"aa**aa**\".\nIt can be shown that the maximum length achievable is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcdef\"\n**Output:** -1\n**Explanation:** There exists no special substring which occurs at least thrice. Hence return -1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"abcaba\"\n**Output:** 1\n**Explanation:** The longest special substring which occurs thrice is \"a\": substrings \"**a**bcaba\", \"abc**a**ba\", and \"abcab**a**\".\nIt can be shown that the maximum length achievable is 1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= s.length <= 5 * 105`\n* `s` consists of only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumLength(self, s: str) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -0.6246651586736984}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3630148080962767}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.8878775585528036}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.717466910965849}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.956728060027345}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.107834597473375}, {"name": "deepseek-coder-33b-instruct", "score": -6.024734899619377}, {"name": "Codestral-22B-v0.1", "score": -6.240646146970964}], "rank": [4, 7, 1, 0, 3, 2, 6, 5]}
{"id": "LeetCode/18", "prompt": "# Palindrome Rearrangement Queries\n\nYou are given a **0-indexed** string `s` having an **even** length `n`.\n\n\nYou are also given a **0-indexed** 2D integer array, `queries`, where `queries[i] = [ai, bi, ci, di]`.\n\n\nFor each query `i`, you are allowed to perform the following operations:\n\n\n* Rearrange the characters within the **substring** `s[ai:bi]`, where `0 <= ai <= bi < n / 2`.\n* Rearrange the characters within the **substring** `s[ci:di]`, where `n / 2 <= ci <= di < n`.\n\n\nFor each query, your task is to determine whether it is possible to make `s` a **palindrome** by performing the operations.\n\n\nEach query is answered **independently** of the others.\n\n\nReturn *a **0-indexed** array* `answer`*, where* `answer[i] == true` *if it is possible to make* `s` *a palindrome by performing operations specified by the* `ith` *query, and* `false` *otherwise.*\n\n\n* A **substring** is a contiguous sequence of characters within a string.\n* `s[x:y]` represents the substring consisting of characters from the index `x` to index `y` in `s`, **both inclusive**.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]\n**Output:** [true,true]\n**Explanation:** In this example, there are two queries:\nIn the first query:\n- a0 = 1, b0 = 1, c0 = 3, d0 = 5.\n- So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc.\n- To make s a palindrome, s[3:5] can be rearranged to become => abccba.\n- Now, s is a palindrome. So, answer[0] = true.\nIn the second query:\n- a1 = 0, b1 = 2, c1 = 5, d1 = 5.\n- So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc.\n- To make s a palindrome, s[0:2] can be rearranged to become => cbaabc.\n- Now, s is a palindrome. So, answer[1] = true.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abbcdecbba\", queries = [[0,2,7,9]]\n**Output:** [false]\n**Explanation:** In this example, there is only one query.\na0 = 0, b0 = 2, c0 = 7, d0 = 9.\nSo, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba.\nIt is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\nSo, answer[0] = false.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"acbcab\", queries = [[1,2,4,5]]\n**Output:** [true]\n**Explanation:** In this example, there is only one query.\na0 = 1, b0 = 2, c0 = 4, d0 = 5.\nSo, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab.\nTo make s a palindrome s[1:2] can be rearranged to become abccab.\nThen, s[4:5] can be rearranged to become abccba.\nNow, s is a palindrome. So, answer[0] = true.\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= n == s.length <= 105`\n* `1 <= queries.length <= 105`\n* `queries[i].length == 4`\n* `ai == queries[i][0], bi == queries[i][1]`\n* `ci == queries[i][2], di == queries[i][3]`\n* `0 <= ai <= bi < n / 2`\n* `n / 2 <= ci <= di < n`\n* `n` is even.\n* `s` consists of only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.015806277891618}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.444390918870432}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.2947911567714785}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.577266416925583}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.389542436782128}, {"name": "deepseek-coder-33b-instruct", "score": -6.3910524180432695}, {"name": "Codestral-22B-v0.1", "score": -6.443670101099961}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.296383437820507}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "LeetCode/19", "prompt": "# Minimum Number Game\n\nYou are given a **0-indexed** integer array `nums` of **even** length and there is also an empty array `arr`. Alice and Bob decided to play a game where in every round Alice and Bob will do one move. The rules of the game are as follows:\n\n\n* Every round, first Alice will remove the **minimum** element from `nums`, and then Bob does the same.\n* Now, first Bob will append the removed element in the array `arr`, and then Alice does the same.\n* The game continues until `nums` becomes empty.\n\n\nReturn *the resulting array* `arr`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,4,2,3]\n**Output:** [3,2,5,4]\n**Explanation:** In round one, first Alice removes 2 and then Bob removes 3. Then in arr firstly Bob appends 3 and then Alice appends 2. So arr = [3,2].\nAt the begining of round two, nums = [5,4]. Now, first Alice removes 4 and then Bob removes 5. Then both append in arr which becomes [3,2,5,4].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,5]\n**Output:** [5,2]\n**Explanation:** In round one, first Alice removes 2 and then Bob removes 5. Then in arr firstly Bob appends and then Alice appends. So arr = [5,2].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `nums.length % 2 == 0`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberGame(self, nums: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.5956669403178543}, {"name": "Codestral-22B-v0.1", "score": -3.1167956967730372}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4211307193696054}, {"name": "deepseek-coder-33b-instruct", "score": -3.5041211561058834}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.927934849068956}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.053522567701846}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.991574791357513}], "rank": [7, 1, 5, 0, 6, 4, 3, 2]}
{"id": "LeetCode/20", "prompt": "# Minimum Cost to Convert String I\n\nYou are given two **0-indexed** strings `source` and `target`, both of length `n` and consisting of **lowercase** English letters. You are also given two **0-indexed** character arrays `original` and `changed`, and an integer array `cost`, where `cost[i]` represents the cost of changing the character `original[i]` to the character `changed[i]`.\n\n\nYou start with the string `source`. In one operation, you can pick a character `x` from the string and change it to the character `y` at a cost of `z` **if** there exists **any** index `j` such that `cost[j] == z`, `original[j] == x`, and `changed[j] == y`.\n\n\nReturn *the **minimum** cost to convert the string* `source` *to the string* `target` *using **any** number of operations. If it is impossible to convert* `source` *to* `target`, *return* `-1`.\n\n\n**Note** that there may exist indices `i`, `j` such that `original[j] == original[i]` and `changed[j] == changed[i]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]\n**Output:** 28\n**Explanation:** To convert the string \"abcd\" to string \"acbe\":\n- Change value at index 1 from 'b' to 'c' at a cost of 5.\n- Change value at index 2 from 'c' to 'e' at a cost of 1.\n- Change value at index 2 from 'e' to 'b' at a cost of 2.\n- Change value at index 3 from 'd' to 'e' at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28.\nIt can be shown that this is the minimum possible cost.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2]\n**Output:** 12\n**Explanation:** To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000]\n**Output:** -1\n**Explanation:** It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= source.length == target.length <= 105`\n* `source`, `target` consist of lowercase English letters.\n* `1 <= cost.length == original.length == changed.length <= 2000`\n* `original[i]`, `changed[i]` are lowercase English letters.\n* `1 <= cost[i] <= 106`\n* `original[i] != changed[i]`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0021600872433653606}, {"name": "Codestral-22B-v0.1", "score": -3.8465274233121716}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.207673247529104}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.4496385530839015}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.540369027549757}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.884102028779482}, {"name": "deepseek-coder-33b-instruct", "score": -6.330084475786654}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.397969114790809}], "rank": [7, 5, 0, 1, 2, 3, 6, 4]}
{"id": "LeetCode/21", "prompt": "# Minimum Cost to Convert String II\n\nYou are given two **0-indexed** strings `source` and `target`, both of length `n` and consisting of **lowercase** English characters. You are also given two **0-indexed** string arrays `original` and `changed`, and an integer array `cost`, where `cost[i]` represents the cost of converting the string `original[i]` to the string `changed[i]`.\n\n\nYou start with the string `source`. In one operation, you can pick a **substring** `x` from the string, and change it to `y` at a cost of `z` **if** there exists **any** index `j` such that `cost[j] == z`, `original[j] == x`, and `changed[j] == y`. You are allowed to do **any** number of operations, but any pair of operations must satisfy **either** of these two conditions:\n\n\n* The substrings picked in the operations are `source[a..b]` and `source[c..d]` with either `b < c` **or** `d < a`. In other words, the indices picked in both operations are **disjoint**.\n* The substrings picked in the operations are `source[a..b]` and `source[c..d]` with `a == c` **and** `b == d`. In other words, the indices picked in both operations are **identical**.\n\n\nReturn *the **minimum** cost to convert the string* `source` *to the string* `target` *using **any** number of operations*. *If it is impossible to convert* `source` *to* `target`, *return* `-1`.\n\n\n**Note** that there may exist indices `i`, `j` such that `original[j] == original[i]` and `changed[j] == changed[i]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]\n**Output:** 28\n**Explanation:** To convert \"abcd\" to \"acbe\", do the following operations:\n- Change substring source[1..1] from \"b\" to \"c\" at a cost of 5.\n- Change substring source[2..2] from \"c\" to \"e\" at a cost of 1.\n- Change substring source[2..2] from \"e\" to \"b\" at a cost of 2.\n- Change substring source[3..3] from \"d\" to \"e\" at a cost of 20.\nThe total cost incurred is 5 + 1 + 2 + 20 = 28. \nIt can be shown that this is the minimum possible cost.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** source = \"abcdefgh\", target = \"acdeeghh\", original = [\"bcd\",\"fgh\",\"thh\"], changed = [\"cde\",\"thh\",\"ghh\"], cost = [1,3,5]\n**Output:** 9\n**Explanation:** To convert \"abcdefgh\" to \"acdeeghh\", do the following operations:\n- Change substring source[1..3] from \"bcd\" to \"cde\" at a cost of 1.\n- Change substring source[5..7] from \"fgh\" to \"thh\" at a cost of 3. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation.\n- Change substring source[5..7] from \"thh\" to \"ghh\" at a cost of 5. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation, and identical with indices picked in the second operation.\nThe total cost incurred is 1 + 3 + 5 = 9.\nIt can be shown that this is the minimum possible cost.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** source = \"abcdefgh\", target = \"addddddd\", original = [\"bcd\",\"defgh\"], changed = [\"ddd\",\"ddddd\"], cost = [100,1578]\n**Output:** -1\n**Explanation:** It is impossible to convert \"abcdefgh\" to \"addddddd\".\nIf you select substring source[1..3] as the first operation to change \"abcdefgh\" to \"adddefgh\", you cannot select substring source[3..7] as the second operation because it has a common index, 3, with the first operation.\nIf you select substring source[3..7] as the first operation to change \"abcdefgh\" to \"abcddddd\", you cannot select substring source[1..3] as the second operation because it has a common index, 3, with the first operation.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= source.length == target.length <= 1000`\n* `source`, `target` consist only of lowercase English characters.\n* `1 <= cost.length == original.length == changed.length <= 100`\n* `1 <= original[i].length == changed[i].length <= source.length`\n* `original[i]`, `changed[i]` consist only of lowercase English characters.\n* `original[i] != changed[i]`\n* `1 <= cost[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.2460923574330485}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.3678769990694395}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.4963154027269985}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.9149182199661166}, {"name": "Codestral-22B-v0.1", "score": -6.4538926795984475}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.559660562245097}, {"name": "deepseek-coder-33b-instruct", "score": -6.635347951361971}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.210815499258107}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/22", "prompt": "# Count the Number of Incremovable Subarrays I\n\nYou are given a **0-indexed** array of **positive** integers `nums`.\n\n\nA subarray of `nums` is called **incremovable** if `nums` becomes **strictly increasing** on removing the subarray. For example, the subarray `[3, 4]` is an incremovable subarray of `[5, 3, 4, 6, 7]` because removing this subarray changes the array `[5, 3, 4, 6, 7]` to `[5, 6, 7]` which is strictly increasing.\n\n\nReturn *the total number of **incremovable** subarrays of* `nums`.\n\n\n**Note** that an empty array is considered strictly increasing.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 10\n**Explanation:** The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,5,7,8]\n**Output:** 7\n**Explanation:** The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\nIt can be shown that there are only 7 incremovable subarrays in nums.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [8,7,6,6]\n**Output:** 3\n**Explanation:** The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def incremovableSubarrayCount(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -3.469950683347662}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.927187441947918}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.100382568055433}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2761104090823325}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.486927044499251}, {"name": "Codestral-22B-v0.1", "score": -4.716177862000292}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.329757892382355}, {"name": "deepseek-coder-33b-instruct", "score": -6.352726952536414}], "rank": [4, 0, 7, 1, 3, 5, 2, 6]}
{"id": "LeetCode/23", "prompt": "# Find Polygon With the Largest Perimeter\n\nYou are given an array of **positive** integers `nums` of length `n`.\n\n\nA **polygon** is a closed plane figure that has at least `3` sides. The **longest side** of a polygon is **smaller** than the sum of its other sides.\n\n\nConversely, if you have `k` (`k >= 3`) **positive** real numbers `a1`, `a2`, `a3`, ..., `ak` where `a1 <= a2 <= a3 <= ... <= ak` **and** `a1 + a2 + a3 + ... + ak-1 > ak`, then there **always** exists a polygon with `k` sides whose lengths are `a1`, `a2`, `a3`, ..., `ak`.\n\n\nThe **perimeter** of a polygon is the sum of lengths of its sides.\n\n\nReturn *the **largest** possible **perimeter** of a **polygon** whose sides can be formed from* `nums`, *or* `-1` *if it is not possible to create a polygon*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,5,5]\n**Output:** 15\n**Explanation:** The only possible polygon that can be made from nums has 3 sides: 5, 5, and 5. The perimeter is 5 + 5 + 5 = 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,12,1,2,5,50,3]\n**Output:** 12\n**Explanation:** The polygon with the largest perimeter which can be made from nums has 5 sides: 1, 1, 2, 3, and 5. The perimeter is 1 + 1 + 2 + 3 + 5 = 12.\nWe cannot have a polygon with either 12 or 50 as the longest side because it is not possible to include 2 or more smaller sides that have a greater sum than either of them.\nIt can be shown that the largest possible perimeter is 12.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,5,50]\n**Output:** -1\n**Explanation:** There is no possible way to form a polygon from nums, as a polygon has at least 3 sides and 50 > 5 + 5.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= n <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def largestPerimeter(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.2632599255488266}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.5891696099649244}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.99076024596553}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.43708284042196}, {"name": "Codestral-22B-v0.1", "score": -5.308119171520297}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.739690012994619}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.971180203805274}, {"name": "deepseek-coder-33b-instruct", "score": -5.97923000943964}], "rank": [7, 0, 1, 3, 5, 2, 4, 6]}
{"id": "LeetCode/24", "prompt": "# Count the Number of Incremovable Subarrays II\n\nYou are given a **0-indexed** array of **positive** integers `nums`.\n\n\nA subarray of `nums` is called **incremovable** if `nums` becomes **strictly increasing** on removing the subarray. For example, the subarray `[3, 4]` is an incremovable subarray of `[5, 3, 4, 6, 7]` because removing this subarray changes the array `[5, 3, 4, 6, 7]` to `[5, 6, 7]` which is strictly increasing.\n\n\nReturn *the total number of **incremovable** subarrays of* `nums`.\n\n\n**Note** that an empty array is considered strictly increasing.\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 10\n**Explanation:** The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,5,7,8]\n**Output:** 7\n**Explanation:** The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].\nIt can be shown that there are only 7 incremovable subarrays in nums.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [8,7,6,6]\n**Output:** 3\n**Explanation:** The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def incremovableSubarrayCount(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -3.5827265351601594}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.0812593226734455}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.363964491855473}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.460652955129071}, {"name": "Codestral-22B-v0.1", "score": -4.871643204741222}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.734272881654199}, {"name": "deepseek-coder-33b-instruct", "score": -6.085036854049307}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.869155812814979}], "rank": [4, 0, 1, 3, 5, 2, 6, 7]}
{"id": "LeetCode/25", "prompt": "# Find Missing and Repeated Values\n\nYou are given a **0-indexed** 2D integer matrix `grid` of size `n * n` with values in the range `[1, n2]`. Each integer appears **exactly once** except `a` which appears **twice** and `b` which is **missing**. The task is to find the repeating and missing numbers `a` and `b`.\n\n\nReturn *a **0-indexed** integer array* `ans` *of size* `2` *where* `ans[0]` *equals to* `a` *and* `ans[1]` *equals to* `b`*.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[1,3],[2,2]]\n**Output:** [2,4]\n**Explanation:** Number 2 is repeated and number 4 is missing so the answer is [2,4].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[9,1,7],[8,9,2],[3,4,6]]\n**Output:** [9,5]\n**Explanation:** Number 9 is repeated and number 5 is missing so the answer is [9,5].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= n == grid.length == grid[i].length <= 50`\n* `1 <= grid[i][j] <= n * n`\n* For all `x` that `1 <= x <= n * n` there is exactly one `x` that is not equal to any of the grid members.\n* For all `x` that `1 <= x <= n * n` there is exactly one `x` that is equal to exactly two of the grid members.\n* For all `x` that `1 <= x <= n * n` except two of them there is exatly one pair of `i, j` that `0 <= i, j <= n - 1` and `grid[i][j] == x`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.20110542407413945}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.2339093674783737}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5230917236417643}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.030836620965719}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.254477313726906}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.314171030471203}, {"name": "Codestral-22B-v0.1", "score": -6.048577126564218}, {"name": "deepseek-coder-33b-instruct", "score": -6.1977711491523975}], "rank": [7, 3, 4, 0, 1, 2, 5, 6]}
{"id": "LeetCode/26", "prompt": "# Divide Array Into Arrays With Max Difference\n\nYou are given an integer array `nums` of size `n` and a positive integer `k`.\n\n\nDivide the array into one or more arrays of size `3` satisfying the following conditions:\n\n\n* **Each** element of `nums` should be in **exactly** one array.\n* The difference between **any** two elements in one array is less than or equal to `k`.\n\n\nReturn *a* **2D** *array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return **any** of them.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,4,8,7,9,3,5,1], k = 2\n**Output:** [[1,1,3],[3,4,5],[7,8,9]]\n**Explanation:** We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9].\nThe difference between any two elements in each array is less than or equal to 2.\nNote that the order of elements is not important.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,3,2,7,3], k = 3\n**Output:** []\n**Explanation:** It is not possible to divide the array satisfying all the conditions.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `n` is a multiple of `3`.\n* `1 <= nums[i] <= 105`\n* `1 <= k <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def divideArray(self, nums: List[int], k: int) -> List[List[int]]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.091335739847863}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.11631212561360638}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.635346201907999}, {"name": "Codestral-22B-v0.1", "score": -1.9573595680950326}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5379253666215718}, {"name": "deepseek-coder-33b-instruct", "score": -4.749031022828504}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.442417710521793}], "rank": [1, 4, 7, 3, 5, 0, 6, 2]}
{"id": "LeetCode/27", "prompt": "# Minimum Cost to Make Array Equalindromic\n\nYou are given a **0-indexed** integer array `nums` having length `n`.\n\n\nYou are allowed to perform a special move **any** number of times (**including zero**) on `nums`. In one **special** **move** you perform the following steps **in order**:\n\n\n* Choose an index `i` in the range `[0, n - 1]`, and a **positive** integer `x`.\n* Add `|nums[i] - x|` to the total cost.\n* Change the value of `nums[i]` to `x`.\n\n\nA **palindromic number** is a positive integer that remains the same when its digits are reversed. For example, `121`, `2552` and `65756` are palindromic numbers whereas `24`, `46`, `235` are not palindromic numbers.\n\n\nAn array is considered **equalindromic** if all the elements in the array are equal to an integer `y`, where `y` is a **palindromic number** less than `109`.\n\n\nReturn *an integer denoting the **minimum** possible total cost to make* `nums` ***equalindromic** by performing any number of special moves.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 6\n**Explanation:** We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6.\nIt can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,12,13,14,15]\n**Output:** 11\n**Explanation:** We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11.\nIt can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [22,33,22,33,22]\n**Output:** 22\n**Explanation:** We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22.\nIt can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.09791543602756647}, {"name": "Codestral-22B-v0.1", "score": -2.0805836685088703}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.931041011263908}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.433147414181596}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.64408315948669}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.81934560286918}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.835442116647927}, {"name": "deepseek-coder-33b-instruct", "score": -6.224574270734042}], "rank": [7, 5, 0, 1, 3, 4, 2, 6]}
{"id": "LeetCode/28", "prompt": "# Apply Operations to Maximize Frequency Score\n\nYou are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nYou can perform the following operation on the array **at most** `k` times:\n\n\n* Choose any index `i` from the array and **increase** or **decrease** `nums[i]` by `1`.\n\n\nThe score of the final array is the **frequency** of the most frequent element in the array.\n\n\nReturn *the **maximum** score you can achieve*.\n\n\nThe frequency of an element is the number of occurences of that element in the array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,6,4], k = 3\n**Output:** 3\n**Explanation:** We can do the following operations on the array:\n- Choose i = 0, and increase the value of nums[0] by 1. The resulting array is [2,2,6,4].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,3].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,2].\nThe element 2 is the most frequent in the final array so our score is 3.\nIt can be shown that we cannot achieve a better score.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,4,2,4], k = 0\n**Output:** 3\n**Explanation:** We cannot apply any operations so our score will be the frequency of the most frequent element in the original array, which is 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `0 <= k <= 1014`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxFrequencyScore(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.7104695934724914}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.027848570933736}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.304497432164643}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.043992697750252}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.550538050721658}, {"name": "Codestral-22B-v0.1", "score": -6.09760226066926}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.171282973683818}, {"name": "deepseek-coder-33b-instruct", "score": -6.352726952536414}], "rank": [7, 0, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/29", "prompt": "# Count Tested Devices After Test Operations\n\nYou are given a **0-indexed** integer array `batteryPercentages` having length `n`, denoting the battery percentages of `n` **0-indexed** devices.\n\n\nYour task is to test each device `i` **in order** from `0` to `n - 1`, by performing the following test operations:\n\n\n* If `batteryPercentages[i]` is **greater** than `0`:\n\t+ **Increment** the count of tested devices.\n\t+ **Decrease** the battery percentage of all devices with indices `j` in the range `[i + 1, n - 1]` by `1`, ensuring their battery percentage **never goes below** `0`, i.e, `batteryPercentages[j] = max(0, batteryPercentages[j] - 1)`.\n\t+ Move to the next device.\n* Otherwise, move to the next device without performing any test.\n\n\nReturn *an integer denoting the number of devices that will be tested after performing the test operations in order.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** batteryPercentages = [1,1,2,1,3]\n**Output:** 3\n**Explanation:** Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2].\nAt device 1, batteryPercentages[1] == 0, so we move to the next device without testing.\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1].\nAt device 3, batteryPercentages[3] == 0, so we move to the next device without testing.\nAt device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same.\nSo, the answer is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** batteryPercentages = [0,1,2]\n**Output:** 2\n**Explanation:** Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] == 0, so we move to the next device without testing.\nAt device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1].\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same.\nSo, the answer is 2.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == batteryPercentages.length <= 100`\n* `0 <= batteryPercentages[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countTestedDevices(self, batteryPercentages: List[int]) -> int:\n```\n", "scores": [{"name": "CodeLlama-7b-Instruct-hf", "score": 1.8088539025873551}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.7906594801170321}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.4463879733797622}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.4283277428264434}, {"name": "Codestral-22B-v0.1", "score": 1.275117642509211}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.2042765193587415}, {"name": "deepseek-coder-33b-instruct", "score": 0.606842267746643}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}], "rank": [2, 3, 0, 4, 5, 1, 6, 7]}
{"id": "LeetCode/30", "prompt": "# Double Modular Exponentiation\n\nYou are given a **0-indexed** 2D array `variables` where `variables[i] = [ai, bi, ci, mi]`, and an integer `target`.\n\n\nAn index `i` is **good** if the following formula holds:\n\n\n* `0 <= i < variables.length`\n* `((aibi % 10)ci) % mi == target`\n\n\nReturn *an array consisting of **good** indices in **any order***.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2\n**Output:** [0,2]\n**Explanation:** For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2.\nTherefore we return [0,2] as the answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** variables = [[39,3,1000,1000]], target = 17\n**Output:** []\n**Explanation:** For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1.\nTherefore we return [] as the answer.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= variables.length <= 100`\n* `variables[i] == [ai, bi, ci, mi]`\n* `1 <= ai, bi, ci, mi <= 103`\n* `0 <= target <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getGoodIndices(self, variables: List[List[int]], target: int) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.1311776468892463}, {"name": "Codestral-22B-v0.1", "score": 0.7060704636745276}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.620064283175104}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.072813559582631}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8575245800916473}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.148168668100076}, {"name": "deepseek-coder-33b-instruct", "score": -6.286489593815022}], "rank": [4, 5, 7, 1, 3, 0, 2, 6]}
{"id": "LeetCode/31", "prompt": "# Count Subarrays Where Max Element Appears at Least K Times\n\nYou are given an integer array `nums` and a **positive** integer `k`.\n\n\nReturn *the number of subarrays where the **maximum** element of* `nums` *appears **at least*** `k` *times in that subarray.*\n\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,3,3], k = 2\n**Output:** 6\n**Explanation:** The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,2,1], k = 3\n**Output:** 0\n**Explanation:** No subarray contains the element 4 at least 3 times.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n* `1 <= k <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.089733949664417}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.393806973209413}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.84640475709717}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.998400756427913}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.288206422797307}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.44829034637879}, {"name": "Codestral-22B-v0.1", "score": -6.18820251954242}, {"name": "deepseek-coder-33b-instruct", "score": -6.246292794688684}], "rank": [0, 1, 4, 3, 2, 7, 5, 6]}
{"id": "LeetCode/32", "prompt": "# Count the Number of Good Partitions\n\nYou are given a **0-indexed** array `nums` consisting of **positive** integers.\n\n\nA partition of an array into one or more **contiguous** subarrays is called **good** if no two subarrays contain the same number.\n\n\nReturn *the **total number** of good partitions of* `nums`.\n\n\nSince the answer may be large, return it **modulo** `109 + 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 8\n**Explanation:** The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4]).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1]\n**Output:** 1\n**Explanation:** The only possible good partition is: ([1,1,1,1]).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,3]\n**Output:** 2\n**Explanation:** The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3]).\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfGoodPartitions(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0058309203107924645}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9698389808048904}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2368274371816765}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.191355569523236}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.444959930884973}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.300594950765632}, {"name": "deepseek-coder-33b-instruct", "score": -6.305537788785716}, {"name": "Codestral-22B-v0.1", "score": -6.353935163643291}], "rank": [7, 0, 1, 3, 2, 4, 6, 5]}
{"id": "LeetCode/33", "prompt": "# Find Common Elements Between Two Arrays\n\nYou are given two **0-indexed** integer arrays `nums1` and `nums2` of sizes `n` and `m`, respectively.\n\n\nConsider calculating the following values:\n\n\n* The number of indices `i` such that `0 <= i < n` and `nums1[i]` occurs **at least** once in `nums2`.\n* The number of indices `i` such that `0 <= i < m` and `nums2[i]` occurs **at least** once in `nums1`.\n\n\nReturn *an integer array* `answer` *of size* `2` *containing the two values **in the above order***.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]\n**Output:** [3,4]\n**Explanation:** We calculate the values as follows:\n- The elements at indices 1, 2, and 3 in nums1 occur at least once in nums2. So the first value is 3.\n- The elements at indices 0, 1, 3, and 4 in nums2 occur at least once in nums1. So the second value is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,4,2,3], nums2 = [1,5]\n**Output:** [0,0]\n**Explanation:** There are no common elements between the two arrays, so the two values will be 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == nums1.length`\n* `m == nums2.length`\n* `1 <= n, m <= 100`\n* `1 <= nums1[i], nums2[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findIntersectionValues(self, nums1: List[int], nums2: List[int]) -> List[int]:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.177864330051678}, {"name": "Codestral-22B-v0.1", "score": 1.1432444426888777}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5852035378838298}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.1436237032146104}, {"name": "deepseek-coder-33b-instruct", "score": -1.8495832792108908}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.593468258120801}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.6306992327167933}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.359320797138244}], "rank": [3, 5, 4, 0, 6, 1, 7, 2]}
{"id": "LeetCode/34", "prompt": "# Remove Adjacent Almost-Equal Characters\n\nYou are given a **0-indexed** string `word`.\n\n\nIn one operation, you can pick any index `i` of `word` and change `word[i]` to any lowercase English letter.\n\n\nReturn *the **minimum** number of operations needed to remove all adjacent **almost-equal** characters from* `word`.\n\n\nTwo characters `a` and `b` are **almost-equal** if `a == b` or `a` and `b` are adjacent in the alphabet.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"aaaaa\"\n**Output:** 2\n**Explanation:** We can change word into \"a**c**a**c**a\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"abddez\"\n**Output:** 2\n**Explanation:** We can change word into \"**y**bd**o**ez\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word = \"zyxyxyz\"\n**Output:** 3\n**Explanation:** We can change word into \"z**a**x**a**x**a**z\" which does not have any adjacent almost-equal characters. \nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 100`\n* `word` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def removeAlmostEqualCharacters(self, word: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.13372316556594832}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.413195644881819}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7883627325988862}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.029343712004687}, {"name": "Codestral-22B-v0.1", "score": -4.574036571015985}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.608843431354387}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.230573714461517}, {"name": "deepseek-coder-33b-instruct", "score": -6.099843502689072}], "rank": [7, 4, 0, 1, 5, 3, 2, 6]}
{"id": "LeetCode/35", "prompt": "# Length of Longest Subarray With at Most K Frequency\n\nYou are given an integer array `nums` and an integer `k`.\n\n\nThe **frequency** of an element `x` is the number of times it occurs in an array.\n\n\nAn array is called **good** if the frequency of each element in this array is **less than or equal** to `k`.\n\n\nReturn *the length of the **longest** **good** subarray of* `nums`*.*\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1,2,3,1,2], k = 2\n**Output:** 6\n**Explanation:** The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good.\nIt can be shown that there are no good subarrays with length more than 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,2,1,2,1,2], k = 1\n**Output:** 2\n**Explanation:** The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good.\nIt can be shown that there are no good subarrays with length more than 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,5,5,5,5,5,5], k = 4\n**Output:** 4\n**Explanation:** The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray.\nIt can be shown that there are no good subarrays with length more than 4.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSubarrayLength(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.6730131293674066}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.680766482585076}, {"name": "deepseek-coder-33b-instruct", "score": 0.6301502245799799}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.1415568045800475}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.03848684511174838}, {"name": "Codestral-22B-v0.1", "score": -2.046442268490389}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.290748797048084}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.308491806754228}], "rank": [1, 3, 6, 0, 7, 5, 2, 4]}
{"id": "LeetCode/36", "prompt": "# Find the Peaks\n\nYou are given a **0-indexed** array `mountain`. Your task is to find all the **peaks** in the `mountain` array.\n\n\nReturn *an array that consists of* indices *of **peaks** in the given array in **any order**.*\n\n\n**Notes:**\n\n\n* A **peak** is defined as an element that is **strictly greater** than its neighboring elements.\n* The first and last elements of the array are **not** a peak.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** mountain = [2,4,4]\n**Output:** []\n**Explanation:** mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.\nmountain[1] also can not be a peak because it is not strictly greater than mountain[2].\nSo the answer is [].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mountain = [1,4,3,8,5]\n**Output:** [1,3]\n**Explanation:** mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.\nmountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].\nBut mountain [1] and mountain[3] are strictly greater than their neighboring elements.\nSo the answer is [1,3].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= mountain.length <= 100`\n* `1 <= mountain[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findPeaks(self, mountain: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.956866969639479}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.384371763147998}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.9061565587736897}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.439382589008706}, {"name": "Codestral-22B-v0.1", "score": 0.9289526131212691}, {"name": "deepseek-coder-33b-instruct", "score": 0.6608515858685946}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.37618755404448034}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}], "rank": [0, 1, 2, 4, 5, 6, 3, 7]}
{"id": "LeetCode/37", "prompt": "# Minimum Number of Coins to be Added\n\nYou are given a **0-indexed** integer array `coins`, representing the values of the coins available, and an integer `target`.\n\n\nAn integer `x` is **obtainable** if there exists a subsequence of `coins` that sums to `x`.\n\n\nReturn *the **minimum** number of coins **of any value** that need to be added to the array so that every integer in the range* `[1, target]` *is **obtainable***.\n\n\nA **subsequence** of an array is a new **non-empty** array that is formed from the original array by deleting some (**possibly none**) of the elements without disturbing the relative positions of the remaining elements.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** coins = [1,4,10], target = 19\n**Output:** 2\n**Explanation:** We need to add coins 2 and 8. The resulting array will be [1,2,4,8,10].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 2 is the minimum number of coins that need to be added to the array. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** coins = [1,4,10,5,7,19], target = 19\n**Output:** 1\n**Explanation:** We only need to add the coin 2. The resulting array will be [1,2,4,5,7,10,19].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 1 is the minimum number of coins that need to be added to the array. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** coins = [1,1,1], target = 20\n**Output:** 3\n**Explanation:** We need to add coins 4, 8, and 16. The resulting array will be [1,1,1,4,8,16].\nIt can be shown that all integers from 1 to 20 are obtainable from the resulting array, and that 3 is the minimum number of coins that need to be added to the array.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= target <= 105`\n* `1 <= coins.length <= 105`\n* `1 <= coins[i] <= target`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumAddedCoins(self, coins: List[int], target: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.1163286822566505}, {"name": "Codestral-22B-v0.1", "score": -1.9077996663075139}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9813998032059663}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.229923856463923}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.852511383699287}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0541544480097516}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.760276223210665}, {"name": "deepseek-coder-33b-instruct", "score": -6.179146710144033}], "rank": [7, 5, 0, 1, 4, 3, 2, 6]}
{"id": "LeetCode/38", "prompt": "# Count Complete Substrings\n\nYou are given a string `word` and an integer `k`.\n\n\nA substring `s` of `word` is **complete** if:\n\n\n* Each character in `s` occurs **exactly** `k` times.\n* The difference between two adjacent characters is **at most** `2`. That is, for any two adjacent characters `c1` and `c2` in `s`, the absolute difference in their positions in the alphabet is **at most** `2`.\n\n\nReturn *the number of **complete** substrings of* `word`.\n\n\nA **substring** is a **non-empty** contiguous sequence of characters in a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"igigee\", k = 2\n**Output:** 3\n**Explanation:** The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: **igig**ee, igig**ee**, **igigee**.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"aaabbbccc\", k = 3\n**Output:** 6\n**Explanation:** The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: **aaa**bbbccc, aaa**bbb**ccc, aaabbb**ccc**, **aaabbb**ccc, aaa**bbbccc**, **aaabbbccc**.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 105`\n* `word` consists only of lowercase English letters.\n* `1 <= k <= word.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countCompleteSubstrings(self, word: str, k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -2.02916356859724}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.7466132817762174}, {"name": "deepseek-coder-33b-instruct", "score": -3.385491083131076}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8941034041251954}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.201403634515509}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.791882091083338}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.29497177629694}, {"name": "Codestral-22B-v0.1", "score": -6.337604189131332}], "rank": [4, 7, 6, 0, 1, 3, 2, 5]}
{"id": "LeetCode/39", "prompt": "# Count the Number of Infection Sequences\n\nYou are given an integer `n` and a **0-indexed**integer array `sick` which is **sorted** in **increasing** order.\n\n\nThere are `n` children standing in a queue with positions `0` to `n - 1` assigned to them. The array `sick` contains the positions of the children who are infected with an infectious disease. An infected child at position `i` can spread the disease to either of its immediate neighboring children at positions `i - 1` and `i + 1` **if** they exist and are currently not infected. **At most one** child who was previously not infected can get infected with the disease in one second.\n\n\nIt can be shown that after a finite number of seconds, all the children in the queue will get infected with the disease. An **infection sequence** is the sequential order of positions in which **all** of the non-infected children get infected with the disease. Return *the total number of possible infection sequences*.\n\n\nSince the answer may be large, return it modulo `109 + 7`.\n\n\n**Note** that an infection sequence **does not** contain positions of children who were already infected with the disease in the beginning.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, sick = [0,4]\n**Output:** 4\n**Explanation:** Children at positions 1, 2, and 3 are not infected in the beginning. There are 4 possible infection sequences:\n- The children at positions 1 and 3 can get infected since their positions are adjacent to the infected children 0 and 4. The child at position 1 gets infected first.\nNow, the child at position 2 is adjacent to the child at position 1 who is infected and the child at position 3 is adjacent to the child at position 4 who is infected, hence either of them can get infected. The child at position 2 gets infected.\nFinally, the child at position 3 gets infected because it is adjacent to children at positions 2 and 4 who are infected. The infection sequence is [1,2,3].\n- The children at positions 1 and 3 can get infected because their positions are adjacent to the infected children 0 and 4. The child at position 1 gets infected first.\nNow, the child at position 2 is adjacent to the child at position 1 who is infected and the child at position 3 is adjacent to the child at position 4 who is infected, hence either of them can get infected. The child at position 3 gets infected.\nFinally, the child at position 2 gets infected because it is adjacent to children at positions 1 and 3 who are infected. The infection sequence is [1,3,2].\n- The infection sequence is [3,1,2]. The order of infection of disease in the children can be seen as: [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4].\n- The infection sequence is [3,2,1]. The order of infection of disease in the children can be seen as: [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4] => [0,1,2,3,4].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, sick = [1]\n**Output:** 3\n**Explanation:** Children at positions 0, 2, and 3 are not infected in the beginning. There are 3 possible infection sequences:\n- The infection sequence is [0,2,3]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n- The infection sequence is [2,0,3]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n- The infection sequence is [2,3,0]. The order of infection of disease in the children can be seen as: [0,1,2,3] => [0,1,2,3] => [0,1,2,3] => [0,1,2,3].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `1 <= sick.length <= n - 1`\n* `0 <= sick[i] <= n - 1`\n* `sick` is sorted in increasing order.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfSequence(self, n: int, sick: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.243683685052137}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.293086125377234}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.7264670409442715}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.450025064724155}, {"name": "Codestral-22B-v0.1", "score": -6.20981663768606}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.330020325932573}, {"name": "deepseek-coder-33b-instruct", "score": -6.695388449639143}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.017602912452484}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/40", "prompt": "# Count Beautiful Substrings I\n\nYou are given a string `s` and a positive integer `k`.\n\n\nLet `vowels` and `consonants` be the number of vowels and consonants in a string.\n\n\nA string is **beautiful** if:\n\n\n* `vowels == consonants`.\n* `(vowels * consonants) % k == 0`, in other terms the multiplication of `vowels` and `consonants` is divisible by `k`.\n\n\nReturn *the number of **non-empty beautiful substrings** in the given string* `s`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n**Vowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n**Consonant letters** in English are every letter except vowels.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"baeyh\", k = 2\n**Output:** 2\n**Explanation:** There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). \nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abba\", k = 1\n**Output:** 3\n**Explanation:** There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). \n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"bcdf\", k = 1\n**Output:** 0\n**Explanation:** There are no beautiful substrings in the given string.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `1 <= k <= 1000`\n* `s` consists of only English lowercase letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulSubstrings(self, s: str, k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.7182921676893459}, {"name": "Codestral-22B-v0.1", "score": 0.6506711224171049}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.49733858089020355}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-33b-instruct", "score": -2.2329204990933897}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.603090314690592}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.6820405827264278}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.235612616218345}], "rank": [4, 5, 3, 7, 6, 0, 2, 1]}
{"id": "LeetCode/41", "prompt": "# Make Lexicographically Smallest Array by Swapping Elements\n\nYou are given a **0-indexed** array of **positive** integers `nums` and a **positive** integer `limit`.\n\n\nIn one operation, you can choose any two indices `i` and `j` and swap `nums[i]` and `nums[j]` **if** `|nums[i] - nums[j]| <= limit`.\n\n\nReturn *the **lexicographically smallest array** that can be obtained by performing the operation any number of times*.\n\n\nAn array `a` is lexicographically smaller than an array `b` if in the first position where `a` and `b` differ, array `a` has an element that is less than the corresponding element in `b`. For example, the array `[2,10,3]` is lexicographically smaller than the array `[10,2,3]` because they differ at index `0` and `2 < 10`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,5,3,9,8], limit = 2\n**Output:** [1,3,5,8,9]\n**Explanation:** Apply the operation 2 times:\n- Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]\n- Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\nNote that it may be possible to get the same result by doing different operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,7,6,18,2,1], limit = 3\n**Output:** [1,6,7,18,1,2]\n**Explanation:** Apply the operation 3 times:\n- Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]\n- Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]\n- Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,7,28,19,10], limit = 3\n**Output:** [1,7,28,19,10]\n**Explanation:** [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= limit <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.650513368556685}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.048579816854357}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.089733949664417}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.94449549159171}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.384017884737566}, {"name": "Codestral-22B-v0.1", "score": -6.185858768469536}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.351095118872347}, {"name": "deepseek-coder-33b-instruct", "score": -6.4352653614817195}], "rank": [7, 0, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/42", "prompt": "# Count Beautiful Substrings II\n\nYou are given a string `s` and a positive integer `k`.\n\n\nLet `vowels` and `consonants` be the number of vowels and consonants in a string.\n\n\nA string is **beautiful** if:\n\n\n* `vowels == consonants`.\n* `(vowels * consonants) % k == 0`, in other terms the multiplication of `vowels` and `consonants` is divisible by `k`.\n\n\nReturn *the number of **non-empty beautiful substrings** in the given string* `s`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n**Vowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n**Consonant letters** in English are every letter except vowels.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"baeyh\", k = 2\n**Output:** 2\n**Explanation:** There are 2 beautiful substrings in the given string.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]).\nYou can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\n- Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]).\nYou can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0.\nIt can be shown that there are only 2 beautiful substrings in the given string.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abba\", k = 1\n**Output:** 3\n**Explanation:** There are 3 beautiful substrings in the given string.\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]).\n- Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]).\nIt can be shown that there are only 3 beautiful substrings in the given string.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"bcdf\", k = 1\n**Output:** 0\n**Explanation:** There are no beautiful substrings in the given string.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 5 * 104`\n* `1 <= k <= 1000`\n* `s` consists of only English lowercase letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulSubstrings(self, s: str, k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.759970502669769}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.8504323581032782}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.0333379493462798}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.816480798707658}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.985188275449065}, {"name": "Codestral-22B-v0.1", "score": -4.788134824027081}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.5752217765229}, {"name": "deepseek-coder-33b-instruct", "score": -6.400722453454843}], "rank": [4, 3, 1, 0, 2, 5, 7, 6]}
{"id": "LeetCode/43", "prompt": "# Find Words Containing Character\n\nYou are given a **0-indexed** array of strings `words` and a character `x`.\n\n\nReturn *an **array of indices** representing the words that contain the character* `x`.\n\n\n**Note** that the returned array may be in **any** order.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"leet\",\"code\"], x = \"e\"\n**Output:** [0,1]\n**Explanation:** \"e\" occurs in both words: \"l**ee**t\", and \"cod**e**\". Hence, we return indices 0 and 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"a\"\n**Output:** [0,2]\n**Explanation:** \"a\" occurs in \"**a**bc\", and \"**aaaa**\". Hence, we return indices 0 and 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"abc\",\"bcd\",\"aaaa\",\"cbc\"], x = \"z\"\n**Output:** []\n**Explanation:** \"z\" does not occur in any of the words. Hence, we return an empty array.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 50`\n* `1 <= words[i].length <= 50`\n* `x` is a lowercase English letter.\n* `words[i]` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findWordsContaining(self, words: List[str], x: str) -> List[int]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.1116702902368045}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.3479186342955662}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.7653342414185174}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.5631697542492224}, {"name": "Codestral-22B-v0.1", "score": 1.25740334805187}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.252943220691117}, {"name": "deepseek-coder-33b-instruct", "score": 1.0048142059260874}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}], "rank": [0, 1, 2, 4, 5, 3, 6, 7]}
{"id": "LeetCode/44", "prompt": "# Minimum Number of Coins for Fruits\n\nYou are at a fruit market with different types of exotic fruits on display.\n\n\nYou are given a **1-indexed** array `prices`, where `prices[i]` denotes the number of coins needed to purchase the `ith` fruit.\n\n\nThe fruit market has the following offer:\n\n\n* If you purchase the `ith` fruit at `prices[i]` coins, you can get the next `i` fruits for free.\n\n\n**Note** that even if you **can** take fruit `j` for free, you can still purchase it for `prices[j]` coins to receive a new offer.\n\n\nReturn *the **minimum** number of coins needed to acquire all the fruits*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [3,1,2]\n**Output:** 4\n**Explanation:** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 3 coins, you are allowed to take the 2nd fruit for free.\n- Purchase the 2nd fruit with 1 coin, you are allowed to take the 3rd fruit for free.\n- Take the 3rd fruit for free.\nNote that even though you were allowed to take the 2nd fruit for free, you purchased it because it is more optimal.\nIt can be proven that 4 is the minimum number of coins needed to acquire all the fruits.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [1,10,1,1]\n**Output:** 2\n**Explanation:** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 1 coin, you are allowed to take the 2nd fruit for free.\n- Take the 2nd fruit for free.\n- Purchase the 3rd fruit for 1 coin, you are allowed to take the 4th fruit for free.\n- Take the 4th fruit for free.\nIt can be proven that 2 is the minimum number of coins needed to acquire all the fruits.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 1000`\n* `1 <= prices[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCoins(self, prices: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.853376425995339}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.157256761615088}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.4836802884003815}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.334630009206355}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.514168539457793}, {"name": "deepseek-coder-33b-instruct", "score": -5.741309446546922}, {"name": "Codestral-22B-v0.1", "score": -5.761642494165173}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.101537939694312}], "rank": [0, 1, 3, 2, 7, 6, 5, 4]}
{"id": "LeetCode/45", "prompt": "# Find Maximum Non-decreasing Array Length\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nYou can perform any number of operations, where each operation involves selecting a **subarray** of the array and replacing it with the **sum** of its elements. For example, if the given array is `[1,3,5,6]` and you select subarray `[3,5]` the array will convert to `[1,8,6]`.\n\n\nReturn *the* ***maximum*** *length of a* ***non-decreasing*** *array that can be made after applying operations.*\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,2,2]\n**Output:** 1\n**Explanation:** This array with length 3 is not non-decreasing.\nWe have two ways to make the array length two.\nFirst, choosing subarray [2,2] converts the array to [5,4].\nSecond, choosing subarray [5,2] converts the array to [7,2].\nIn these two ways the array is not non-decreasing.\nAnd if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \nSo the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 4\n**Explanation:** The array is non-decreasing. So the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,6]\n**Output:** 3\n**Explanation:** Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\nBecause the given array is not non-decreasing, the maximum possible answer is 3.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMaximumLength(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.063610402852239}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.155941260438751}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.768920357196611}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.88943182154283}, {"name": "Codestral-22B-v0.1", "score": -6.027265959571365}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.0842989374004}, {"name": "deepseek-coder-33b-instruct", "score": -6.115547695312845}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.981042914751956}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/46", "prompt": "# Make Three Strings Equal\n\nYou are given three strings `s1`, `s2`, and `s3`. You have to perform the following operation on these three strings **as many times** as you want.\n\n\nIn one operation you can choose one of these three strings such that its length is at least `2` and delete the **rightmost** character of it.\n\n\nReturn *the **minimum** number of operations you need to perform to make the three strings equal if there is a way to make them equal, otherwise, return* `-1`*.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"\n**Output:** 2\n**Explanation:** Performing operations on s1 and s2 once will lead to three equal strings.\nIt can be shown that there is no way to make them equal with less than two operations.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"\n**Output:** -1\n**Explanation:** Because the leftmost letters of s1 and s2 are not equal, they could not be equal after any number of operations. So the answer is -1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s1.length, s2.length, s3.length <= 100`\n* `s1`, `s2` and `s3` consist only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMinimumOperations(self, s1: str, s2: str, s3: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.7171382301952454}, {"name": "Codestral-22B-v0.1", "score": -0.18452734821786532}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.1651670928443356}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.270104267273586}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.409933587926889}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.553145614128739}, {"name": "CodeLlama-7b-Instruct-hf", "score": -6.28898803359062}, {"name": "deepseek-coder-33b-instruct", "score": -6.933563366759644}], "rank": [7, 5, 1, 4, 0, 3, 2, 6]}
{"id": "LeetCode/47", "prompt": "# Separate Black and White Balls\n\nThere are `n` balls on a table, each ball has a color black or white.\n\n\nYou are given a **0-indexed** binary string `s` of length `n`, where `1` and `0` represent black and white balls, respectively.\n\n\nIn each step, you can choose two adjacent balls and swap them.\n\n\nReturn *the **minimum** number of steps to group all the black balls to the right and all the white balls to the left*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"101\"\n**Output:** 1\n**Explanation:** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"011\".\nInitially, 1s are not grouped together, requiring at least 1 step to group them to the right.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"100\"\n**Output:** 2\n**Explanation:** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"010\".\n- Swap s[1] and s[2], s = \"001\".\nIt can be proven that the minimum number of steps needed is 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"0111\"\n**Output:** 0\n**Explanation:** All the black balls are already grouped to the right.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == s.length <= 105`\n* `s[i]` is either `'0'` or `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumSteps(self, s: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.09135860670046902}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.408140855086268}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.811539466849824}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.133757564578936}, {"name": "Codestral-22B-v0.1", "score": -4.4544783671763835}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.754141763100492}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3936093643688885}, {"name": "deepseek-coder-33b-instruct", "score": -6.156970510973375}], "rank": [7, 4, 0, 1, 5, 3, 2, 6]}
{"id": "LeetCode/48", "prompt": "# Maximum Xor Product\n\nGiven three integers `a`, `b`, and `n`, return *the **maximum value** of* `(a XOR x) * (b XOR x)` *where* `0 <= x < 2n`.\n\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n\n**Note** that `XOR` is the bitwise XOR operation.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** a = 12, b = 5, n = 4\n**Output:** 98\n**Explanation:** For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. \nIt can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** a = 6, b = 7 , n = 5\n**Output:** 930\n**Explanation:** For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.\nIt can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** a = 1, b = 6, n = 3\n**Output:** 12\n**Explanation:** For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.\nIt can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `0 <= a, b < 250`\n* `0 <= n <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumXorProduct(self, a: int, b: int, n: int) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.199340691303796}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7358461485857797}, {"name": "deepseek-coder-33b-instruct", "score": -3.5132955263402543}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9144201300278674}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.177277892867282}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.393114931659302}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.365340298978528}, {"name": "Codestral-22B-v0.1", "score": -6.353273787957807}], "rank": [3, 4, 6, 0, 7, 1, 2, 5]}
{"id": "LeetCode/49", "prompt": "# Find Building Where Alice and Bob Can Meet\n\nYou are given a **0-indexed** array `heights` of positive integers, where `heights[i]` represents the height of the `ith` building.\n\n\nIf a person is in building `i`, they can move to any other building `j` if and only if `i < j` and `heights[i] < heights[j]`.\n\n\nYou are also given another array `queries` where `queries[i] = [ai, bi]`. On the `ith` query, Alice is in building `ai` while Bob is in building `bi`.\n\n\nReturn *an array* `ans` *where* `ans[i]` *is **the index of the leftmost building** where Alice and Bob can meet on the* `ith` *query*. *If Alice and Bob cannot move to a common building on query* `i`, *set* `ans[i]` *to* `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]\n**Output:** [2,5,-1,5,2]\n**Explanation:** In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]\n**Output:** [7,6,-1,4,6]\n**Explanation:** In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\nIn the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= heights.length <= 5 * 104`\n* `1 <= heights[i] <= 109`\n* `1 <= queries.length <= 5 * 104`\n* `queries[i] = [ai, bi]`\n* `0 <= ai, bi <= heights.length - 1`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.0258515657768}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.333203969976314}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.407694381422459}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.547269005639754}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.277064453355438}, {"name": "deepseek-coder-33b-instruct", "score": -6.31012916507923}, {"name": "Codestral-22B-v0.1", "score": -6.663605125885249}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.075714184940255}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "LeetCode/50", "prompt": "# Maximum Strong Pair XOR I\n\nYou are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n* `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\n**Note** that you can pick the same integer twice to form a pair.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 7\n**Explanation:** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,100]\n**Output:** 0\n**Explanation:** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,6,25,30]\n**Output:** 7\n**Explanation:** There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\nThe maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.1424272252542007}, {"name": "Codestral-22B-v0.1", "score": 1.088347690056227}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.14163671453578353}, {"name": "deepseek-coder-33b-instruct", "score": -3.5177696715980313}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.0573347365882}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2675132478851205}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.487564883412724}], "rank": [3, 5, 4, 7, 6, 0, 1, 2]}
{"id": "LeetCode/51", "prompt": "# High-Access Employees\n\nYou are given a 2D **0-indexed** array of strings, `access_times`, with size `n`. For each `i` where `0 <= i <= n - 1`, `access_times[i][0]` represents the name of an employee, and `access_times[i][1]` represents the access time of that employee. All entries in `access_times` are within the same day.\n\n\nThe access time is represented as **four digits** using a **24-hour** time format, for example, `\"0800\"` or `\"2250\"`.\n\n\nAn employee is said to be **high-access** if he has accessed the system **three or more** times within a **one-hour period**.\n\n\nTimes with exactly one hour of difference are **not** considered part of the same one-hour period. For example, `\"0815\"` and `\"0915\"` are not part of the same one-hour period.\n\n\nAccess times at the start and end of the day are **not** counted within the same one-hour period. For example, `\"0005\"` and `\"2350\"` are not part of the same one-hour period.\n\n\nReturn *a list that contains the names of **high-access** employees with any order you want.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]\n**Output:** [\"a\"]\n**Explanation:** \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.\nBut \"b\" does not have more than two access times at all.\nSo the answer is [\"a\"].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]]\n**Output:** [\"c\",\"d\"]\n**Explanation:** \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.\n\"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.\nHowever, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"].\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]]\n**Output:** [\"ab\",\"cd\"]\n**Explanation:** \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.\n\"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.\nSo the answer is [\"ab\",\"cd\"].\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= access_times.length <= 100`\n* `access_times[i].length == 2`\n* `1 <= access_times[i][0].length <= 10`\n* `access_times[i][0]` consists only of English small letters.\n* `access_times[i][1].length == 4`\n* `access_times[i][1]` is in 24-hour time format.\n* `access_times[i][1]` consists only of `'0'` to `'9'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findHighAccessEmployees(self, access_times: List[List[str]]) -> List[str]:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": -3.491708094192348}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.092075322778057}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.174633393450904}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.2355053541361665}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.468694578705479}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.255734686549104}, {"name": "deepseek-coder-33b-instruct", "score": -6.260834980188459}, {"name": "Codestral-22B-v0.1", "score": -6.405476361184612}], "rank": [3, 1, 0, 2, 7, 4, 6, 5]}
{"id": "LeetCode/52", "prompt": "# Minimum Operations to Maximize Last Elements in Arrays\n\nYou are given two **0-indexed** integer arrays, `nums1` and `nums2`, both having length `n`.\n\n\nYou are allowed to perform a series of **operations** (**possibly none**).\n\n\nIn an operation, you select an index `i` in the range `[0, n - 1]` and **swap** the values of `nums1[i]` and `nums2[i]`.\n\n\nYour task is to find the **minimum** number of operations required to satisfy the following conditions:\n\n\n* `nums1[n - 1]` is equal to the **maximum value** among all elements of `nums1`, i.e., `nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1])`.\n* `nums2[n - 1]` is equal to the **maximum** **value** among all elements of `nums2`, i.e., `nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1])`.\n\n\nReturn *an integer denoting the **minimum** number of operations needed to meet **both** conditions*, *or* `-1` *if it is **impossible** to satisfy both conditions.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,7], nums2 = [4,5,3]\n**Output:** 1\n**Explanation:** In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\n**Output:** 2\n**Explanation:** In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2.   \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,5,4], nums2 = [2,5,3]\n**Output:** -1\n**Explanation:** In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == nums1.length == nums2.length <= 1000`\n* `1 <= nums1[i] <= 109`\n* `1 <= nums2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.709424725143996}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.154184562578117}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.283476210944604}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.976788913312426}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.359431280406301}, {"name": "Codestral-22B-v0.1", "score": -6.418267051863503}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.457535453326004}, {"name": "deepseek-coder-33b-instruct", "score": -6.53993849462456}], "rank": [7, 0, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/53", "prompt": "# Maximum Strong Pair XOR II\n\nYou are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n* `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\n**Note** that you can pick the same integer twice to form a pair.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 7\n**Explanation:** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,100]\n**Output:** 0\n**Explanation:** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [500,520,2500,3000]\n**Output:** 1020\n**Explanation:** There are 6 strong pairs in the array nums: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and (3000, 3000).\nThe maximum XOR possible from these pairs is 500 XOR 520 = 1020 since the only other non-zero XOR value is 2500 XOR 3000 = 636.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `1 <= nums[i] <= 220 - 1`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.323540458170034}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.5973278408875187}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.911553460714673}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.154184562578117}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.446362010178776}, {"name": "Codestral-22B-v0.1", "score": -6.472856210839315}, {"name": "deepseek-coder-33b-instruct", "score": -6.520827291872384}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.025474312590433}], "rank": [3, 4, 2, 0, 1, 5, 6, 7]}
{"id": "LeetCode/54", "prompt": "# Distribute Candies Among Children I\n\nYou are given two positive integers `n` and `limit`.\n\n\nReturn *the **total number** of ways to distribute* `n` *candies among* `3` *children such that no child gets more than* `limit` *candies.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, limit = 2\n**Output:** 3\n**Explanation:** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, limit = 3\n**Output:** 10\n**Explanation:** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 50`\n* `1 <= limit <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distributeCandies(self, n: int, limit: int) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.8339701560091921}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.21076583682918226}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.21473161189655}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.407889294199609}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.875502620104759}, {"name": "deepseek-coder-33b-instruct", "score": -4.887383664533159}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.504794806553062}], "rank": [5, 4, 7, 0, 1, 3, 6, 2]}
{"id": "LeetCode/55", "prompt": "# Distribute Candies Among Children II\n\nYou are given two positive integers `n` and `limit`.\n\n\nReturn *the **total number** of ways to distribute* `n` *candies among* `3` *children such that no child gets more than* `limit` *candies.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, limit = 2\n**Output:** 3\n**Explanation:** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, limit = 3\n**Output:** 10\n**Explanation:** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 106`\n* `1 <= limit <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distributeCandies(self, n: int, limit: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.1920573777840362}, {"name": "Codestral-22B-v0.1", "score": -0.4657241446930307}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.1140734339473584}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.191713227950374}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.2295745114822045}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.437461341561982}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.674394857761609}, {"name": "deepseek-coder-33b-instruct", "score": -5.907865523231668}], "rank": [7, 5, 4, 0, 3, 1, 2, 6]}
{"id": "LeetCode/56", "prompt": "# Number of Strings Which Can Be Rearranged to Contain Substring\n\nYou are given an integer `n`.\n\n\nA string `s` is called **good** if it contains only lowercase English characters **and** it is possible to rearrange the characters of `s` such that the new string contains `\"leet\"` as a **substring**.\n\n\nFor example:\n\n\n* The string `\"lteer\"` is good because we can rearrange it to form `\"leetr\"` .\n* `\"letl\"` is not good because we cannot rearrange it to contain `\"leet\"` as a substring.\n\n\nReturn *the **total** number of good strings of length* `n`.\n\n\nSince the answer may be large, return it **modulo** `109 + 7`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n \n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 4\n**Output:** 12\n**Explanation:** The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 83943898\n**Explanation:** The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def stringCount(self, n: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.291171516329795}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.342713917288341}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.6700586458899505}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4805889220919495}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.725679814565266}, {"name": "Codestral-22B-v0.1", "score": -6.203688698172915}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.492167105102987}, {"name": "deepseek-coder-33b-instruct", "score": -6.5668749409420455}], "rank": [0, 1, 3, 2, 7, 5, 4, 6]}
{"id": "LeetCode/57", "prompt": "# Maximum Spending After Buying Items\n\nYou are given a **0-indexed** `m * n` integer matrix `values`, representing the values of `m * n` different items in `m` different shops. Each shop has `n` items where the `jth` item in the `ith` shop has a value of `values[i][j]`. Additionally, the items in the `ith` shop are sorted in non-increasing order of value. That is, `values[i][j] >= values[i][j + 1]` for all `0 <= j < n - 1`.\n\n\nOn each day, you would like to buy a single item from one of the shops. Specifically, On the `dth` day you can:\n\n\n* Pick any shop `i`.\n* Buy the rightmost available item `j` for the price of `values[i][j] * d`. That is, find the greatest index `j` such that item `j` was never bought before, and buy it for the price of `values[i][j] * d`.\n\n\n**Note** that all items are pairwise different. For example, if you have bought item `0` from shop `1`, you can still buy item `0` from any other shop.\n\n\nReturn *the **maximum amount of money that can be spent** on buying all*  `m * n` *products*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** values = [[8,5,2],[6,4,1],[9,7,3]]\n**Output:** 285\n**Explanation:** On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\nOn the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\nOn the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\nOn the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\nOn the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\nOn the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\nOn the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\nOn the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\nHence, our total spending is equal to 285.\nIt can be shown that 285 is the maximum amount of money that can be spent buying all m * n products. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** values = [[10,8,6,4,2],[9,7,5,3,2]]\n**Output:** 386\n**Explanation:** On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\nOn the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\nOn the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\nOn the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\nOn the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\nOn the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\nOn the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\nOn the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\nOn the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\nHence, our total spending is equal to 386.\nIt can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= m == values.length <= 10`\n* `1 <= n == values[i].length <= 104`\n* `1 <= values[i][j] <= 106`\n* `values[i]` are sorted in non-increasing order.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSpending(self, values: List[List[int]]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.21897232667453448}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.896381309438189}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.049556379431967}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.659203722480515}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.53541115918897}, {"name": "deepseek-coder-33b-instruct", "score": -6.2428689713391305}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.296357656290117}, {"name": "Codestral-22B-v0.1", "score": -6.307241972841284}], "rank": [7, 0, 1, 3, 2, 6, 4, 5]}
{"id": "LeetCode/58", "prompt": "# Find Champion I\n\nThere are `n` teams numbered from `0` to `n - 1` in a tournament.\n\n\nGiven a **0-indexed** 2D boolean matrix `grid` of size `n * n`. For all `i, j` that `0 <= i, j <= n - 1` and `i != j` team `i` is **stronger** than team `j` if `grid[i][j] == 1`, otherwise, team `j` is **stronger** than team `i`.\n\n\nTeam `a` will be the **champion** of the tournament if there is no team `b` that is stronger than team `a`.\n\n\nReturn *the team that will be the champion of the tournament.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[0,1],[0,0]]\n**Output:** 0\n**Explanation:** There are two teams in this tournament.\ngrid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0,0,1],[1,0,1],[0,0,0]]\n**Output:** 1\n**Explanation:** There are three teams in this tournament.\ngrid[1][0] == 1 means that team 1 is stronger than team 0.\ngrid[1][2] == 1 means that team 1 is stronger than team 2.\nSo team 1 will be the champion.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == grid.length`\n* `n == grid[i].length`\n* `2 <= n <= 100`\n* `grid[i][j]` is either `0` or `1`.\n* For all `i grid[i][i]` is `0.`\n* For all `i, j` that `i != j`, `grid[i][j] != grid[j][i]`.\n* The input is generated such that if team `a` is stronger than team `b` and team `b` is stronger than team `c`, then team `a` is stronger than team `c`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findChampion(self, grid: List[List[int]]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.7286663198682923}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6384720061386044}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0018399269220079617}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.054871662640584074}, {"name": "Codestral-22B-v0.1", "score": -0.2044856479361883}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.2115637504158059}, {"name": "deepseek-coder-33b-instruct", "score": -2.223374436751423}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.20830512783701}], "rank": [3, 4, 7, 0, 5, 1, 6, 2]}
{"id": "LeetCode/59", "prompt": "# Maximum Balanced Subsequence Sum\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nA **subsequence** of `nums` having length `k` and consisting of **indices** `i0 < i1 < ... < ik-1` is **balanced** if the following holds:\n\n\n* `nums[ij] - nums[ij-1] >= ij - ij-1`, for every `j` in the range `[1, k - 1]`.\n\n\nA **subsequence** of `nums` having length `1` is considered balanced.\n\n\nReturn *an integer denoting the **maximum** possible **sum of elements** in a **balanced** subsequence of* `nums`.\n\n\nA **subsequence** of an array is a new **non-empty** array that is formed from the original array by deleting some (**possibly none**) of the elements without disturbing the relative positions of the remaining elements.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,3,5,6]\n**Output:** 14\n**Explanation:** In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.\nnums[2] - nums[0] >= 2 - 0.\nnums[3] - nums[2] >= 3 - 2.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nThe subsequence consisting of indices 1, 2, and 3 is also valid.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,-1,-3,8]\n**Output:** 13\n**Explanation:** In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.\nnums[3] - nums[0] >= 3 - 0.\nHence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\nIt can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-2,-1]\n**Output:** -1\n**Explanation:** In this example, the subsequence [-1] can be selected.\nIt is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-109 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": -1.917602686693149}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5723117332909737}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.875690916180743}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1655483212284325}, {"name": "deepseek-coder-33b-instruct", "score": -4.8192027360922065}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.333761727481232}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.334630009206355}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.65131476299967}], "rank": [5, 4, 0, 1, 6, 3, 2, 7]}
{"id": "LeetCode/60", "prompt": "# Find the K-or of an Array\n\nYou are given a **0-indexed** integer array `nums`, and an integer `k`.\n\n\nThe **K-or** of `nums` is a non-negative integer that satisfies the following:\n\n\n* The `ith` bit is set in the K-or **if and only if** there are at least `k` elements of nums in which bit `i` is set.\n\n\nReturn *the  **K-or** of* `nums`.\n\n\n**Note** that a bit `i` is set in `x` if `(2i AND x) == 2i`, where `AND` is the bitwise `AND` operator.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [7,12,9,8,9,15], k = 4\n**Output:** 9\n**Explanation:** Bit 0 is set at nums[0], nums[2], nums[4], and nums[5].\nBit 1 is set at nums[0], and nums[5].\nBit 2 is set at nums[0], nums[1], and nums[5].\nBit 3 is set at nums[1], nums[2], nums[3], nums[4], and nums[5].\nOnly bits 0 and 3 are set in at least k elements of the array, and bits i >= 4 are not set in any of the array's elements. Hence, the answer is 2^0 + 2^3 = 9.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,12,1,11,4,5], k = 6\n**Output:** 0\n**Explanation:** Since k == 6 == nums.length, the 6-or of the array is equal to the bitwise AND of all its elements. Hence, the answer is 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [10,8,5,9,11,6,8], k = 1\n**Output:** 15\n**Explanation:** Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `0 <= nums[i] < 231`\n* `1 <= k <= nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.782697553919314}, {"name": "deepseek-coder-33b-instruct", "score": 0.7094326841312073}, {"name": "Codestral-22B-v0.1", "score": 0.6703470164765486}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.08820352007707566}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.9341048654312614}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.0457934048435824}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.151092646791511}], "rank": [1, 6, 5, 4, 7, 0, 3, 2]}
{"id": "LeetCode/61", "prompt": "# Minimum Equal Sum of Two Arrays After Replacing Zeros\n\nYou are given two arrays `nums1` and `nums2` consisting of positive integers.\n\n\nYou have to replace **all** the `0`'s in both arrays with **strictly** positive integers such that the sum of elements of both arrays becomes **equal**.\n\n\nReturn *the **minimum** equal sum you can obtain, or* `-1` *if it is impossible*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [3,2,0,1,0], nums2 = [6,5,0]\n**Output:** 12\n**Explanation:** We can replace 0's in the following way:\n- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].\n- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].\nBoth arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,0,2,0], nums2 = [1,4]\n**Output:** -1\n**Explanation:** It is impossible to make the sum of both arrays equal.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 105`\n* `0 <= nums1[i], nums2[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.968781339246755}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.05524360019974}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.198043698553261}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.943469324236398}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.662793799578846}, {"name": "Codestral-22B-v0.1", "score": -5.938670126594164}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.344793900795618}, {"name": "deepseek-coder-33b-instruct", "score": -6.594829241973419}], "rank": [0, 7, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/62", "prompt": "# Minimum Increment Operations to Make Array Beautiful\n\nYou are given a **0-indexed** integer array `nums` having length `n`, and an integer `k`.\n\n\nYou can perform the following **increment** operation **any** number of times (**including zero**):\n\n\n* Choose an index `i` in the range `[0, n - 1]`, and increase `nums[i]` by `1`.\n\n\nAn array is considered **beautiful** if, for any **subarray** with a size of `3` or **more**, its **maximum** element is **greater than or equal** to `k`.\n\n\nReturn *an integer denoting the **minimum** number of increment operations needed to make* `nums` ***beautiful**.*\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,0,0,2], k = 4\n**Output:** 3\n**Explanation:** We can perform the following increment operations to make nums beautiful:\nChoose index i = 1 and increase nums[1] by 1 -> [2,4,0,0,2].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,3].\nChoose index i = 4 and increase nums[4] by 1 -> [2,4,0,0,4].\nThe subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].\nIn all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 3 increment operations.\nHence, the answer is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,1,3,3], k = 5\n**Output:** 2\n**Explanation:** We can perform the following increment operations to make nums beautiful:\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,4,3].\nChoose index i = 2 and increase nums[2] by 1 -> [0,1,5,3].\nThe subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].\nIn all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.\nIt can be shown that nums cannot be made beautiful with fewer than 2 increment operations.\nHence, the answer is 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,2], k = 1\n**Output:** 0\n**Explanation:** The only subarray with a size of 3 or more in this example is [1,1,2].\nThe maximum element, 2, is already greater than k = 1, so we don't need any increment operation.\nHence, the answer is 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= n == nums.length <= 105`\n* `0 <= nums[i] <= 109`\n* `0 <= k <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.7978235411031154}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.15272502731713}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2151452623678045}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.535948716946138}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.417006658097136}, {"name": "Codestral-22B-v0.1", "score": -6.077321090867665}, {"name": "deepseek-coder-33b-instruct", "score": -6.167591959738609}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.208477343691867}], "rank": [0, 7, 1, 3, 2, 5, 6, 4]}
{"id": "LeetCode/63", "prompt": "# Subarrays Distinct Element Sum of Squares I\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nThe **distinct count** of a subarray of `nums` is defined as:\n\n\n* Let `nums[i..j]` be a subarray of `nums` consisting of all the indices from `i` to `j` such that `0 <= i <= j < nums.length`. Then the number of distinct values in `nums[i..j]` is called the distinct count of `nums[i..j]`.\n\n\nReturn *the sum of the **squares** of **distinct counts** of all subarrays of* `nums`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1]\n**Output:** 15\n**Explanation:** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1]\n**Output:** 3\n**Explanation:** Three possible subarrays are:\n[1]: 1 distinct value\n[1]: 1 distinct value\n[1,1]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.2903861446074165}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6592870736487599}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.2720425116541234}, {"name": "deepseek-coder-33b-instruct", "score": -2.1457786018906546}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.901488174004168}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.0578188808726505}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.1465574336690345}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.668321086378041}], "rank": [5, 4, 7, 6, 1, 0, 3, 2]}
{"id": "LeetCode/64", "prompt": "# Minimum Number of Changes to Make Binary String Beautiful\n\nYou are given a **0-indexed** binary string `s` having an even length.\n\n\nA string is **beautiful** if it's possible to partition it into one or more substrings such that:\n\n\n* Each substring has an **even length**.\n* Each substring contains **only** `1`'s or **only** `0`'s.\n\n\nYou can change any character in `s` to `0` or `1`.\n\n\nReturn *the **minimum** number of changes required to make the string* `s` *beautiful*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"1001\"\n**Output:** 2\n**Explanation:** We change s[1] to 1 and s[3] to 0 to get string \"1100\".\nIt can be seen that the string \"1100\" is beautiful because we can partition it into \"11|00\".\nIt can be proven that 2 is the minimum number of changes needed to make the string beautiful.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"10\"\n**Output:** 1\n**Explanation:** We change s[1] to 1 to get string \"11\".\nIt can be seen that the string \"11\" is beautiful because we can partition it into \"11\".\nIt can be proven that 1 is the minimum number of changes needed to make the string beautiful.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"0000\"\n**Output:** 0\n**Explanation:** We don't need to make any changes as the string \"0000\" is beautiful already.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 105`\n* `s` has an even length.\n* `s[i]` is either `'0'` or `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minChanges(self, s: str) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.11390934660198848}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.7244760284493985}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.5357554676481477}, {"name": "Codestral-22B-v0.1", "score": -4.155802857922698}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.203916198651392}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.425179066137624}, {"name": "deepseek-coder-33b-instruct", "score": -6.3372433430494945}], "rank": [4, 7, 1, 3, 5, 0, 2, 6]}
{"id": "LeetCode/65", "prompt": "# Length of the Longest Subsequence That Sums to Target\n\nYou are given a **0-indexed** array of integers `nums`, and an integer `target`.\n\n\nReturn *the **length of the longest subsequence** of* `nums` *that sums up to* `target`. *If no such subsequence exists, return* `-1`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], target = 9\n**Output:** 3\n**Explanation:** There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,1,3,2,1,5], target = 7\n**Output:** 4\n**Explanation:** There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,5,4,5], target = 3\n**Output:** -1\n**Explanation:** It can be shown that nums has no subsequence that sums up to 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 1000`\n* `1 <= target <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.08038377179689693}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.8189775043663161}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.136346531510822}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.736599102433199}, {"name": "deepseek-coder-33b-instruct", "score": -3.3110723230835317}, {"name": "Codestral-22B-v0.1", "score": -4.840345415480899}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.175200129300951}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.265463541676958}], "rank": [7, 4, 0, 1, 6, 5, 3, 2]}
{"id": "LeetCode/66", "prompt": "# Subarrays Distinct Element Sum of Squares II\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nThe **distinct count** of a subarray of `nums` is defined as:\n\n\n* Let `nums[i..j]` be a subarray of `nums` consisting of all the indices from `i` to `j` such that `0 <= i <= j < nums.length`. Then the number of distinct values in `nums[i..j]` is called the distinct count of `nums[i..j]`.\n\n\nReturn *the sum of the **squares** of **distinct counts** of all subarrays of* `nums`.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1]\n**Output:** 15\n**Explanation:** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,2]\n**Output:** 3\n**Explanation:** Three possible subarrays are:\n[2]: 1 distinct value\n[2]: 1 distinct value\n[2,2]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.6965219582930722}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.4088719311934623}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.1797363550039233}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.052480358123402}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.304119145797356}, {"name": "Codestral-22B-v0.1", "score": -6.0557295933547035}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.829348232884568}, {"name": "deepseek-coder-33b-instruct", "score": -6.834784506125962}], "rank": [4, 2, 3, 0, 1, 5, 7, 6]}
{"id": "LeetCode/67", "prompt": "# Minimum Sum of Mountain Triplets I\n\nYou are given a **0-indexed** array `nums` of integers.\n\n\nA triplet of indices `(i, j, k)` is a **mountain** if:\n\n\n* `i < j < k`\n* `nums[i] < nums[j]` and `nums[k] < nums[j]`\n\n\nReturn *the **minimum possible sum** of a mountain triplet of* `nums`. *If no such triplet exists, return* `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,6,1,5,3]\n**Output:** 9\n**Explanation:** Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,4,8,7,10,2]\n**Output:** 13\n**Explanation:** Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [6,5,4,3,4,5]\n**Output:** -1\n**Explanation:** It can be shown that there are no mountain triplets in nums.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumSum(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.7836981696654712}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.18082125903976198}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.2604286920272738}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.740332735702852}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.013830184992774}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.379768312957017}, {"name": "deepseek-coder-33b-instruct", "score": -6.137018379709722}], "rank": [5, 4, 7, 1, 0, 3, 2, 6]}
{"id": "LeetCode/68", "prompt": "# Minimum Sum of Mountain Triplets II\n\nYou are given a **0-indexed** array `nums` of integers.\n\n\nA triplet of indices `(i, j, k)` is a **mountain** if:\n\n\n* `i < j < k`\n* `nums[i] < nums[j]` and `nums[k] < nums[j]`\n\n\nReturn *the **minimum possible sum** of a mountain triplet of* `nums`. *If no such triplet exists, return* `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,6,1,5,3]\n**Output:** 9\n**Explanation:** Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,4,8,7,10,2]\n**Output:** 13\n**Explanation:** Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [6,5,4,3,4,5]\n**Output:** -1\n**Explanation:** It can be shown that there are no mountain triplets in nums.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 105`\n* `1 <= nums[i] <= 108`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumSum(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.7127656690285686}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.06943630778436116}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.6506758787133835}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8745288010005656}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.405498990859024}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.403109720832753}, {"name": "deepseek-coder-33b-instruct", "score": -6.285081473422766}], "rank": [5, 4, 7, 3, 0, 1, 2, 6]}
{"id": "LeetCode/69", "prompt": "# Minimum Number of Groups to Create a Valid Assignment\n\nYou are given a **0-indexed** integer array `nums` of length `n`.\n\n\nWe want to group the indices so for each index `i` in the range `[0, n - 1]`, it is assigned to **exactly one** group.\n\n\nA groupassignment is **valid** if the following conditions hold:\n\n\n* For every group `g`, all indices `i` assigned to group `g` have the same value in `nums`.\n* For any two groups `g1` and `g2`, the **difference** between the **number of indices** assigned to `g1` and `g2` should **not exceed** `1`.\n\n\nReturn *an integer denoting* *the **minimum** number of groups needed to create a valid group assignment.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,3,2,3]\n**Output:** 2\n**Explanation:** One way the indices can be assigned to 2 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0,2,4]\ngroup 2 -> [1,3]\nAll indices are assigned to one group.\nIn group 1, nums[0] == nums[2] == nums[4], so all indices have the same value.\nIn group 2, nums[1] == nums[3], so all indices have the same value.\nThe number of indices assigned to group 1 is 3, and the number of indices assigned to group 2 is 2.\nTheir difference doesn't exceed 1.\nIt is not possible to use fewer than 2 groups because, in order to use just 1 group, all indices assigned to that group must have the same value.\nHence, the answer is 2.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,10,10,3,1,1]\n**Output:** 4\n**Explanation:** One way the indices can be assigned to 4 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0]\ngroup 2 -> [1,2]\ngroup 3 -> [3]\ngroup 4 -> [4,5]\nThe group assignment above satisfies both conditions.\nIt can be shown that it is not possible to create a valid assignment using fewer than 4 groups.\nHence, the answer is 4.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minGroupsForValidAssignment(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.822623324163532}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.964008060494097}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.348056115102728}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.487217238702113}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.566067922180985}, {"name": "Codestral-22B-v0.1", "score": -6.03502678373311}, {"name": "deepseek-coder-33b-instruct", "score": -6.163356908411397}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.387121714225061}], "rank": [0, 1, 3, 2, 7, 5, 6, 4]}
{"id": "LeetCode/70", "prompt": "# Minimum Changes to Make K Semi-palindromes\n\nGiven a string `s` and an integer `k`, partition `s` into `k` **substrings** such that the sum of the number of letter changes required to turn each **substring** into a **semi-palindrome** is minimized.\n\n\nReturn *an integer denoting the **minimum** number of letter changes required.*\n\n\n**Notes**\n\n\n* A string is a **palindrome** if it can be read the same way from left to right and right to left.\n* A string with a length of `len` is considered a **semi-palindrome** if there exists a positive integer `d` such that `1 <= d < len` and `len % d == 0`, and if we take indices that have the same modulo by `d`, they form a **palindrome**. For example, `\"aa\"`, `\"aba\"`, `\"adbgad\"`, and, `\"abab\"` are **semi-palindrome** and `\"a\"`, `\"ab\"`, and, `\"abca\"` are not.\n* A **substring** is a contiguous sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcac\", k = 2\n**Output:** 1\n**Explanation:** We can divide s into substrings \"ab\" and \"cac\". The string \"cac\" is already a semi-palindrome. If we change \"ab\" to \"aa\", it becomes a semi-palindrome with d = 1.\nIt can be shown that there is no way to divide the string \"abcac\" into two semi-palindrome substrings. Therefore, the answer would be at least 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcdef\", k = 2\n**Output:** 2\n**Explanation:** We can divide it into substrings \"abc\" and \"def\". Each of the substrings \"abc\" and \"def\" requires one change to become a semi-palindrome, so we need 2 changes in total to make all substrings semi-palindrome.\nIt can be shown that we cannot divide the given string into two substrings in a way that it would require less than 2 changes.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"aabbaa\", k = 3\n**Output:** 0\n**Explanation:** We can divide it into substrings \"aa\", \"bb\" and \"aa\".\nThe strings \"aa\" and \"bb\" are already semi-palindromes. Thus, the answer is zero.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 200`\n* `1 <= k <= s.length / 2`\n* `s` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.027848570933736}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.522788077382124}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.202511063695022}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.68531165764116}, {"name": "CodeLlama-7b-Instruct-hf", "score": -6.0742695898646915}, {"name": "deepseek-coder-33b-instruct", "score": -6.438090792221087}, {"name": "Codestral-22B-v0.1", "score": -6.520149735174739}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.577048788454901}], "rank": [0, 1, 3, 7, 2, 6, 5, 4]}
{"id": "LeetCode/71", "prompt": "# Find Indices With Index and Value Difference I\n\nYou are given a **0-indexed** integer array `nums` having length `n`, an integer `indexDifference`, and an integer `valueDifference`.\n\n\nYour task is to find **two** indices `i` and `j`, both in the range `[0, n - 1]`, that satisfy the following conditions:\n\n\n* `abs(i - j) >= indexDifference`, and\n* `abs(nums[i] - nums[j]) >= valueDifference`\n\n\nReturn *an integer array* `answer`, *where* `answer = [i, j]` *if there are two such indices*, *and* `answer = [-1, -1]` *otherwise*. If there are multiple choices for the two indices, return *any of them*.\n\n\n**Note:** `i` and `j` may be **equal**.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\n**Output:** [0,3]\n**Explanation:** In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,1], indexDifference = 0, valueDifference = 0\n**Output:** [0,0]\n**Explanation:** In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], indexDifference = 2, valueDifference = 4\n**Output:** [-1,-1]\n**Explanation:** In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 100`\n* `0 <= nums[i] <= 50`\n* `0 <= indexDifference <= 100`\n* `0 <= valueDifference <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findIndices(self, nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.584170478476973}, {"name": "Codestral-22B-v0.1", "score": 1.3059778697802304}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.6195371660218356}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.527899239392764}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7652847853163416}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.138680376042152}, {"name": "deepseek-coder-33b-instruct", "score": -6.343465585346822}], "rank": [4, 5, 7, 3, 2, 0, 1, 6]}
{"id": "LeetCode/72", "prompt": "# Shortest and Lexicographically Smallest Beautiful String\n\nYou are given a binary string `s` and a positive integer `k`.\n\n\nA substring of `s` is **beautiful** if the number of `1`'s in it is exactly `k`.\n\n\nLet `len` be the length of the **shortest** beautiful substring.\n\n\nReturn *the lexicographically **smallest** beautiful substring of string* `s` *with length equal to* `len`. If `s` doesn't contain a beautiful substring, return *an **empty** string*.\n\n\nA string `a` is lexicographically **larger** than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`.\n\n\n* For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"100011001\", k = 3\n**Output:** \"11001\"\n**Explanation:** There are 7 beautiful substrings in this example:\n1. The substring \"100011001\".\n2. The substring \"100011001\".\n3. The substring \"100011001\".\n4. The substring \"100011001\".\n5. The substring \"100011001\".\n6. The substring \"100011001\".\n7. The substring \"100011001\".\nThe length of the shortest beautiful substring is 5.\nThe lexicographically smallest beautiful substring with length 5 is the substring \"11001\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"1011\", k = 2\n**Output:** \"11\"\n**Explanation:** There are 3 beautiful substrings in this example:\n1. The substring \"1011\".\n2. The substring \"1011\".\n3. The substring \"1011\".\nThe length of the shortest beautiful substring is 2.\nThe lexicographically smallest beautiful substring with length 2 is the substring \"11\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"000\", k = 1\n**Output:** \"\"\n**Explanation:** There are no beautiful substrings in this example.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `1 <= k <= s.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def shortestBeautifulSubstring(self, s: str, k: int) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.8992214135909373}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.209338526848165}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.011914475594636}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.130442945500968}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.146620435829167}, {"name": "Codestral-22B-v0.1", "score": -6.341293611394459}, {"name": "deepseek-coder-33b-instruct", "score": -6.376155355999669}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.835055545563859}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "LeetCode/73", "prompt": "# Find Indices With Index and Value Difference II\n\nYou are given a **0-indexed** integer array `nums` having length `n`, an integer `indexDifference`, and an integer `valueDifference`.\n\n\nYour task is to find **two** indices `i` and `j`, both in the range `[0, n - 1]`, that satisfy the following conditions:\n\n\n* `abs(i - j) >= indexDifference`, and\n* `abs(nums[i] - nums[j]) >= valueDifference`\n\n\nReturn *an integer array* `answer`, *where* `answer = [i, j]` *if there are two such indices*, *and* `answer = [-1, -1]` *otherwise*. If there are multiple choices for the two indices, return *any of them*.\n\n\n**Note:** `i` and `j` may be **equal**.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\n**Output:** [0,3]\n**Explanation:** In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,1], indexDifference = 0, valueDifference = 0\n**Output:** [0,0]\n**Explanation:** In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], indexDifference = 2, valueDifference = 4\n**Output:** [-1,-1]\n**Explanation:** In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 105`\n* `0 <= nums[i] <= 109`\n* `0 <= indexDifference <= 105`\n* `0 <= valueDifference <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findIndices(self, nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.9031614404323625}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.5252530382577074}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.875110027404606}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.179359503214497}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.897063379211336}, {"name": "Codestral-22B-v0.1", "score": -6.2727071808058374}, {"name": "deepseek-coder-33b-instruct", "score": -6.4401040805999425}], "rank": [4, 7, 3, 0, 1, 2, 5, 6]}
{"id": "LeetCode/74", "prompt": "# Construct Product Matrix\n\nGiven a **0-indexed** 2D integer matrix `grid` of size `n * m`, we define a **0-indexed** 2D matrix `p` of size `n * m` as the **product** matrix of `grid` if the following condition is met:\n\n\n* Each element `p[i][j]` is calculated as the product of all elements in `grid` except for the element `grid[i][j]`. This product is then taken modulo `12345`.\n\n\nReturn *the product matrix of* `grid`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[1,2],[3,4]]\n**Output:** [[24,12],[8,6]]\n**Explanation:** p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[12345],[2],[1]]\n**Output:** [[2],[0],[0]]\n**Explanation:** p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\nSo the answer is [[2],[0],[0]].\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == grid.length <= 105`\n* `1 <= m == grid[i].length <= 105`\n* `2 <= n * m <= 105`\n* `1 <= grid[i][j] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.8035944316364017}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.848614512235095}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.078791706273749}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.3394322370414615}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.604529981100668}, {"name": "Codestral-22B-v0.1", "score": -5.035202151024367}, {"name": "deepseek-coder-33b-instruct", "score": -6.229055234169078}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.385423715029944}], "rank": [7, 0, 2, 1, 3, 5, 6, 4]}
{"id": "LeetCode/75", "prompt": "# Last Visited Integers\n\nGiven a **0-indexed** array of strings `words` where `words[i]` is either a positive integer represented as a string or the string `\"prev\"`.\n\n\nStart iterating from the beginning of the array; for every `\"prev\"` string seen in `words`, find the **last visited integer** in `words` which is defined as follows:\n\n\n* Let `k` be the number of consecutive `\"prev\"` strings seen so far (containing the current string). Let `nums` be the **0-indexed** array of **integers** seen so far and `nums_reverse` be the reverse of `nums`, then the integer at `(k - 1)th` index of `nums_reverse` will be the **last visited integer** for this `\"prev\"`.\n* If `k` is **greater** than the total visited integers, then the last visited integer will be `-1`.\n\n\nReturn *an integer array containing the last visited integers.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"1\",\"2\",\"prev\",\"prev\",\"prev\"]\n**Output:** [2,1,-1]\n**Explanation:** \nFor \"prev\" at index = 2, last visited integer will be 2 as here the number of consecutive \"prev\" strings is 1, and in the array reverse_nums, 2 will be the first element.\nFor \"prev\" at index = 3, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\nFor \"prev\" at index = 4, last visited integer will be -1 as there are a total of three consecutive \"prev\" strings including this \"prev\" which are visited, but the total number of integers visited is two.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"1\",\"prev\",\"2\",\"prev\",\"prev\"]\n**Output:** [1,2,1]\n**Explanation:**\nFor \"prev\" at index = 1, last visited integer will be 1.\nFor \"prev\" at index = 3, last visited integer will be 2.\nFor \"prev\" at index = 4, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 100`\n* `words[i] == \"prev\"` or `1 <= int(words[i]) <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def lastVisitedIntegers(self, words: List[str]) -> List[int]:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.90341819552307}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.34433679350426516}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8152477529287427}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.094411226666644}, {"name": "deepseek-coder-33b-instruct", "score": -4.526320352502561}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.592084946439436}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.618836376751906}], "rank": [5, 7, 4, 0, 1, 6, 2, 3]}
{"id": "LeetCode/76", "prompt": "# Longest Unequal Adjacent Groups Subsequence I\n\nYou are given an integer `n`, a **0-indexed** string array `words`, and a **0-indexed** **binary** array `groups`, both arrays having length `n`.\n\n\nYou need to select the **longest** **subsequence** from an array of indices `[0, 1, ..., n - 1]`, such that for the subsequence denoted as `[i0, i1, ..., ik - 1]` having length `k`, `groups[ij] != groups[ij + 1]`, for each `j` where `0 < j + 1 < k`.\n\n\nReturn *a string array containing the words corresponding to the indices **(in order)** in the selected subsequence*. If there are multiple answers, return *any of them*.\n\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n\n\n**Note:** strings in `words` may be **unequal** in length.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, words = [\"e\",\"a\",\"b\"], groups = [0,0,1]\n**Output:** [\"e\",\"b\"]\n**Explanation:** A subsequence that can be selected is [0,2] because groups[0] != groups[2].\nSo, a valid answer is [words[0],words[2]] = [\"e\",\"b\"].\nAnother subsequence that can be selected is [1,2] because groups[1] != groups[2].\nThis results in [words[1],words[2]] = [\"a\",\"b\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 2.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]\n**Output:** [\"a\",\"b\",\"c\"]\n**Explanation:** A subsequence that can be selected is [0,1,2] because groups[0] != groups[1] and groups[1] != groups[2].\nSo, a valid answer is [words[0],words[1],words[2]] = [\"a\",\"b\",\"c\"].\nAnother subsequence that can be selected is [0,1,3] because groups[0] != groups[1] and groups[1] != groups[3].\nThis results in [words[0],words[1],words[3]] = [\"a\",\"b\",\"d\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 100`\n* `1 <= words[i].length <= 10`\n* `0 <= groups[i] < 2`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getWordsInLongestSubsequence(self, n: int, words: List[str], groups: List[int]) -> List[str]:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.2162103608151815}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.18788119071935672}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7926070781453562}, {"name": "deepseek-coder-33b-instruct", "score": -2.144173177683026}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.291860293405911}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.814321560857598}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9414264557973877}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.332100825904156}], "rank": [5, 7, 4, 6, 3, 2, 0, 1]}
{"id": "LeetCode/77", "prompt": "# Longest Unequal Adjacent Groups Subsequence II\n\nYou are given an integer `n`, a **0-indexed** string array `words`, and a **0-indexed** array `groups`, both arrays having length `n`.\n\n\nThe **hamming distance** between two strings of equal length is the number of positions at which the corresponding characters are **different**.\n\n\nYou need to select the **longest** **subsequence** from an array of indices `[0, 1, ..., n - 1]`, such that for the subsequence denoted as `[i0, i1, ..., ik - 1]` having length `k`, the following holds:\n\n\n* For **adjacent** indices in the subsequence, their corresponding groups are **unequal**, i.e., `groups[ij] != groups[ij + 1]`, for each `j` where `0 < j + 1 < k`.\n* `words[ij]` and `words[ij + 1]` are **equal** in length, and the **hamming distance** between them is `1`, where `0 < j + 1 < k`, for all indices in the subsequence.\n\n\nReturn *a string array containing the words corresponding to the indices **(in order)** in the selected subsequence*. If there are multiple answers, return *any of them*.\n\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n\n\n**Note:** strings in `words` may be **unequal** in length.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, words = [\"bab\",\"dab\",\"cab\"], groups = [1,2,2]\n**Output:** [\"bab\",\"cab\"]\n**Explanation:** A subsequence that can be selected is [0,2].\n- groups[0] != groups[2]\n- words[0].length == words[2].length, and the hamming distance between them is 1.\nSo, a valid answer is [words[0],words[2]] = [\"bab\",\"cab\"].\nAnother subsequence that can be selected is [0,1].\n- groups[0] != groups[1]\n- words[0].length == words[1].length, and the hamming distance between them is 1.\nSo, another valid answer is [words[0],words[1]] = [\"bab\",\"dab\"].\nIt can be shown that the length of the longest subsequence of indices that satisfies the conditions is 2.  \n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,2,3,4]\n**Output:** [\"a\",\"b\",\"c\",\"d\"]\n**Explanation:** We can select the subsequence [0,1,2,3].\nIt satisfies both conditions.\nHence, the answer is [words[0],words[1],words[2],words[3]] = [\"a\",\"b\",\"c\",\"d\"].\nIt has the longest length among all subsequences of indices that satisfy the conditions.\nHence, it is the only answer.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 1000`\n* `1 <= words[i].length <= 10`\n* `1 <= groups[i] <= n`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getWordsInLongestSubsequence(self, n: int, words: List[str], groups: List[int]) -> List[str]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.407889294199609}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.498786925282581}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.030908398935812}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.964237224853497}, {"name": "Codestral-22B-v0.1", "score": -6.285178391791481}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.379580016881033}, {"name": "deepseek-coder-33b-instruct", "score": -6.528589297207873}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.965227643534402}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/78", "prompt": "# Count of Sub-Multisets With Bounded Sum\n\nYou are given a **0-indexed** array `nums` of non-negative integers, and two integers `l` and `r`.\n\n\nReturn *the **count of sub-multisets** within* `nums` *where the sum of elements in each subset falls within the inclusive range of* `[l, r]`.\n\n\nSince the answer may be large, return it modulo `109 + 7`.\n\n\nA **sub-multiset** is an **unordered** collection of elements of the array in which a given value `x` can occur `0, 1, ..., occ[x]` times, where `occ[x]` is the number of occurrences of `x` in the array.\n\n\n**Note** that:\n\n\n* Two **sub-multisets** are the same if sorting both sub-multisets results in identical multisets.\n* The sum of an **empty** multiset is `0`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,2,3], l = 6, r = 6\n**Output:** 1\n**Explanation:** The only subset of nums that has a sum of 6 is {1, 2, 3}.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,1,4,2,7], l = 1, r = 5\n**Output:** 7\n**Explanation:** The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,3,5,2], l = 3, r = 5\n**Output:** 9\n**Explanation:** The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 104`\n* `0 <= nums[i] <= 2 * 104`\n* Sum of `nums` does not exceed `2 * 104`.\n* `0 <= l <= r <= 2 * 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSubMultisets(self, nums: List[int], l: int, r: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.159882583692755}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.211287237830781}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.3405273274958525}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.824787527525743}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.511943773170404}, {"name": "Codestral-22B-v0.1", "score": -6.4185769852303105}, {"name": "deepseek-coder-33b-instruct", "score": -6.436073442333773}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.479209857829875}], "rank": [0, 7, 1, 3, 2, 5, 6, 4]}
{"id": "LeetCode/79", "prompt": "# Divisible and Non-divisible Sums Difference\n\nYou are given positive integers `n` and `m`.\n\n\nDefine two integers, `num1` and `num2`, as follows:\n\n\n* `num1`: The sum of all integers in the range `[1, n]` that are **not divisible** by `m`.\n* `num2`: The sum of all integers in the range `[1, n]` that are **divisible** by `m`.\n\n\nReturn *the integer* `num1 - num2`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10, m = 3\n**Output:** 19\n**Explanation:** In the given example:\n- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\nWe return 37 - 18 = 19 as the answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, m = 6\n**Output:** 15\n**Explanation:** In the given example:\n- Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n- Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\nWe return 15 - 0 = 15 as the answer.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 5, m = 1\n**Output:** -15\n**Explanation:** In the given example:\n- Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n- Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\nWe return 0 - 15 = -15 as the answer.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def differenceOfSums(self, n: int, m: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.48901309657253}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.2381772822677455}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.8920837233748262}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.7253927940164218}, {"name": "deepseek-coder-33b-instruct", "score": 0.9344478701803496}, {"name": "Codestral-22B-v0.1", "score": 0.8782755016033574}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.8368228842212773}], "rank": [0, 3, 2, 4, 6, 5, 7, 1]}
{"id": "LeetCode/80", "prompt": "# Minimum Processing Time\n\nYou have `n` processors each having `4` cores and `n * 4` tasks that need to be executed such that each core should perform only **one** task.\n\n\nGiven a **0-indexed** integer array `processorTime` representing the time at which each processor becomes available for the first time and a **0-indexed** integer array `tasks` representing the time it takes to execute each task, return *the **minimum** time when all of the tasks have been executed by the processors.*\n\n\n**Note:** Each core executes the task independently of the others.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]\n**Output:** 16\n**Explanation:** \nIt's optimal to assign the tasks at indexes 4, 5, 6, 7 to the first processor which becomes available at time = 8, and the tasks at indexes 0, 1, 2, 3 to the second processor which becomes available at time = 10. \nTime taken by the first processor to finish execution of all tasks = max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16.\nTime taken by the second processor to finish execution of all tasks = max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13.\nHence, it can be shown that the minimum time taken to execute all the tasks is 16.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]\n**Output:** 23\n**Explanation:** \nIt's optimal to assign the tasks at indexes 1, 4, 5, 6 to the first processor which becomes available at time = 10, and the tasks at indexes 0, 2, 3, 7 to the second processor which becomes available at time = 20.\nTime taken by the first processor to finish execution of all tasks = max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18.\nTime taken by the second processor to finish execution of all tasks = max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23.\nHence, it can be shown that the minimum time taken to execute all the tasks is 23.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == processorTime.length <= 25000`\n* `1 <= tasks.length <= 105`\n* `0 <= processorTime[i] <= 109`\n* `1 <= tasks[i] <= 109`\n* `tasks.length == 4 * n`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minProcessingTime(self, processorTime: List[int], tasks: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0669252553268258}, {"name": "Codestral-22B-v0.1", "score": -0.5196695637785007}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.4285760766318507}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.836609566138272}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.496604539381316}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.805373191076249}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.385173731523925}, {"name": "deepseek-coder-33b-instruct", "score": -6.133198456920152}], "rank": [7, 5, 1, 0, 3, 4, 2, 6]}
{"id": "LeetCode/81", "prompt": "# Apply Operations to Make Two Strings Equal\n\nYou are given two **0-indexed** binary strings `s1` and `s2`, both of length `n`, and a positive integer `x`.\n\n\nYou can perform any of the following operations on the string `s1` **any** number of times:\n\n\n* Choose two indices `i` and `j`, and flip both `s1[i]` and `s1[j]`. The cost of this operation is `x`.\n* Choose an index `i` such that `i < n - 1` and flip both `s1[i]` and `s1[i + 1]`. The cost of this operation is `1`.\n\n\nReturn *the **minimum** cost needed to make the strings* `s1` *and* `s2` *equal, or return* `-1` *if it is impossible.*\n\n\n**Note** that flipping a character means changing it from `0` to `1` or vice-versa.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"1100011000\", s2 = \"0101001010\", x = 2\n**Output:** 4\n**Explanation:** We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = \"110**11**11000\".\n- Choose i = 4 and apply the second operation. The resulting string is s1 = \"1101**00**1000\".\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = \"**0**1010010**1**0\" = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"10110\", s2 = \"00011\", x = 4\n**Output:** -1\n**Explanation:** It is not possible to make the two strings equal.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == s1.length == s2.length`\n* `1 <= n, x <= 500`\n* `s1` and `s2` consist only of the characters `'0'` and `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, s1: str, s2: str, x: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.119752366156634}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.425134015707815}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.917466819203791}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.44132620595645}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.378602738523262}, {"name": "Codestral-22B-v0.1", "score": -6.481913979121144}, {"name": "deepseek-coder-33b-instruct", "score": -6.6491503393897675}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.135461206810691}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "LeetCode/82", "prompt": "# Apply Operations on Array to Maximize Sum of Squares\n\nYou are given a **0-indexed** integer array `nums` and a **positive** integer `k`.\n\n\nYou can do the following operation on the array **any** number of times:\n\n\n* Choose any two distinct indices `i` and `j` and **simultaneously** update the values of `nums[i]` to `(nums[i] AND nums[j])` and `nums[j]` to `(nums[i] OR nums[j])`. Here, `OR` denotes the bitwise `OR` operation, and `AND` denotes the bitwise `AND` operation.\n\n\nYou have to choose `k` elements from the final array and calculate the sum of their **squares**.\n\n\nReturn *the **maximum** sum of squares you can achieve*.\n\n\nSince the answer can be very large, return it **modulo** `109 + 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,6,5,8], k = 2\n**Output:** 261\n**Explanation:** We can do the following operations on the array:\n- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\nWe can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261.\nIt can be shown that this is the maximum value we can get.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,5,4,7], k = 3\n**Output:** 90\n**Explanation:** We do not need to apply any operations.\nWe can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90.\nIt can be shown that this is the maximum value we can get.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSum(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.20904462693470816}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.206005190428407}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.718784544772255}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.898108420585576}, {"name": "CodeLlama-7b-Instruct-hf", "score": -6.026155786897912}, {"name": "Codestral-22B-v0.1", "score": -6.122909389399602}, {"name": "deepseek-coder-33b-instruct", "score": -6.153226189936575}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.395809027547443}], "rank": [7, 1, 3, 0, 2, 5, 6, 4]}
{"id": "LeetCode/83", "prompt": "# Maximum Value of an Ordered Triplet I\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nReturn ***the maximum value over all triplets of indices*** `(i, j, k)` *such that* `i < j < k`. If all such triplets have a negative value, return `0`.\n\n\nThe **value of a triplet of indices** `(i, j, k)` is equal to `(nums[i] - nums[j]) * nums[k]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [12,6,1,2,7]\n**Output:** 77\n**Explanation:** The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,10,3,4,19]\n**Output:** 133\n**Explanation:** The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 0\n**Explanation:** The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 100`\n* `1 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumTripletValue(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 0.5994895676170895}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7302604417024119}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5005518640208475}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.8959504486283034}, {"name": "Codestral-22B-v0.1", "score": -3.111655894218281}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.7443461625334553}, {"name": "deepseek-coder-33b-instruct", "score": -6.259390241194085}], "rank": [3, 7, 4, 0, 1, 5, 2, 6]}
{"id": "LeetCode/84", "prompt": "# Maximum Value of an Ordered Triplet II\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nReturn ***the maximum value over all triplets of indices*** `(i, j, k)` *such that* `i < j < k`*.* If all such triplets have a negative value, return `0`.\n\n\nThe **value of a triplet of indices** `(i, j, k)` is equal to `(nums[i] - nums[j]) * nums[k]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [12,6,1,2,7]\n**Output:** 77\n**Explanation:** The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,10,3,4,19]\n**Output:** 133\n**Explanation:** The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 0\n**Explanation:** The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumTripletValue(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -0.7771834883638062}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.32879223965289}, {"name": "Codestral-22B-v0.1", "score": -3.2900252850203207}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7826429839260993}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.118184221256653}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.299188356364877}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.716210540777082}, {"name": "deepseek-coder-33b-instruct", "score": -6.033834143474491}], "rank": [4, 2, 5, 0, 7, 1, 3, 6]}
{"id": "LeetCode/85", "prompt": "# Minimum Size Subarray in Infinite Array\n\nYou are given a **0-indexed** array `nums` and an integer `target`.\n\n\nA **0-indexed** array `infinite_nums` is generated by infinitely appending the elements of `nums` to itself.\n\n\nReturn *the length of the **shortest** subarray of the array* `infinite_nums` *with a sum equal to* `target`*.* If there is no such subarray return `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], target = 5\n**Output:** 2\n**Explanation:** In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\nThe subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,2,3], target = 4\n**Output:** 2\n**Explanation:** In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\nThe subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,4,6,8], target = 3\n**Output:** -1\n**Explanation:** In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\nIt can be proven that there is no subarray with sum equal to target = 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n* `1 <= target <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minSizeSubarray(self, nums: List[int], target: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.04235326874562073}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.031333762412697}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2761104090823325}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0523145210877445}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.810086545026239}, {"name": "deepseek-coder-33b-instruct", "score": -6.082739322883569}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.356857379586437}, {"name": "Codestral-22B-v0.1", "score": -6.433952441877164}], "rank": [7, 0, 1, 3, 2, 6, 4, 5]}
{"id": "LeetCode/86", "prompt": "# Minimum Operations to Collect Elements\n\nYou are given an array `nums` of positive integers and an integer `k`.\n\n\nIn one operation, you can remove the last element of the array and add it to your collection.\n\n\nReturn *the **minimum number of operations** needed to collect elements* `1, 2, ..., k`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,5,4,2], k = 2\n**Output:** 4\n**Explanation:** After 4 operations, we collect elements 2, 4, 5, and 1, in this order. Our collection contains elements 1 and 2. Hence, the answer is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,1,5,4,2], k = 5\n**Output:** 5\n**Explanation:** After 5 operations, we collect elements 2, 4, 5, 1, and 3, in this order. Our collection contains elements 1 through 5. Hence, the answer is 5.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [3,2,5,3,1], k = 3\n**Output:** 4\n**Explanation:** After 4 operations, we collect elements 1, 3, 5, and 2, in this order. Our collection contains elements 1 through 3. Hence, the answer is 4.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= nums.length`\n* `1 <= k <= nums.length`\n* The input is generated such that you can collect elements `1, 2, ..., k`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.805328266757183}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.116562570788533}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.480422956530075}, {"name": "Codestral-22B-v0.1", "score": -4.58658897405709}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.646665585050659}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.114418566559728}, {"name": "deepseek-coder-33b-instruct", "score": -6.017395417131331}], "rank": [7, 0, 1, 3, 5, 4, 2, 6]}
{"id": "LeetCode/87", "prompt": "# Minimum Number of Operations to Make Array Empty\n\nYou are given a **0-indexed** array `nums` consisting of positive integers.\n\n\nThere are two types of operations that you can apply on the array **any** number of times:\n\n\n* Choose **two** elements with **equal** values and **delete** them from the array.\n* Choose **three** elements with **equal** values and **delete** them from the array.\n\n\nReturn *the **minimum** number of operations required to make the array empty, or* `-1` *if it is not possible*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,3,2,2,4,2,3,4]\n**Output:** 4\n**Explanation:** We can apply the following operations to make the array empty:\n- Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4].\n- Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4].\n- Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4].\n- Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = [].\nIt can be shown that we cannot make the array empty in less than 4 operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,1,2,2,3,3]\n**Output:** -1\n**Explanation:** It is impossible to empty the array.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.5692915650667238}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.4049357886576082}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6743747679110546}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.815495939191643}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.492419261877522}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.040368990461585}, {"name": "deepseek-coder-33b-instruct", "score": -6.0918979444292525}], "rank": [7, 5, 1, 0, 3, 2, 4, 6]}
{"id": "LeetCode/88", "prompt": "# Split Array Into Maximum Number of Subarrays\n\nYou are given an array `nums` consisting of **non-negative** integers.\n\n\nWe define the score of subarray `nums[l..r]` such that `l <= r` as `nums[l] AND nums[l + 1] AND ... AND nums[r]` where **AND** is the bitwise `AND` operation.\n\n\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\n\n\n* **E****ach** element of the array belongs to **exactly** one subarray.\n* The sum of scores of the subarrays is the **minimum** possible.\n\n\nReturn *the **maximum** number of subarrays in a split that satisfies the conditions above.*\n\n\nA **subarray** is a contiguous part of an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,0,2,0,1,2]\n**Output:** 3\n**Explanation:** We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,7,1,3]\n**Output:** 1\n**Explanation:** We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSubarrays(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.752229769614698}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9824441897238727}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.725190716584667}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.361404835418293}, {"name": "Codestral-22B-v0.1", "score": -5.7562484145595025}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.17188429661234}, {"name": "deepseek-coder-33b-instruct", "score": -6.178624380542185}], "rank": [7, 0, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/89", "prompt": "# Maximum Odd Binary Number\n\nYou are given a **binary** string `s` that contains at least one `'1'`.\n\n\nYou have to **rearrange** the bits in such a way that the resulting binary number is the **maximum odd binary number** that can be created from this combination.\n\n\nReturn *a string representing the maximum odd binary number that can be created from the given combination.*\n\n\n**Note** that the resulting string **can** have leading zeros.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"010\"\n**Output:** \"001\"\n**Explanation:** Because there is just one '1', it must be in the last position. So the answer is \"001\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"0101\"\n**Output:** \"1001\"\n**Explanation:** One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists only of `'0'` and `'1'`.\n* `s` contains at least one `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumOddBinaryNumber(self, s: str) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.4934726577713264}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.871034330350792}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.604529981100668}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.042753923977715}, {"name": "Codestral-22B-v0.1", "score": -5.562564472740663}, {"name": "deepseek-coder-33b-instruct", "score": -5.9950481184393345}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.08298573957544}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.601697400839931}], "rank": [0, 1, 3, 2, 5, 6, 4, 7]}
{"id": "LeetCode/90", "prompt": "# Beautiful Towers I\n\nYou are given a **0-indexed** array `maxHeights` of `n` integers.\n\n\nYou are tasked with building `n` towers in the coordinate line. The `ith` tower is built at coordinate `i` and has a height of `heights[i]`.\n\n\nA configuration of towers is **beautiful** if the following conditions hold:\n\n\n1. `1 <= heights[i] <= maxHeights[i]`\n2. `heights` is a **mountain** array.\n\n\nArray `heights` is a **mountain** if there exists an index `i` such that:\n\n\n* For all `0 < j <= i`, `heights[j - 1] <= heights[j]`\n* For all `i <= k < n - 1`, `heights[k + 1] <= heights[k]`\n\n\nReturn *the **maximum possible sum of heights** of a beautiful configuration of towers*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** maxHeights = [5,3,4,1,1]\n**Output:** 13\n**Explanation:** One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** maxHeights = [6,5,3,9,2,7]\n**Output:** 22\n**Explanation:** One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** maxHeights = [3,2,5,5,2,3]\n**Output:** 18\n**Explanation:** One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == maxHeights <= 103`\n* `1 <= maxHeights[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.1676410989944594}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.065533480367981}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.310906502170756}, {"name": "Codestral-22B-v0.1", "score": -5.220821548083922}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.304140379850825}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.370433356020965}, {"name": "deepseek-coder-33b-instruct", "score": -6.318340890055747}], "rank": [7, 4, 0, 1, 5, 3, 2, 6]}
{"id": "LeetCode/91", "prompt": "# Beautiful Towers II\n\nYou are given a **0-indexed** array `maxHeights` of `n` integers.\n\n\nYou are tasked with building `n` towers in the coordinate line. The `ith` tower is built at coordinate `i` and has a height of `heights[i]`.\n\n\nA configuration of towers is **beautiful** if the following conditions hold:\n\n\n1. `1 <= heights[i] <= maxHeights[i]`\n2. `heights` is a **mountain** array.\n\n\nArray `heights` is a **mountain** if there exists an index `i` such that:\n\n\n* For all `0 < j <= i`, `heights[j - 1] <= heights[j]`\n* For all `i <= k < n - 1`, `heights[k + 1] <= heights[k]`\n\n\nReturn *the **maximum possible sum of heights** of a beautiful configuration of towers*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** maxHeights = [5,3,4,1,1]\n**Output:** 13\n**Explanation:** One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** maxHeights = [6,5,3,9,2,7]\n**Output:** 22\n**Explanation:** One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** maxHeights = [3,2,5,5,2,3]\n**Output:** 18\n**Explanation:** One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == maxHeights <= 105`\n* `1 <= maxHeights[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.1151208307813425}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.184489912073446}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.4476739159097365}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.818990409841417}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.108081800139079}, {"name": "Codestral-22B-v0.1", "score": -5.320303499652263}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.433285226958521}, {"name": "deepseek-coder-33b-instruct", "score": -6.179668767060092}], "rank": [7, 0, 1, 3, 4, 5, 2, 6]}
{"id": "LeetCode/92", "prompt": "# Sum of Values at Indices With K Set Bits\n\nYou are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nReturn *an integer that denotes the **sum** of elements in* `nums` *whose corresponding **indices** have **exactly*** `k` *set bits in their binary representation.*\n\n\nThe **set bits** in an integer are the `1`'s present when it is written in binary.\n\n\n* For example, the binary representation of `21` is `10101`, which has `3` set bits.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,10,1,5,2], k = 1\n**Output:** 13\n**Explanation:** The binary representation of the indices are: \n0 = 0002\n1 = 0012\n2 = 0102\n3 = 0112\n4 = 1002Indices 1, 2, and 4 have k = 1 set bits in their binary representation.\nHence, the answer is nums[1] + nums[2] + nums[4] = 13.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,1], k = 2\n**Output:** 1\n**Explanation:** The binary representation of the indices are:\n0 = 002\n1 = 012\n2 = 102\n3 = 112Only index 3 has k = 2 set bits in its binary representation.\nHence, the answer is nums[3] = 1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 105`\n* `0 <= k <= 10`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumIndicesWithKSetBits(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.2354737162772387}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.680290931467935}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.299120076350114}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.2813148704238086}, {"name": "Codestral-22B-v0.1", "score": 1.2113682984788587}, {"name": "deepseek-coder-33b-instruct", "score": 0.8156078057674394}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.38392107854344815}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.9488823584334396}], "rank": [0, 1, 3, 4, 5, 6, 7, 2]}
{"id": "LeetCode/93", "prompt": "# Happy Students\n\nYou are given a **0-indexed** integer array `nums` of length `n` where `n` is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\n\n\nThe `ith` student will become happy if one of these two conditions is met:\n\n\n* The student is selected and the total number of selected students is **strictly greater than** `nums[i]`.\n* The student is not selected and the total number of selected students is **strictly** **less than** `nums[i]`.\n\n\nReturn *the number of ways to select a group of students so that everyone remains happy.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1]\n**Output:** 2\n**Explanation:** \nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group. \nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,0,3,3,6,7,2,7]\n**Output:** 3\n**Explanation:** \nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] < nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countWays(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.6211180171879587}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.175063963963476}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.354655437877749}, {"name": "Codestral-22B-v0.1", "score": -5.819132924343375}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.946603155195959}, {"name": "starcoder2-15b-instruct-v0.1", "score": -6.202373560753849}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.305603528522123}, {"name": "deepseek-coder-33b-instruct", "score": -7.044776076545928}], "rank": [7, 1, 0, 5, 2, 3, 4, 6]}
{"id": "LeetCode/94", "prompt": "# Maximum Number of Alloys\n\nYou are the owner of a company that creates alloys using various types of metals. There are `n` different types of metals available, and you have access to `k` machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.\n\n\nFor the `ith` machine to create an alloy, it needs `composition[i][j]` units of metal of type `j`. Initially, you have `stock[i]` units of metal type `i`, and purchasing one unit of metal type `i` costs `cost[i]` coins.\n\n\nGiven integers `n`, `k`, `budget`, a **1-indexed** 2D array `composition`, and **1-indexed** arrays `stock` and `cost`, your goal is to **maximize** the number of alloys the company can create while staying within the budget of `budget` coins.\n\n\n**All alloys must be created with the same machine.**\n\n\nReturn *the maximum number of alloys that the company can create*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]\n**Output:** 2\n**Explanation:** It is optimal to use the 1st machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 2 units of metal of the 1st type.\n- 2 units of metal of the 2nd type.\n- 2 units of metal of the 3rd type.\nIn total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\nNotice that we have 0 units of metal of each type and we have to buy all the required units of metal.\nIt can be proven that we can create at most 2 alloys.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]\n**Output:** 5\n**Explanation:** It is optimal to use the 2nd machine to create alloys.\nTo create 5 alloys we need to buy:\n- 5 units of metal of the 1st type.\n- 5 units of metal of the 2nd type.\n- 0 units of metal of the 3rd type.\nIn total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\nIt can be proven that we can create at most 5 alloys.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]\n**Output:** 2\n**Explanation:** It is optimal to use the 3rd machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 1 unit of metal of the 1st type.\n- 1 unit of metal of the 2nd type.\nIn total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\nIt can be proven that we can create at most 2 alloys.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 100`\n* `0 <= budget <= 108`\n* `composition.length == k`\n* `composition[i].length == n`\n* `1 <= composition[i][j] <= 100`\n* `stock.length == cost.length == n`\n* `0 <= stock[i] <= 108`\n* `1 <= cost[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxNumberOfAlloys(self, n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.12965234638970902}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.6229371775222226}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.379523504455763}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.421776054191165}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.7366755179582265}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.786909651230083}, {"name": "deepseek-coder-33b-instruct", "score": -6.347886459036815}, {"name": "Codestral-22B-v0.1", "score": -6.684724221340277}], "rank": [7, 4, 0, 1, 3, 2, 6, 5]}
{"id": "LeetCode/95", "prompt": "# Maximum Element-Sum of a Complete Subset of Indices\n\nYou are given a **1****-indexed** array `nums` of `n` integers.\n\n\nA set of numbers is **complete** if the product of every pair of its elements is a perfect square.\n\n\nFor a subset of the indices set `{1, 2, ..., n}` represented as `{i1, i2, ..., ik}`, we define its **element-sum** as: `nums[i1] + nums[i2] + ... + nums[ik]`.\n\n\nReturn *the **maximum element-sum** of a **complete** subset of the indices set* `{1, 2, ..., n}`.\n\n\nA perfect square is a number that can be expressed as the product of an integer by itself.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,7,3,5,7,2,4,9]\n**Output:** 16\n**Explanation:** Apart from the subsets consisting of a single index, there are two other complete subsets of indices: {1,4} and {2,8}.\nThe sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 8 + 5 = 13.\nThe sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 7 + 9 = 16.\nHence, the maximum element-sum of a complete subset of indices is 16.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,10,3,10,1,13,7,9,4]\n**Output:** 19\n**Explanation:** Apart from the subsets consisting of a single index, there are four other complete subsets of indices: {1,4}, {1,9}, {2,8}, {4,9}, and {1,4,9}.\nThe sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 5 + 10 = 15.\nThe sum of the elements corresponding to indices 1 and 9 is equal to nums[1] + nums[9] = 5 + 4 = 9.\nThe sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 10 + 9 = 19.\nThe sum of the elements corresponding to indices 4 and 9 is equal to nums[4] + nums[9] = 10 + 4 = 14.\nThe sum of the elements corresponding to indices 1, 4, and 9 is equal to nums[1] + nums[4] + nums[9] = 5 + 10 + 4 = 19.\nHence, the maximum element-sum of a complete subset of indices is 19.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 104`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.047285756823312}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.831159961370707}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.097672352314775}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.298397363348207}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.908550220279985}, {"name": "Codestral-22B-v0.1", "score": -6.226477378992281}, {"name": "deepseek-coder-33b-instruct", "score": -6.303234171088823}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.6047240079831315}], "rank": [7, 0, 1, 3, 2, 5, 6, 4]}
{"id": "LeetCode/96", "prompt": "# Minimum Right Shifts to Sort the Array\n\nYou are given a **0-indexed** array `nums` of length `n` containing **distinct** positive integers. Return *the **minimum** number of **right shifts** required to sort* `nums` *and* `-1` *if this is not possible.*\n\n\nA **right shift** is defined as shifting the element at index `i` to index `(i + 1) % n`, for all indices.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,4,5,1,2]\n**Output:** 2\n**Explanation:** \nAfter the first right shift, nums = [2,3,4,5,1].\nAfter the second right shift, nums = [1,2,3,4,5].\nNow nums is sorted; therefore the answer is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,5]\n**Output:** 0\n**Explanation:** nums is already sorted therefore, the answer is 0.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,1,4]\n**Output:** -1\n**Explanation:** It's impossible to sort the array using right shifts.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `nums` contains distinct integers.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumRightShifts(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5788223407898041}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3576916195170874}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7736800558064014}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.014796176795633}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.5603401700702975}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.167023468863706}, {"name": "Codestral-22B-v0.1", "score": -5.843660352339588}, {"name": "deepseek-coder-33b-instruct", "score": -5.905808614724491}], "rank": [4, 7, 0, 1, 3, 2, 5, 6]}
{"id": "LeetCode/97", "prompt": "# Minimum Array Length After Pair Removals\n\nYou are given a **0-indexed** **sorted** array of integers `nums`.\n\n\nYou can perform the following operation any number of times:\n\n\n* Choose **two** indices, `i` and `j`, where `i < j`, such that `nums[i] < nums[j]`.\n* Then, remove the elements at indices `i` and `j` from `nums`. The remaining elements retain their original order, and the array is re-indexed.\n\n\nReturn *an integer that denotes the **minimum** length of* `nums` *after performing the operation any number of times (**including zero**).*\n\n\nNote that `nums` is sorted in **non-decreasing** order.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,4,9]\n**Output:** 0\n**Explanation:** Initially, nums = [1, 3, 4, 9].\nIn the first operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 1 < 3.\nRemove indices 0 and 1, and nums becomes [4, 9].\nFor the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 4 < 9.\nRemove indices 0 and 1, and nums becomes an empty array [].\nHence, the minimum length achievable is 0.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,6,9]\n**Output:** 0\n**Explanation:** Initially, nums = [2, 3, 6, 9]. \nIn the first operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 2 < 6. \nRemove indices 0 and 2, and nums becomes [3, 9]. \nFor the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 3 < 9. \nRemove indices 0 and 1, and nums becomes an empty array []. \nHence, the minimum length achievable is 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,2]\n**Output:** 1\n**Explanation:** Initially, nums = [1, 1, 2].\nIn an operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 1 < 2. \nRemove indices 0 and 2, and nums becomes [1]. \nIt is no longer possible to perform an operation on the array. \nHence, the minimum achievable length is 1. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `nums` is sorted in **non-decreasing** order.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minLengthAfterRemovals(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.0733414913590194}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6884793740925965}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.864008540326386}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.087923994419178}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.029653299932018}, {"name": "deepseek-coder-33b-instruct", "score": -6.001929596955746}, {"name": "Codestral-22B-v0.1", "score": -6.123742028914818}], "rank": [7, 4, 0, 1, 3, 2, 6, 5]}
{"id": "LeetCode/98", "prompt": "# Count Pairs of Points With Distance k\n\nYou are given a **2D** integer array `coordinates` and an integer `k`, where `coordinates[i] = [xi, yi]` are the coordinates of the `ith` point in a 2D plane.\n\n\nWe define the **distance** between two points `(x1, y1)` and `(x2, y2)` as `(x1 XOR x2) + (y1 XOR y2)` where `XOR` is the bitwise `XOR` operation.\n\n\nReturn *the number of pairs* `(i, j)` *such that* `i < j` *and the distance between points* `i` *and* `j` *is equal to* `k`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5\n**Output:** 2\n**Explanation:** We can choose the following pairs:\n- (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5.\n- (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0\n**Output:** 10\n**Explanation:** Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= coordinates.length <= 50000`\n* `0 <= xi, yi <= 106`\n* `0 <= k <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 0.9466844984184215}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.40136935249896144}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.55993051887861}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.799705009202821}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.267905635569182}, {"name": "Codestral-22B-v0.1", "score": -4.623962616299831}, {"name": "deepseek-coder-33b-instruct", "score": -4.628022695194927}], "rank": [3, 7, 4, 2, 0, 1, 5, 6]}
{"id": "LeetCode/99", "prompt": "# Points That Intersect With Cars\n\nYou are given a **0-indexed** 2D integer array `nums` representing the coordinates of the cars parking on a number line. For any index `i`, `nums[i] = [starti, endi]` where `starti` is the starting point of the `ith` car and `endi` is the ending point of the `ith` car.\n\n\nReturn *the number of integer points on the line that are covered with **any part** of a car.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [[3,6],[1,5],[4,7]]\n**Output:** 7\n**Explanation:** All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [[1,3],[5,8]]\n**Output:** 7\n**Explanation:** Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `nums[i].length == 2`\n* `1 <= starti <= endi <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfPoints(self, nums: List[List[int]]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.085608595801494}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.0313316520841918}, {"name": "deepseek-coder-33b-instruct", "score": 0.6844342541530208}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5636014448656264}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.8033165368192687}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.9969791870587552}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.241747015059643}], "rank": [5, 1, 6, 4, 7, 3, 0, 2]}
{"id": "LeetCode/100", "prompt": "# String Transformation\n\nYou are given two strings `s` and `t` of equal length `n`. You can perform the following operation on the string `s`:\n\n\n* Remove a **suffix** of `s` of length `l` where `0 < l < n` and append it at the start of `s`.  \n\n For example, let `s = 'abcd'` then in one operation you can remove the suffix `'cd'` and append it in front of `s` making `s = 'cdab'`.\n\n\nYou are also given an integer `k`. Return *the number of ways in which* `s` *can be transformed into* `t` *in **exactly*** `k` *operations.*\n\n\nSince the answer can be large, return it **modulo** `109 + 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcd\", t = \"cdab\", k = 2\n**Output:** 2\n**Explanation:** \nFirst way:\nIn first operation, choose suffix from index = 3, so resulting s = \"dabc\".\nIn second operation, choose suffix from index = 3, so resulting s = \"cdab\".\n\nSecond way:\nIn first operation, choose suffix from index = 1, so resulting s = \"bcda\".\nIn second operation, choose suffix from index = 1, so resulting s = \"cdab\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ababab\", t = \"ababab\", k = 1\n**Output:** 2\n**Explanation:** \nFirst way:\nChoose suffix from index = 2, so resulting s = \"ababab\".\n\nSecond way:\nChoose suffix from index = 4, so resulting s = \"ababab\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 5 * 105`\n* `1 <= k <= 1015`\n* `s.length == t.length`\n* `s` and `t` consist of only lowercase English alphabets.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfWays(self, s: str, t: str, k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.470037511996595}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.515464272903598}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.410001843742551}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.629576036116362}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.726151003348889}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.302970562282763}, {"name": "deepseek-coder-33b-instruct", "score": -6.600327537612017}, {"name": "Codestral-22B-v0.1", "score": -6.755314802589629}], "rank": [0, 1, 3, 2, 7, 4, 6, 5]}
{"id": "LeetCode/101", "prompt": "#   Count Symmetric Integers\n\nYou are given two positive integers `low` and `high`.\n\n\nAn integer `x` consisting of `2 * n` digits is **symmetric** if the sum of the first `n` digits of `x` is equal to the sum of the last `n` digits of `x`. Numbers with an odd number of digits are never symmetric.\n\n\nReturn *the **number of symmetric** integers in the range* `[low, high]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** low = 1, high = 100\n**Output:** 9\n**Explanation:** There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** low = 1200, high = 1230\n**Output:** 4\n**Explanation:** There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= low <= high <= 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.2474987195534766}, {"name": "Codestral-22B-v0.1", "score": 0.8847822870156499}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.19597045522817336}, {"name": "deepseek-coder-33b-instruct", "score": -0.567769969809965}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.577417153572898}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7423254298195623}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.930645889422796}], "rank": [1, 5, 4, 7, 6, 3, 0, 2]}
{"id": "LeetCode/102", "prompt": "# Minimum Operations to Make a Special Number\n\nYou are given a **0-indexed** string `num` representing a non-negative integer.\n\n\nIn one operation, you can pick any digit of `num` and delete it. Note that if you delete all the digits of `num`, `num` becomes `0`.\n\n\nReturn *the **minimum number of operations** required to make* `num` *special*.\n\n\nAn integer `x` is considered **special** if it is divisible by `25`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"2245047\"\n**Output:** 2\n**Explanation:** Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"2908305\"\n**Output:** 3\n**Explanation:** Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"10\"\n**Output:** 1\n**Explanation:** Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number.\n\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 100`\n* `num` only consists of digits `'0'` through `'9'`.\n* `num` does not contain any leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperations(self, num: str) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6828613817883733}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.144276930970309}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.377064342844067}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.239967655159565}, {"name": "Codestral-22B-v0.1", "score": -5.777063914850281}, {"name": "deepseek-coder-33b-instruct", "score": -6.30645775205207}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.344793900795618}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.885521939898192}], "rank": [0, 3, 1, 2, 5, 6, 4, 7]}
{"id": "LeetCode/103", "prompt": "# Count of Interesting Subarrays\n\nYou are given a **0-indexed** integer array `nums`, an integer `modulo`, and an integer `k`.\n\n\nYour task is to find the count of subarrays that are **interesting**.\n\n\nA **subarray** `nums[l..r]` is **interesting** if the following condition holds:\n\n\n* Let `cnt` be the number of indices `i` in the range `[l, r]` such that `nums[i] % modulo == k`. Then, `cnt % modulo == k`.\n\n\nReturn *an integer denoting the count of interesting subarrays.* \n\n\n**Note:** A subarray is *a contiguous non-empty sequence of elements within an array*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,4], modulo = 2, k = 1\n**Output:** 3\n**Explanation:** In this example the interesting subarrays are: \nThe subarray nums[0..0] which is [3]. \n- There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k.  \nThe subarray nums[0..1] which is [3,2].\n- There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.  \n- Hence, cnt = 1 and cnt % modulo == k.\nThe subarray nums[0..2] which is [3,2,4]. \n- There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,1,9,6], modulo = 3, k = 0\n**Output:** 2\n**Explanation:** In this example the interesting subarrays are: \nThe subarray nums[0..3] which is [3,1,9,6]. \n- There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k. \n- Hence, cnt = 3 and cnt % modulo == k. \nThe subarray nums[1..1] which is [1]. \n- There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 0 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 2.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= modulo <= 109`\n* `0 <= k < modulo`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.3030793785410237}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8096801542596404}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2151452623678045}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.885140598178706}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.043837934923974}, {"name": "deepseek-coder-33b-instruct", "score": -6.249704935459621}, {"name": "Codestral-22B-v0.1", "score": -6.278071041332829}], "rank": [7, 3, 0, 1, 4, 2, 6, 5]}
{"id": "LeetCode/104", "prompt": "# Check if Strings Can be Made Equal With Operations I\n\nYou are given two strings `s1` and `s2`, both of length `4`, consisting of **lowercase** English letters.\n\n\nYou can apply the following operation on any of the two strings **any** number of times:\n\n\n* Choose any two indices `i` and `j` such that `j - i = 2`, then **swap** the two characters at those indices in the string.\n\n\nReturn `true` *if you can make the strings* `s1` *and* `s2` *equal, and* `false` *otherwise*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"abcd\", s2 = \"cdab\"\n**Output:** true\n**Explanation:** We can do the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbad\".\n- Choose the indices i = 1, j = 3. The resulting string is s1 = \"cdab\" = s2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"abcd\", s2 = \"dacb\"\n**Output:** false\n**Explanation:** It is not possible to make the two strings equal.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `s1.length == s2.length == 4`\n* `s1` and `s2` consist only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canBeEqual(self, s1: str, s2: str) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.012090273668984963}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.216793658663876}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.085976312551584}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.6720437279503395}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.837424111530255}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.03075159768108}, {"name": "Codestral-22B-v0.1", "score": -5.0325924614482975}, {"name": "deepseek-coder-33b-instruct", "score": -5.642757772818427}], "rank": [7, 0, 1, 4, 3, 2, 5, 6]}
{"id": "LeetCode/105", "prompt": "# Check if Strings Can be Made Equal With Operations II\n\nYou are given two strings `s1` and `s2`, both of length `n`, consisting of **lowercase** English letters.\n\n\nYou can apply the following operation on **any** of the two strings **any** number of times:\n\n\n* Choose any two indices `i` and `j` such that `i < j` and the difference `j - i` is **even**, then **swap** the two characters at those indices in the string.\n\n\nReturn `true` *if you can make the strings* `s1` *and* `s2` *equal, and*`false` *otherwise*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"abcdba\", s2 = \"cabdab\"\n**Output:** true\n**Explanation:** We can apply the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbadba\".\n- Choose the indices i = 2, j = 4. The resulting string is s1 = \"cbbdaa\".\n- Choose the indices i = 1, j = 5. The resulting string is s1 = \"cabdab\" = s2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"abe\", s2 = \"bea\"\n**Output:** false\n**Explanation:** It is not possible to make the two strings equal.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == s1.length == s2.length`\n* `1 <= n <= 105`\n* `s1` and `s2` consist only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def checkStrings(self, s1: str, s2: str) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.28014075469355326}, {"name": "Codestral-22B-v0.1", "score": -1.7250710872569792}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.563917184002538}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.864008540326386}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.93268800587173}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.875502620104759}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.69663700649533}, {"name": "deepseek-coder-33b-instruct", "score": -5.719222659144079}], "rank": [7, 5, 4, 0, 1, 3, 2, 6]}
{"id": "LeetCode/106", "prompt": "# Maximum Sum of Almost Unique Subarray\n\nYou are given an integer array `nums` and two positive integers `m` and `k`.\n\n\nReturn *the **maximum sum** out of all **almost unique** subarrays of length* `k` *of* `nums`. If no such subarray exists, return `0`.\n\n\nA subarray of `nums` is **almost unique** if it contains at least `m` distinct elements.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,6,7,3,1,7], m = 3, k = 4\n**Output:** 18\n**Explanation:** There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,9,9,2,4,5,4], m = 1, k = 3\n**Output:** 23\n**Explanation:** There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,2,1,2,1], m = 3, k = 3\n**Output:** 0\n**Explanation:** There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 104`\n* `1 <= m <= k <= nums.length`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSum(self, nums: List[int], m: int, k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.651218562951426}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.14414670520382256}, {"name": "Codestral-22B-v0.1", "score": -3.7019939848246484}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.961729892884412}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.1124463975860825}, {"name": "deepseek-coder-33b-instruct", "score": -5.034799426992095}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.134903919441593}], "rank": [4, 7, 1, 5, 3, 0, 6, 2]}
{"id": "LeetCode/107", "prompt": "# Count K-Subsequences of a String With Maximum Beauty\n\nYou are given a string `s` and an integer `k`.\n\n\nA **k-subsequence** is a **subsequence** of `s`, having length `k`, and all its characters are **unique**, **i.e**., every character occurs once.\n\n\nLet `f(c)` denote the number of times the character `c` occurs in `s`.\n\n\nThe **beauty** of a **k-subsequence** is the **sum** of `f(c)` for every character `c` in the k-subsequence.\n\n\nFor example, consider `s = \"abbbdd\"` and `k = 2`:\n\n\n* `f('a') = 1`, `f('b') = 3`, `f('d') = 2`\n* Some k-subsequences of `s` are:\n\t+ `\"**ab**bbdd\"` -> `\"ab\"` having a beauty of `f('a') + f('b') = 4`\n\t+ `\"**a**bbb**d**d\"` -> `\"ad\"` having a beauty of `f('a') + f('d') = 3`\n\t+ `\"a**b**bb**d**d\"` -> `\"bd\"` having a beauty of `f('b') + f('d') = 5`\n\n\nReturn *an integer denoting the number of k-subsequences* *whose **beauty** is the **maximum** among all **k-subsequences***. Since the answer may be too large, return it modulo `109 + 7`.\n\n\nA subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\n**Notes**\n\n\n* `f(c)` is the number of times a character `c` occurs in `s`, not a k-subsequence.\n* Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bcca\", k = 2\n**Output:** 4\n**Explanation:** From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are: \n**bc**ca having a beauty of f('b') + f('c') = 3 \n**b**c**c**a having a beauty of f('b') + f('c') = 3 \n**b**cc**a** having a beauty of f('b') + f('a') = 2 \nb**c**c**a**having a beauty of f('c') + f('a') = 3\nbc**ca** having a beauty of f('c') + f('a') = 3 \nThere are 4 k-subsequences that have the maximum beauty, 3. \nHence, the answer is 4. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abbcd\", k = 4\n**Output:** 2\n**Explanation:** From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. \nThe k-subsequences of s are: \n**ab**b**cd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5\n**a**b**bcd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5 \nThere are 2 k-subsequences that have the maximum beauty, 5. \nHence, the answer is 2. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2 * 105`\n* `1 <= k <= s.length`\n* `s` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.7701704896370796}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.067452866753785}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.31390838059759}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.121675648885247}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.493456427052606}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.316586902533608}, {"name": "Codestral-22B-v0.1", "score": -6.544213958197556}, {"name": "deepseek-coder-33b-instruct", "score": -6.627707987278295}], "rank": [7, 0, 1, 3, 2, 4, 5, 6]}
{"id": "LeetCode/108", "prompt": "# Furthest Point From Origin\n\nYou are given a string `moves` of length `n` consisting only of characters `'L'`, `'R'`, and `'_'`. The string represents your movement on a number line starting from the origin `0`.\n\n\nIn the `ith` move, you can choose one of the following directions:\n\n\n* move to the left if `moves[i] = 'L'` or `moves[i] = '_'`\n* move to the right if `moves[i] = 'R'` or `moves[i] = '_'`\n\n\nReturn *the **distance from the origin** of the **furthest** point you can get to after* `n` *moves*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** moves = \"L_RL__R\"\n**Output:** 3\n**Explanation:** The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves \"LLRLLLR\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** moves = \"_R__LL_\"\n**Output:** 5\n**Explanation:** The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves \"LRLLLLL\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** moves = \"_______\"\n**Output:** 7\n**Explanation:** The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves \"RRRRRRR\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= moves.length == n <= 50`\n* `moves` consists only of characters `'L'`, `'R'` and `'_'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def furthestDistanceFromOrigin(self, moves: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.0923208947266643}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.7071631187964744}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.315722413851116}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.460652955129071}, {"name": "deepseek-coder-33b-instruct", "score": -4.514502260501274}, {"name": "Codestral-22B-v0.1", "score": -5.321203470334737}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.488259810473352}], "rank": [7, 0, 1, 4, 3, 6, 5, 2]}
{"id": "LeetCode/109", "prompt": "# Find the Minimum Possible Sum of a Beautiful Array\n\nYou are given positive integers `n` and `target`.\n\n\nAn array `nums` is **beautiful** if it meets the following conditions:\n\n\n* `nums.length == n`.\n* `nums` consists of pairwise **distinct** **positive** integers.\n* There doesn't exist two **distinct** indices, `i` and `j`, in the range `[0, n - 1]`, such that `nums[i] + nums[j] == target`.\n\n\nReturn *the **minimum** possible sum that a beautiful array could have modulo* `109 + 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2, target = 3\n**Output:** 4\n**Explanation:** We can see that nums = [1,3] is beautiful.\n- The array nums has length n = 2.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 4 is the minimum possible sum that a beautiful array could have.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, target = 3\n**Output:** 8\n**Explanation:** We can see that nums = [1,3,4] is beautiful.\n- The array nums has length n = 3.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 8 is the minimum possible sum that a beautiful array could have.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 1, target = 1\n**Output:** 1\n**Explanation:** We can see, that nums = [1] is beautiful.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 109`\n* `1 <= target <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumPossibleSum(self, n: int, target: int) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.2353436126968917}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.0841494512467644}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.734330717017854}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1802164012960645}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.342453859554058}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.84609468015649}, {"name": "CodeLlama-7b-Instruct-hf", "score": -6.018213580400533}, {"name": "deepseek-coder-33b-instruct", "score": -6.084462965941734}], "rank": [5, 7, 0, 1, 3, 4, 2, 6]}
{"id": "LeetCode/110", "prompt": "# Minimum Operations to Form Subsequence With Target Sum\n\nYou are given a **0-indexed** array `nums` consisting of **non-negative** powers of `2`, and an integer `target`.\n\n\nIn one operation, you must apply the following changes to the array:\n\n\n* Choose any element of the array `nums[i]` such that `nums[i] > 1`.\n* Remove `nums[i]` from the array.\n* Add **two** occurrences of `nums[i] / 2` to the **end** of `nums`.\n\n\nReturn the ***minimum number of operations** you need to perform so that* `nums` *contains a **subsequence** whose elements sum to* `target`. If it is impossible to obtain such a subsequence, return `-1`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,8], target = 7\n**Output:** 1\n**Explanation:** In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\nAt this stage, nums contains the subsequence [1,2,4] which sums up to 7.\nIt can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,32,1,2], target = 12\n**Output:** 2\n**Explanation:** In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\nIn the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\nAt this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\nIt can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,32,1], target = 35\n**Output:** -1\n**Explanation:** It can be shown that no sequence of operations results in a subsequence that sums up to 35.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 230`\n* `nums` consists only of non-negative powers of two.\n* `1 <= target < 231`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int], target: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.066013672454039}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.210426261414688}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.3496067434177705}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.943469324236398}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.8017436828320825}, {"name": "Codestral-22B-v0.1", "score": -6.028182130043144}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.363827783711029}, {"name": "deepseek-coder-33b-instruct", "score": -6.376584080550716}], "rank": [0, 7, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/111", "prompt": "# Maximize Value of Function in a Ball Passing Game\n\nYou are given a **0-indexed** integer array `receiver` of length `n` and an integer `k`.\n\n\nThere are `n` players having a **unique id** in the range `[0, n - 1]` who will play a ball passing game, and `receiver[i]` is the id of the player who receives passes from the player with id `i`. Players can pass to themselves, **i.e.** `receiver[i]` may be equal to `i`.\n\n\nYou must choose one of the `n` players as the starting player for the game, and the ball will be passed **exactly** `k` times starting from the chosen player.\n\n\nFor a chosen starting player having id `x`, we define a function `f(x)` that denotes the **sum** of `x` and the **ids** of all players who receive the ball during the `k` passes, **including repetitions**. In other words, `f(x) = x + receiver[x] + receiver[receiver[x]] + ... + receiver(k)[x]`.\n\n\nYour task is to choose a starting player having id `x` that **maximizes** the value of `f(x)`.\n\n\nReturn *an integer denoting the **maximum** value of the function.*\n\n\n**Note:** `receiver` may contain duplicates.\n\n\n \n\n\n**Example 1:**\n\n\n\n\n| Pass Number | Sender ID | Receiver ID | x + Receiver IDs |\n| --- | --- | --- | --- |\n|  |  |  | 2 |\n| 1 | 2 | 1 | 3 |\n| 2 | 1 | 0 | 3 |\n| 3 | 0 | 2 | 5 |\n| 4 | 2 | 1 | 6 |\n\n\n\n```\n\n**Input:** receiver = [2,0,1], k = 4\n**Output:** 6\n**Explanation:** The table above shows a simulation of the game starting with the player having id x = 2. \nFrom the table, f(2) is equal to 6. \nIt can be shown that 6 is the maximum achievable value of the function. \nHence, the output is 6. \n\n```\n\n**Example 2:**\n\n\n\n\n| Pass Number | Sender ID | Receiver ID | x + Receiver IDs |\n| --- | --- | --- | --- |\n|  |  |  | 4 |\n| 1 | 4 | 3 | 7 |\n| 2 | 3 | 2 | 9 |\n| 3 | 2 | 1 | 10 |\n\n\n\n```\n\n**Input:** receiver = [1,1,1,2,3], k = 3\n**Output:** 10\n**Explanation:** The table above shows a simulation of the game starting with the player having id x = 4. \nFrom the table, f(4) is equal to 10. \nIt can be shown that 10 is the maximum achievable value of the function. \nHence, the output is 10. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= receiver.length == n <= 105`\n* `0 <= receiver[i] <= n - 1`\n* `1 <= k <= 1010`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": -1.747601291512384}, {"name": "Codestral-22B-v0.1", "score": -3.2710603515710432}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.05926990893861}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.071280622623549}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.306852627859282}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.947132049022551}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.5721692411875825}, {"name": "deepseek-coder-33b-instruct", "score": -6.408225614957998}], "rank": [3, 5, 0, 1, 7, 4, 2, 6]}
{"id": "LeetCode/112", "prompt": "# Check if a String Is an Acronym of Words\n\nGiven an array of strings `words` and a string `s`, determine if `s` is an **acronym** of words.\n\n\nThe string `s` is considered an acronym of `words` if it can be formed by concatenating the **first** character of each string in `words` **in order**. For example, `\"ab\"` can be formed from `[\"apple\", \"banana\"]`, but it can't be formed from `[\"bear\", \"aardvark\"]`.\n\n\nReturn `true` *if* `s` *is an acronym of* `words`*, and* `false` *otherwise.* \n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\n**Output:** true\n**Explanation:** The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"an\",\"apple\"], s = \"a\"\n**Output:** false\n**Explanation:** The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\n**Output:** true\n**Explanation:** By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 100`\n* `1 <= words[i].length <= 10`\n* `1 <= s.length <= 100`\n* `words[i]` and `s` consist of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.4341953180001035}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.1265736581860493}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.9109915329043599}, {"name": "Codestral-22B-v0.1", "score": 0.3884502280570805}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-33b-instruct", "score": -0.7034715157324136}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4063839083494556}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.024143644121048}], "rank": [1, 4, 3, 5, 7, 6, 0, 2]}
{"id": "LeetCode/113", "prompt": "# Determine the Minimum Sum of a k-avoiding Array\n\nYou are given two integers, `n` and `k`.\n\n\nAn array of **distinct** positive integers is called a **k-avoiding** array if there does not exist any pair of distinct elements that sum to `k`.\n\n\nReturn *the **minimum** possible sum of a k-avoiding array of length* `n`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, k = 4\n**Output:** 18\n**Explanation:** Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, k = 6\n**Output:** 3\n**Explanation:** We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.4906301252403136}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.755509536411699}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9533184878353174}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.243649965205728}, {"name": "Codestral-22B-v0.1", "score": -5.785270291502469}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.96207693021339}, {"name": "deepseek-coder-33b-instruct", "score": -6.076393757893287}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.114991057391431}], "rank": [7, 0, 1, 3, 5, 2, 6, 4]}
{"id": "LeetCode/114", "prompt": "# Maximize the Profit as the Salesman\n\nYou are given an integer `n` representing the number of houses on a number line, numbered from `0` to `n - 1`.\n\n\nAdditionally, you are given a 2D integer array `offers` where `offers[i] = [starti, endi, goldi]`, indicating that `ith` buyer wants to buy all the houses from `starti` to `endi` for `goldi` amount of gold.\n\n\nAs a salesman, your goal is to **maximize** your earnings by strategically selecting and selling houses to buyers.\n\n\nReturn *the maximum amount of gold you can earn*.\n\n\n**Note** that different buyers can't buy the same house, and some houses may remain unsold.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\n**Output:** 3\n**Explanation:** There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\n**Output:** 10\n**Explanation:** There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2nd buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `1 <= offers.length <= 105`\n* `offers[i].length == 3`\n* `0 <= starti <= endi <= n - 1`\n* `1 <= goldi <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.5444295657861007}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3740929084451396}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.3897658340024406}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.050531989265448}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2484952420493585}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.8002105151898204}, {"name": "Codestral-22B-v0.1", "score": -4.902193374248663}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.504111279527133}], "rank": [6, 7, 4, 0, 1, 3, 5, 2]}
{"id": "LeetCode/115", "prompt": "# Find the Longest Equal Subarray\n\nYou are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nA subarray is called **equal** if all of its elements are equal. Note that the empty subarray is an **equal** subarray.\n\n\nReturn *the length of the **longest** possible equal subarray after deleting **at most*** `k` *elements from* `nums`.\n\n\nA **subarray** is a contiguous, possibly empty sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,3,1,3], k = 3\n**Output:** 3\n**Explanation:** It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,2,1,1], k = 2\n**Output:** 4\n**Explanation:** It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= nums.length`\n* `0 <= k <= nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def longestEqualSubarray(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -1.3343864973450814}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.235207347722423}, {"name": "deepseek-coder-33b-instruct", "score": -4.885092982706042}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.898832023078892}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.084034443666023}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.113408465463742}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.447138905494756}, {"name": "Codestral-22B-v0.1", "score": -6.070321937185477}], "rank": [0, 1, 6, 4, 3, 2, 7, 5]}
{"id": "LeetCode/116", "prompt": "# Count Pairs Whose Sum is Less than Target\n\nGiven a **0-indexed** integer array `nums` of length `n` and an integer `target`, return *the number of pairs* `(i, j)` *where* `0 <= i < j < n` *and* `nums[i] + nums[j] < target`.\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,1,2,3,1], target = 2\n**Output:** 3\n**Explanation:** There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target \n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-6,2,5,-2,-7,-1,3], target = -2\n**Output:** 10\n**Explanation:** There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length == n <= 50`\n* `-50 <= nums[i], target <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countPairs(self, nums: List[int], target: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.197224577336219}, {"name": "Codestral-22B-v0.1", "score": 1.0373765779192219}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.0360343834692536}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9274293898398991}, {"name": "deepseek-coder-33b-instruct", "score": 0.5427720329333914}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.11633917628132595}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0060132472234517564}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.379301595250719}], "rank": [1, 5, 3, 4, 6, 0, 7, 2]}
{"id": "LeetCode/117", "prompt": "# Make String a Subsequence Using Cyclic Increments\n\nYou are given two **0-indexed** strings `str1` and `str2`.\n\n\nIn an operation, you select a **set** of indices in `str1`, and for each index `i` in the set, increment `str1[i]` to the next character **cyclically**. That is `'a'` becomes `'b'`, `'b'` becomes `'c'`, and so on, and `'z'` becomes `'a'`.\n\n\nReturn `true` *if it is possible to make* `str2` *a subsequence of* `str1` *by performing the operation **at most once***, *and* `false` *otherwise*.\n\n\n**Note:** A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** str1 = \"abc\", str2 = \"ad\"\n**Output:** true\n**Explanation:** Select index 2 in str1.\nIncrement str1[2] to become 'd'. \nHence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** str1 = \"zc\", str2 = \"ad\"\n**Output:** true\n**Explanation:** Select indices 0 and 1 in str1. \nIncrement str1[0] to become 'a'. \nIncrement str1[1] to become 'd'. \nHence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** str1 = \"ab\", str2 = \"d\"\n**Output:** false\n**Explanation:** In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. \nTherefore, false is returned.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= str1.length <= 105`\n* `1 <= str2.length <= 105`\n* `str1` and `str2` consist of only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.053415343263411685}, {"name": "deepseek-coder-33b-instruct", "score": -3.507075813560559}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.896949975930625}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2675132478851205}, {"name": "Codestral-22B-v0.1", "score": -4.715273573847838}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.749166628460378}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.0391480890476}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.289478417880832}], "rank": [7, 6, 0, 1, 5, 3, 4, 2]}
{"id": "LeetCode/118", "prompt": "# Sorting Three Groups\n\nYou are given a **0-indexed** integer array `nums` of length `n`.  \n\n  \n\nThe numbers from `0` to `n - 1` are divided into three groups numbered from `1` to `3`, where number `i` belongs to group `nums[i]`. Notice that some groups may be **empty**.  \n\n  \n\nYou are allowed to perform this operation any number of times:\n\n\n* Pick number `x` and change its group. More formally, change `nums[x]` to any number from `1` to `3`.\n\n\nA new array `res` is constructed using the following procedure:\n\n\n1. Sort the numbers in each group independently.\n2. Append the elements of groups `1`, `2`, and `3` to `res` **in this order**.\n\n\nArray `nums` is called a **beautiful array** if the constructed array `res` is sorted in **non-decreasing** order.\n\n\nReturn *the **minimum** number of operations to make* `nums` *a **beautiful array***.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,2,1]\n**Output:** 3\n**Explanation:** It's optimal to perform three operations:\n1. change nums[0] to 1.\n2. change nums[2] to 1.\n3. change nums[3] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than three operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,1,3,3]\n**Output:** 2\n**Explanation:** It's optimal to perform two operations:\n1. change nums[1] to 1.\n2. change nums[2] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3], group 2 becomes empty, and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than two operations.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,2,2,2,3,3]\n**Output:** 0\n**Explanation:** It's optimal to not perform operations.\nAfter sorting the numbers in each group, group 1 becomes empty, group 2 becomes equal to [0,1,2,3] and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 3`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.086917046393304}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.186194215851979}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.526646324283825}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.458648905450376}, {"name": "Codestral-22B-v0.1", "score": -6.005958993258434}, {"name": "deepseek-coder-33b-instruct", "score": -6.039854631256074}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.343782011005254}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.078692276909453}], "rank": [1, 0, 3, 2, 5, 6, 4, 7]}
{"id": "LeetCode/119", "prompt": "# Number of Beautiful Integers in the Range\n\nYou are given positive integers `low`, `high`, and `k`.\n\n\nA number is **beautiful** if it meets both of the following conditions:\n\n\n* The count of even digits in the number is equal to the count of odd digits.\n* The number is divisible by `k`.\n\n\nReturn *the number of beautiful integers in the range* `[low, high]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** low = 10, high = 20, k = 3\n**Output:** 2\n**Explanation:** There are 2 beautiful integers in the given range: [12,18]. \n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** low = 1, high = 10, k = 1\n**Output:** 1\n**Explanation:** There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** low = 5, high = 5, k = 2\n**Output:** 0\n**Explanation:** There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `0 < low <= high <= 109`\n* `0 < k <= 20`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.815291652920429}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.9917569673829036}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.0103765733653596}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.03933936222461}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.14865659199363}, {"name": "Codestral-22B-v0.1", "score": -6.497212300283385}, {"name": "deepseek-coder-33b-instruct", "score": -6.825798741103327}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.040151027006366}], "rank": [4, 0, 1, 3, 2, 5, 6, 7]}
{"id": "LeetCode/120", "prompt": "# Max Pair Sum in an Array\n\nYou are given a **0-indexed** integer array `nums`. You have to find the **maximum** sum of a pair of numbers from `nums` such that the maximum **digit** in both numbers are equal.\n\n\nReturn *the maximum sum or* `-1` *if no such pair exists*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [51,71,17,24,42]\n**Output:** 88\n**Explanation:** \nFor i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. \nFor i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.\nIt can be shown that there are no other pairs with equal maximum digits, so the answer is 88.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** -1\n**Explanation:** No pair exists in nums with equal maximum digits.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSum(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.8822171416252118}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5847803583729876}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-33b-instruct", "score": -0.8970077786385042}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.9435696487116365}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.809059614370041}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.877698010668195}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3828607004232865}], "rank": [5, 4, 7, 6, 1, 0, 3, 2]}
{"id": "LeetCode/121", "prompt": "# Minimum Absolute Difference Between Elements With Constraint\n\nYou are given a **0-indexed** integer array `nums` and an integer `x`.\n\n\nFind the **minimum absolute difference** between two elements in the array that are at least `x` indices apart.\n\n\nIn other words, find two indices `i` and `j` such that `abs(i - j) >= x` and `abs(nums[i] - nums[j])` is minimized.\n\n\nReturn *an integer denoting the **minimum** absolute difference between two elements that are at least* `x` *indices apart*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,4], x = 2\n**Output:** 0\n**Explanation:** We can select nums[0] = 4 and nums[3] = 4. \nThey are at least 2 indices apart, and their absolute difference is the minimum, 0. \nIt can be shown that 0 is the optimal answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,3,2,10,15], x = 1\n**Output:** 1\n**Explanation:** We can select nums[1] = 3 and nums[2] = 2.\nThey are at least 1 index apart, and their absolute difference is the minimum, 1.\nIt can be shown that 1 is the optimal answer.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], x = 3\n**Output:** 3\n**Explanation:** We can select nums[0] = 1 and nums[3] = 4.\nThey are at least 3 indices apart, and their absolute difference is the minimum, 3.\nIt can be shown that 3 is the optimal answer.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `0 <= x < nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minAbsoluteDifference(self, nums: List[int], x: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -2.1444297678217445}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.8061209650046433}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9359738795839325}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.186619838331271}, {"name": "Codestral-22B-v0.1", "score": -4.513128946356824}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.696691378455549}, {"name": "deepseek-coder-33b-instruct", "score": -6.185393476943652}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.8045125192953115}], "rank": [4, 2, 0, 1, 5, 3, 6, 7]}
{"id": "LeetCode/122", "prompt": "# Apply Operations to Maximize Score\n\nYou are given an array `nums` of `n` positive integers and an integer `k`.\n\n\nInitially, you start with a score of `1`. You have to maximize your score by applying the following operation at most `k` times:\n\n\n* Choose any **non-empty** subarray `nums[l, ..., r]` that you haven't chosen previously.\n* Choose an element `x` of `nums[l, ..., r]` with the highest **prime score**. If multiple such elements exist, choose the one with the smallest index.\n* Multiply your score by `x`.\n\n\nHere, `nums[l, ..., r]` denotes the subarray of `nums` starting at index `l` and ending at the index `r`, both ends being inclusive.\n\n\nThe **prime score** of an integer `x` is equal to the number of distinct prime factors of `x`. For example, the prime score of `300` is `3` since `300 = 2 * 2 * 3 * 5 * 5`.\n\n\nReturn *the **maximum possible score** after applying at most* `k` *operations*.\n\n\nSince the answer may be large, return it modulo `109 + 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,3,9,3,8], k = 2\n**Output:** 81\n**Explanation:** To get a score of 81, we can apply the following operations:\n- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\nIt can be proven that 81 is the highest score one can obtain.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [19,12,14,6,10,18], k = 3\n**Output:** 4788\n**Explanation:** To get a score of 4788, we can apply the following operations: \n- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\nIt can be proven that 4788 is the highest score one can obtain.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length == n <= 105`\n* `1 <= nums[i] <= 105`\n* `1 <= k <= min(n * (n + 1) / 2, 109)`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumScore(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.187045279733137}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.310877559100353}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.535477069386746}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.726912892045055}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.814822829445192}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.529430517026145}, {"name": "deepseek-coder-33b-instruct", "score": -6.5615453848911685}, {"name": "Codestral-22B-v0.1", "score": -6.782815444426288}], "rank": [0, 7, 1, 2, 3, 4, 6, 5]}
{"id": "LeetCode/123", "prompt": "# Faulty Keyboard\n\nYour laptop keyboard is faulty, and whenever you type a character `'i'` on it, it reverses the string that you have written. Typing other characters works as expected.\n\n\nYou are given a **0-indexed** string `s`, and you type each character of `s` using your faulty keyboard.\n\n\nReturn *the final string that will be present on your laptop screen.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"string\"\n**Output:** \"rtsng\"\n**Explanation:** \nAfter typing first character, the text on the screen is \"s\".\nAfter the second character, the text is \"st\". \nAfter the third character, the text is \"str\".\nSince the fourth character is an 'i', the text gets reversed and becomes \"rts\".\nAfter the fifth character, the text is \"rtsn\". \nAfter the sixth character, the text is \"rtsng\". \nTherefore, we return \"rtsng\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"poiinter\"\n**Output:** \"ponter\"\n**Explanation:** \nAfter the first character, the text on the screen is \"p\".\nAfter the second character, the text is \"po\". \nSince the third character you type is an 'i', the text gets reversed and becomes \"op\". \nSince the fourth character you type is an 'i', the text gets reversed and becomes \"po\".\nAfter the fifth character, the text is \"pon\".\nAfter the sixth character, the text is \"pont\". \nAfter the seventh character, the text is \"ponte\". \nAfter the eighth character, the text is \"ponter\". \nTherefore, we return \"ponter\".\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists of lowercase English letters.\n* `s[0] != 'i'`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def finalString(self, s: str) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.267132513431489}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8634208235889287}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.256463411698536}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.47387628830376}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.732824341439738}, {"name": "Codestral-22B-v0.1", "score": -5.473362514371215}, {"name": "deepseek-coder-33b-instruct", "score": -5.722525717473336}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.259872052815066}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "LeetCode/124", "prompt": "# Check if it is Possible to Split Array\n\nYou are given an array `nums` of length `n` and an integer `m`. You need to determine if it is possible to split the array into `n` **non-empty** arrays by performing a series of steps.\n\n\nIn each step, you can select an existing array (which may be the result of previous steps) with a length of **at least two** and split it into **two** subarrays, if, **for each** resulting subarray, **at least** one of the following holds:\n\n\n* The length of the subarray is one, or\n* The sum of elements of the subarray is **greater than or equal** to `m`.\n\n\nReturn `true` *if you can split the given array into* `n` *arrays, otherwise return* `false`.\n\n\n**Note:** A subarray is *a contiguous non-empty sequence of elements within an array*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2, 2, 1], m = 4\n**Output:** true\n**Explanation:** We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2, 1, 3], m = 5 \n**Output:** false\n**Explanation:** We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2, 3, 3, 2, 3], m = 6\n**Output:** true\n**Explanation:** We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= m <= 200`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canSplitArray(self, nums: List[int], m: int) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.12338488363276756}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.048091177704639}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.296141895516712}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.676783620797624}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.668030936949052}, {"name": "Codestral-22B-v0.1", "score": -6.16091191941833}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.19417679354967}, {"name": "deepseek-coder-33b-instruct", "score": -6.489162377228415}], "rank": [7, 0, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/125", "prompt": "# Maximum Elegance of a K-Length Subsequence\n\nYou are given a **0-indexed** 2D integer array `items` of length `n` and an integer `k`.\n\n\n`items[i] = [profiti, categoryi]`, where `profiti` and `categoryi` denote the profit and category of the `ith` item respectively.\n\n\nLet's define the **elegance** of a **subsequence** of `items` as `total_profit + distinct_categories2`, where `total_profit` is the sum of all profits in the subsequence, and `distinct_categories` is the number of **distinct** categories from all the categories in the selected subsequence.\n\n\nYour task is to find the **maximum elegance** from all subsequences of size `k` in `items`.\n\n\nReturn *an integer denoting the maximum elegance of a subsequence of* `items` *with size exactly* `k`.\n\n\n**Note:** A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** items = [[3,2],[5,1],[10,1]], k = 2\n**Output:** 17\n**Explanation:** In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** items = [[3,1],[3,1],[2,2],[5,3]], k = 3\n**Output:** 19\n**Explanation:** In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** items = [[1,1],[2,1],[3,1]], k = 3\n**Output:** 7\n**Explanation:** In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 12 = 7.  \n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= items.length == n <= 105`\n* `items[i].length == 2`\n* `items[i][0] == profiti`\n* `items[i][1] == categoryi`\n* `1 <= profiti <= 109`\n* `1 <= categoryi <= n`\n* `1 <= k <= n`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.12636111531016603}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.037774210733707}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.41129413235445}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.67932583422221}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.820854146242039}, {"name": "deepseek-coder-33b-instruct", "score": -6.309670974922302}, {"name": "Codestral-22B-v0.1", "score": -6.409549686572248}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4884508476836045}], "rank": [7, 0, 1, 3, 2, 6, 5, 4]}
{"id": "LeetCode/126", "prompt": "# Account Balance After Rounded Purchase\n\nInitially, you have a bank account balance of `100` dollars.\n\n\nYou are given an integer `purchaseAmount` representing the amount you will spend on a purchase in dollars.\n\n\nAt the store where you will make the purchase, the purchase amount is rounded to the **nearest multiple** of `10`. In other words, you pay a **non-negative** amount, `roundedAmount`, such that `roundedAmount` is a multiple of `10` and `abs(roundedAmount - purchaseAmount)` is **minimized**.\n\n\nIf there is more than one nearest multiple of `10`, the **largest multiple** is chosen.\n\n\nReturn *an integer denoting your account balance after making a purchase worth* `purchaseAmount` *dollars from the store.*\n\n\n**Note:** `0` is considered to be a multiple of `10` in this problem.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** purchaseAmount = 9\n**Output:** 90\n**Explanation:** In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** purchaseAmount = 15\n**Output:** 80\n**Explanation:** In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.\nHence, your account balance becomes 100 - 20 = 80.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `0 <= purchaseAmount <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def accountBalanceAfterPurchase(self, purchaseAmount: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 0.7044337032873962}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.1517711101031125}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.949923755764885}, {"name": "Codestral-22B-v0.1", "score": -4.1776383200414315}, {"name": "deepseek-coder-33b-instruct", "score": -4.292137280496625}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.458987675810009}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.613138355637268}], "rank": [0, 7, 1, 4, 5, 6, 3, 2]}
{"id": "LeetCode/127", "prompt": "# Minimum Seconds to Equalize a Circular Array\n\nYou are given a **0-indexed** array `nums` containing `n` integers.\n\n\nAt each second, you perform the following operation on the array:\n\n\n* For every index `i` in the range `[0, n - 1]`, replace `nums[i]` with either `nums[i]`, `nums[(i - 1 + n) % n]`, or `nums[(i + 1) % n]`.\n\n\n**Note** that all the elements get replaced simultaneously.\n\n\nReturn *the **minimum** number of seconds needed to make all elements in the array* `nums` *equal*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,2]\n**Output:** 1\n**Explanation:** We can equalize the array in 1 second in the following way:\n- At 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\nIt can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,3,2]\n**Output:** 2\n**Explanation:** We can equalize the array in 2 seconds in the following way:\n- At 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n- At 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\nIt can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,5,5,5]\n**Output:** 0\n**Explanation:** We don't need to perform any operations as all elements in the initial array are the same.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumSeconds(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.7249220454608656}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.06071883457244}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.462315465902685}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.8629314397519785}, {"name": "deepseek-coder-33b-instruct", "score": -4.926151320781364}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.503085112171821}, {"name": "Codestral-22B-v0.1", "score": -5.968272682831306}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.717577341490387}], "rank": [0, 1, 3, 4, 6, 2, 5, 7]}
{"id": "LeetCode/128", "prompt": "# Minimum Time to Make Array Sum At Most x\n\nYou are given two **0-indexed** integer arrays `nums1` and `nums2` of equal length. Every second, for all indices `0 <= i < nums1.length`, value of `nums1[i]` is incremented by `nums2[i]`. **After** this is done, you can do the following operation:\n\n\n* Choose an index `0 <= i < nums1.length` and make `nums1[i] = 0`.\n\n\nYou are also given an integer `x`.\n\n\nReturn *the **minimum** time in which you can make the sum of all elements of* `nums1` *to be **less than or equal** to* `x`, *or* `-1` *if this is not possible.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3], nums2 = [1,2,3], x = 4\n**Output:** 3\n**Explanation:** \nFor the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. \nFor the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. \nFor the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. \nNow sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3], nums2 = [3,3,3], x = 4\n**Output:** -1\n**Explanation:** It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums1.length <= 103`\n* `1 <= nums1[i] <= 103`\n* `0 <= nums2[i] <= 103`\n* `nums1.length == nums2.length`\n* `0 <= x <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.278054044290903}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.408571189895993}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.053234907715073}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4661342371391095}, {"name": "Codestral-22B-v0.1", "score": -6.2705535547042395}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.383965988824287}, {"name": "deepseek-coder-33b-instruct", "score": -6.557261194118485}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.004649657825715}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/129", "prompt": "# Number of Employees Who Met the Target\n\nThere are `n` employees in a company, numbered from `0` to `n - 1`. Each employee `i` has worked for `hours[i]` hours in the company.\n\n\nThe company requires each employee to work for **at least** `target` hours.\n\n\nYou are given a **0-indexed** array of non-negative integers `hours` of length `n` and a non-negative integer `target`.\n\n\nReturn *the integer denoting the number of employees who worked at least* `target` *hours*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** hours = [0,1,2,3,4], target = 2\n**Output:** 3\n**Explanation:** The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** hours = [5,1,4,2,2], target = 6\n**Output:** 0\n**Explanation:** The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == hours.length <= 50`\n* `0 <= hours[i], target <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.3074035023757946}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.553185490541295}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.5938458176742643}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.4432175085195116}, {"name": "Codestral-22B-v0.1", "score": 1.231735601303293}, {"name": "deepseek-coder-33b-instruct", "score": 0.9038682118755981}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.07306578125058305}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}], "rank": [0, 1, 4, 2, 5, 6, 3, 7]}
{"id": "LeetCode/130", "prompt": "# Count Complete Subarrays in an Array\n\nYou are given an array `nums` consisting of **positive** integers.\n\n\nWe call a subarray of an array **complete** if the following condition is satisfied:\n\n\n* The number of **distinct** elements in the subarray is equal to the number of distinct elements in the whole array.\n\n\nReturn *the number of **complete** subarrays*.\n\n\nA **subarray** is a contiguous non-empty part of an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,1,2,2]\n**Output:** 4\n**Explanation:** The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,5,5,5]\n**Output:** 10\n**Explanation:** The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 2000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countCompleteSubarrays(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 1.5848508446099667}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7436436477987973}, {"name": "Codestral-22B-v0.1", "score": -2.0107254406125996}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.1044828109275278}, {"name": "deepseek-coder-33b-instruct", "score": -2.2051712655084525}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.572440775878581}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.354295660935571}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.7536387370076305}], "rank": [0, 4, 5, 3, 6, 7, 1, 2]}
{"id": "LeetCode/131", "prompt": "# Shortest String That Contains Three Strings\n\nGiven three strings `a`, `b`, and `c`, your task is to find a string that has the **minimum** length and contains all three strings as **substrings**.\nIf there are multiple such strings, return the**lexicographicallysmallest** one.\n\n\nReturn *a string denoting the answer to the problem.*\n\n\n**Notes**\n\n\n* A string `a` is **lexicographically smaller** than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears **earlier** in the alphabet than the corresponding letter in `b`.\n* A **substring** is a contiguous sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** a = \"abc\", b = \"bca\", c = \"aaa\"\n**Output:** \"aaabca\"\n**Explanation:**  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** a = \"ab\", b = \"ba\", c = \"aba\"\n**Output:** \"aba\"\n**Explanation:** We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= a.length, b.length, c.length <= 100`\n* `a`, `b`, `c` consist only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.292320721589388}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.6619285198067}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.903940555425293}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.287539493376158}, {"name": "Codestral-22B-v0.1", "score": -6.1435201767064616}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.374929414936479}, {"name": "deepseek-coder-33b-instruct", "score": -6.625705316381985}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.8345133932057704}], "rank": [0, 1, 2, 3, 5, 4, 6, 7]}
{"id": "LeetCode/132", "prompt": "# Count Stepping Numbers in Range\n\nGiven two positive integers `low` and `high` represented as strings, find the count of **stepping numbers** in the inclusive range `[low, high]`.\n\n\nA **stepping number** is an integer such that all of its adjacent digits have an absolute difference of **exactly** `1`.\n\n\nReturn *an integer denoting the count of stepping numbers in the inclusive range* `[low, high]`*.* \n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n**Note:** A stepping number should not have a leading zero.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** low = \"1\", high = \"11\"\n**Output:** 10\n**Explanation:** The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** low = \"90\", high = \"101\"\n**Output:** 2\n**Explanation:** The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. \n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= int(low) <= int(high) < 10100`\n* `1 <= low.length, high.length <= 100`\n* `low` and `high` consist of only digits.\n* `low` and `high` don't have any leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSteppingNumbers(self, low: str, high: str) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -1.8112154227477104}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.250810627841658}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.5130110364693}, {"name": "Codestral-22B-v0.1", "score": -4.97012601645595}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.617686751468262}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.632887795879653}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.333606395349378}, {"name": "deepseek-coder-33b-instruct", "score": -6.705311011670833}], "rank": [0, 3, 1, 5, 7, 2, 4, 6]}
{"id": "LeetCode/133", "prompt": "# Split Strings by Separator\n\nGiven an array of strings `words` and a character `separator`, **split** each string in `words` by `separator`.\n\n\nReturn *an array of strings containing the new strings formed after the splits, **excluding empty strings**.*\n\n\n**Notes**\n\n\n* `separator` is used to determine where the split should occur, but it is not included as part of the resulting strings.\n* A split may result in more than two strings.\n* The resulting strings must maintain the same order as they were initially given.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\"\n**Output:** [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]\n**Explanation:** In this example we split as follows:\n\n\"one.two.three\" splits into \"one\", \"two\", \"three\"\n\"four.five\" splits into \"four\", \"five\"\n\"six\" splits into \"six\" \n\nHence, the resulting array is [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"$easy$\",\"$problem$\"], separator = \"$\"\n**Output:** [\"easy\",\"problem\"]\n**Explanation:** In this example we split as follows: \n\n\"$easy$\" splits into \"easy\" (excluding empty strings)\n\"$problem$\" splits into \"problem\" (excluding empty strings)\n\nHence, the resulting array is [\"easy\",\"problem\"].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"|||\"], separator = \"|\"\n**Output:** []\n**Explanation:** In this example the resulting split of \"|||\" will contain only empty strings, so we return an empty array []. \n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 100`\n* `1 <= words[i].length <= 20`\n* characters in `words[i]` are either lowercase English letters or characters from the string `\".,|$#@\"` (excluding the quotes)\n* `separator` is a character from the string `\".,|$#@\"` (excluding the quotes)\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.351040641132247}, {"name": "Yi-Coder-1.5B-Chat", "score": 1.4720637865883268}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.2348520419288374}, {"name": "Codestral-22B-v0.1", "score": 0.6307953811248703}, {"name": "deepseek-coder-33b-instruct", "score": 0.599298455162617}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.3519404219390925}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.561845061249717}], "rank": [1, 0, 4, 5, 6, 7, 3, 2]}
{"id": "LeetCode/134", "prompt": "# Largest Element in an Array after Merge Operations\n\nYou are given a **0-indexed** array `nums` consisting of positive integers.\n\n\nYou can do the following operation on the array **any** number of times:\n\n\n* Choose an integer `i` such that `0 <= i < nums.length - 1` and `nums[i] <= nums[i + 1]`. Replace the element `nums[i + 1]` with `nums[i] + nums[i + 1]` and delete the element `nums[i]` from the array.\n\n\nReturn *the value of the **largest** element that you can possibly obtain in the final array.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,7,9,3]\n**Output:** 21\n**Explanation:** We can apply the following operations on the array:\n- Choose i = 0. The resulting array will be nums = [5,7,9,3].\n- Choose i = 1. The resulting array will be nums = [5,16,3].\n- Choose i = 0. The resulting array will be nums = [21,3].\nThe largest element in the final array is 21. It can be shown that we cannot obtain a larger element.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,3,3]\n**Output:** 11\n**Explanation:** We can do the following operations on the array:\n- Choose i = 1. The resulting array will be nums = [5,6].\n- Choose i = 0. The resulting array will be nums = [11].\nThere is only one element in the final array, which is 11.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxArrayValue(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.0954321989649838}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.37551415913147057}, {"name": "deepseek-coder-33b-instruct", "score": -0.6200595964108757}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.1487788729304294}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.821666306953477}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.084563550366995}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.911124303227321}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.6723743634965205}], "rank": [5, 0, 6, 4, 7, 1, 3, 2]}
{"id": "LeetCode/135", "prompt": "# Maximum Number of Groups With Increasing Length\n\nYou are given a **0-indexed** array `usageLimits` of length `n`.\n\n\nYour task is to create **groups** using numbers from `0` to `n - 1`, ensuring that each number, `i`, is used no more than `usageLimits[i]` times in total **across all groups**. You must also satisfy the following conditions:\n\n\n* Each group must consist of **distinct** numbers, meaning that no duplicate numbers are allowed within a single group.\n* Each group (except the first one) must have a length **strictly greater** than the previous group.\n\n\nReturn *an integer denoting the **maximum** number of groups you can create while satisfying these conditions.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** usageLimits = [1,2,5]\n**Output:** 3\n**Explanation:** In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.\nOne way of creating the maximum number of groups while satisfying the conditions is: \nGroup 1 contains the number [2].\nGroup 2 contains the numbers [1,2].\nGroup 3 contains the numbers [0,1,2]. \nIt can be shown that the maximum number of groups is 3. \nSo, the output is 3. \n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** usageLimits = [2,1,2]\n**Output:** 2\n**Explanation:** In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nGroup 2 contains the numbers [1,2].\nIt can be shown that the maximum number of groups is 2.\nSo, the output is 2. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** usageLimits = [1,1]\n**Output:** 1\n**Explanation:** In this example, we can use both 0 and 1 at most once.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nIt can be shown that the maximum number of groups is 1.\nSo, the output is 1. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= usageLimits.length <= 105`\n* `1 <= usageLimits[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxIncreasingGroups(self, usageLimits: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -2.1128906670313095}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.6397377022968165}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7242465979512276}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.174202637467504}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.386416982975174}, {"name": "Codestral-22B-v0.1", "score": -4.691012732087999}, {"name": "deepseek-coder-33b-instruct", "score": -4.768664997119769}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.561250699834379}], "rank": [4, 7, 0, 1, 3, 5, 6, 2]}
{"id": "LeetCode/136", "prompt": "# Check if Array is Good\n\nYou are given an integer array `nums`. We consider an array **good** if it is a permutation of an array `base[n]`.\n\n\n`base[n] = [1, 2, ..., n - 1, n, n]` (in other words, it is an array of length `n + 1` which contains `1` to `n - 1` exactly once, plus two occurrences of `n`). For example, `base[1] = [1, 1]` and `base[3] = [1, 2, 3, 3]`.\n\n\nReturn `true` *if the given array is good, otherwise return*`false`.\n\n\n**Note:** A permutation of integers represents an arrangement of these numbers.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2, 1, 3]\n**Output:** false\n**Explanation:** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1, 3, 3, 2]\n**Output:** true\n**Explanation:** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1, 1]\n**Output:** true\n**Explanation:** Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.\n```\n\n**Example 4:**\n\n\n\n```\n\n**Input:** nums = [3, 4, 4, 1, 2, 1]\n**Output:** false\n**Explanation:** Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= num[i] <= 200`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def isGood(self, nums: List[int]) -> bool:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.10813110105957335}, {"name": "deepseek-coder-33b-instruct", "score": -0.6460935432923103}, {"name": "Codestral-22B-v0.1", "score": -2.0014434278415414}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.6256995125287093}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.2153600068360806}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.2345916813082036}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.360221169862852}], "rank": [4, 7, 6, 5, 1, 3, 0, 2]}
{"id": "LeetCode/137", "prompt": "# Sort Vowels in a String\n\nGiven a **0-indexed** string `s`, **permute** `s` to get a new string `t` such that:\n\n\n* All consonants remain in their original places. More formally, if there is an index `i` with `0 <= i < s.length` such that `s[i]` is a consonant, then `t[i] = s[i]`.\n* The vowels must be sorted in the **nondecreasing** order of their **ASCII** values. More formally, for pairs of indices `i`, `j` with `0 <= i < j < s.length` such that `s[i]` and `s[j]` are vowels, then `t[i]` must not have a higher ASCII value than `t[j]`.\n\n\nReturn *the resulting string*.\n\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"lEetcOde\"\n**Output:** \"lEOtcede\"\n**Explanation:** 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"lYmpH\"\n**Output:** \"lYmpH\"\n**Explanation:** There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists only of letters of the English alphabet in **uppercase and lowercase**.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sortVowels(self, s: str) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.5633162311385904}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1133625680578625}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.386416982975174}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.018047753811709}, {"name": "Codestral-22B-v0.1", "score": -5.507848690442384}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.910211106793389}, {"name": "deepseek-coder-33b-instruct", "score": -5.9308861742220484}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.523791354805733}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/138", "prompt": "# Visit Array Positions to Maximize Score\n\nYou are given a **0-indexed** integer array `nums` and a positive integer `x`.\n\n\nYou are **initially** at position `0` in the array and you can visit other positions according to the following rules:\n\n\n* If you are currently in position `i`, then you can move to **any** position `j` such that `i < j`.\n* For each position `i` that you visit, you get a score of `nums[i]`.\n* If you move from a position `i` to a position `j` and the **parities** of `nums[i]` and `nums[j]` differ, then you lose a score of `x`.\n\n\nReturn *the **maximum** total score you can get*.\n\n\n**Note** that initially you have `nums[0]` points.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,6,1,9,2], x = 5\n**Output:** 13\n**Explanation:** We can visit the following positions in the array: 0 -> 2 -> 3 -> 4.\nThe corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5.\nThe total score will be: 2 + 6 + 1 + 9 - 5 = 13.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,6,8], x = 3\n**Output:** 20\n**Explanation:** All the integers in the array have the same parities, so we can visit all of them without losing any score.\nThe total score is: 2 + 4 + 6 + 8 = 20.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `1 <= nums[i], x <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.15423470991007715}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5848477494907467}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1013863770111465}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.105548232729426}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.590015938216414}, {"name": "deepseek-coder-33b-instruct", "score": -4.923129132598855}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.593029668921018}, {"name": "Codestral-22B-v0.1", "score": -6.44094654063292}], "rank": [7, 4, 1, 0, 3, 6, 2, 5]}
{"id": "LeetCode/139", "prompt": "# Ways to Express an Integer as Sum of Powers\n\nGiven two **positive** integers `n` and `x`.\n\n\nReturn *the number of ways* `n` *can be expressed as the sum of the* `xth` *power of **unique** positive integers, in other words, the number of sets of unique integers* `[n1, n2, ..., nk]` *where* `n = n1x + n2x + ... + nkx`*.*\n\n\nSince the result can be very large, return it modulo `109 + 7`.\n\n\nFor example, if `n = 160` and `x = 3`, one way to express `n` is `n = 23 + 33 + 53`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10, x = 2\n**Output:** 1\n**Explanation:** We can express n as the following: n = 32 + 12 = 10.\nIt can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, x = 1\n**Output:** 2\n**Explanation:** We can express n in the following ways:\n- n = 41 = 4.\n- n = 31 + 11 = 4.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 300`\n* `1 <= x <= 5`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfWays(self, n: int, x: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.7541842727359214}, {"name": "deepseek-coder-33b-instruct", "score": -1.9720810779325033}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.692948583525413}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.915440986640829}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9751104742984023}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.22870061472118}, {"name": "Codestral-22B-v0.1", "score": -5.84586057324919}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.855610459113814}], "rank": [4, 6, 7, 3, 0, 1, 5, 2]}
{"id": "LeetCode/140", "prompt": "# Sum of Squares of Special Elements \n\nYou are given a **1-indexed** integer array `nums` of length `n`.\n\n\nAn element `nums[i]` of `nums` is called **special** if `i` divides `n`, i.e. `n % i == 0`.\n\n\nReturn *the **sum of the squares** of all **special** elements of* `nums`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 21\n**Explanation:** There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.  \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,7,1,19,18,3]\n**Output:** 63\n**Explanation:** There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length == n <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumOfSquares(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.3695812216600505}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.4056258181381978}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.12318048568694895}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.2765153629846502}, {"name": "deepseek-coder-33b-instruct", "score": -3.036978707178446}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.136189626249247}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.712229258281499}], "rank": [3, 4, 7, 5, 1, 6, 0, 2]}
{"id": "LeetCode/141", "prompt": "# Maximum Beauty of an Array After Applying Operation\n\nYou are given a **0-indexed** array `nums` and a **non-negative** integer `k`.\n\n\nIn one operation, you can do the following:\n\n\n* Choose an index `i` that **hasn't been chosen before** from the range `[0, nums.length - 1]`.\n* Replace `nums[i]` with any integer from the range `[nums[i] - k, nums[i] + k]`.\n\n\nThe **beauty** of the array is the length of the longest subsequence consisting of equal elements.\n\n\nReturn *the **maximum** possible beauty of the array* `nums` *after applying the operation any number of times.*\n\n\n**Note** that you can apply the operation to each index **only once**.\n\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,6,1,2], k = 2\n**Output:** 3\n**Explanation:** In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1], k = 10\n**Output:** 4\n**Explanation:** In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array).\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.8051797863255805}, {"name": "deepseek-coder-33b-instruct", "score": 0.6573208083914599}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.053599691222954604}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.160509250912571}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.048091177704639}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.300328390689376}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.919572083139253}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.364554444321189}], "rank": [5, 6, 7, 4, 0, 1, 3, 2]}
{"id": "LeetCode/142", "prompt": "# Minimum Index of a Valid Split\n\nAn element `x` of an integer array `arr` of length `m` is **dominant** if `freq(x) * 2 > m`, where `freq(x)` is the number of occurrences of `x` in `arr`. Note that this definition implies that `arr` can have **at most one** dominant element.\n\n\nYou are given a **0-indexed** integer array `nums` of length `n` with one dominant element.\n\n\nYou can split `nums` at an index `i` into two arrays `nums[0, ..., i]` and `nums[i + 1, ..., n - 1]`, but the split is only **valid** if:\n\n\n* `0 <= i < n - 1`\n* `nums[0, ..., i]`, and `nums[i + 1, ..., n - 1]` have the same dominant element.\n\n\nHere, `nums[i, ..., j]` denotes the subarray of `nums` starting at index `i` and ending at index `j`, both ends being inclusive. Particularly, if `j < i` then `nums[i, ..., j]` denotes an empty subarray.\n\n\nReturn *the **minimum** index of a **valid split***. If no valid split exists, return `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,2,2]\n**Output:** 2\n**Explanation:** We can split the array at index 2 to obtain arrays [1,2,2] and [2]. \nIn array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3. \nIn array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1.\nBoth [1,2,2] and [2] have the same dominant element as nums, so this is a valid split. \nIt can be shown that index 2 is the minimum index of a valid split. \n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,1,1,1,7,1,2,1]\n**Output:** 4\n**Explanation:** We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].\nIn array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nIn array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5.\nBoth [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.\nIt can be shown that index 4 is the minimum index of a valid split.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [3,3,3,3,7,2,2]\n**Output:** -1\n**Explanation:** It can be shown that there is no valid split.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `nums` has exactly one dominant element.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.13452493468340077}, {"name": "deepseek-coder-33b-instruct", "score": -0.8898038479021277}, {"name": "Codestral-22B-v0.1", "score": -2.0204374631458997}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.209463837011673}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.564049850650826}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7864597824528}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.252487263318896}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3739441846710285}], "rank": [7, 6, 5, 4, 3, 0, 1, 2]}
{"id": "LeetCode/143", "prompt": "# Length of the Longest Valid Substring\n\nYou are given a string `word` and an array of strings `forbidden`.\n\n\nA string is called **valid** if none of its substrings are present in `forbidden`.\n\n\nReturn *the length of the **longest valid substring** of the string* `word`.\n\n\nA **substring** is a contiguous sequence of characters in a string, possibly empty.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]\n**Output:** 4\n**Explanation:** There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring. \n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]\n**Output:** 4\n**Explanation:** There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 105`\n* `word` consists only of lowercase English letters.\n* `1 <= forbidden.length <= 105`\n* `1 <= forbidden[i].length <= 10`\n* `forbidden[i]` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.5784598703901436}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7174596230378478}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.9043650487146122}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5953281464733564}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.15110289604071}, {"name": "Codestral-22B-v0.1", "score": -4.767632592142036}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.291171898387165}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.406085264427341}], "rank": [6, 4, 3, 0, 1, 5, 2, 7]}
{"id": "LeetCode/144", "prompt": "# Find the Maximum Achievable Number\n\nYou are given two integers, `num` and `t`.\n\n\nAn integer `x` is called **achievable** if it can become equal to `num` after applying the following operation no more than `t` times:\n\n\n* Increase or decrease `x` by `1`, and simultaneously increase or decrease `num` by `1`.\n\n\nReturn *the maximum possible achievable number*. It can be proven that there exists at least one achievable number.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 4, t = 1\n**Output:** 6\n**Explanation:** The maximum achievable number is x = 6; it can become equal to num after performing this operation:\n1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5. \nIt can be proven that there is no achievable number larger than 6.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 3, t = 2\n**Output:** 7\n**Explanation:** The maximum achievable number is x = 7; after performing these operations, x will equal num: \n1- Decrease x by 1, and increase num by 1. Now, x = 6 and num = 4.\n2- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.\nIt can be proven that there is no achievable number larger than 7.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= num, t <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.2742246245963145}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.4572854566255704}, {"name": "deepseek-coder-33b-instruct", "score": 0.907371581645025}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.8467291938947676}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.6555639968509679}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.11661051513618581}, {"name": "Codestral-22B-v0.1", "score": -0.3416638999081023}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.2826756705580795}], "rank": [3, 1, 6, 4, 0, 7, 5, 2]}
{"id": "LeetCode/145", "prompt": "# Maximum Number of Jumps to Reach the Last Index\n\nYou are given a **0-indexed** array `nums` of `n` integers and an integer `target`.\n\n\nYou are initially positioned at index `0`. In one step, you can jump from index `i` to any index `j` such that:\n\n\n* `0 <= i < j < n`\n* `-target <= nums[j] - nums[i] <= target`\n\n\nReturn *the **maximum number of jumps** you can make to reach index* `n - 1`.\n\n\nIf there is no way to reach index `n - 1`, return `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,6,4,1,2], target = 2\n**Output:** 3\n**Explanation:** To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1. \n- Jump from index 1 to index 3.\n- Jump from index 3 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3. \n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,6,4,1,2], target = 3\n**Output:** 5\n**Explanation:** To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1.\n- Jump from index 1 to index 2.\n- Jump from index 2 to index 3.\n- Jump from index 3 to index 4.\n- Jump from index 4 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5. \n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,6,4,1,2], target = 0\n**Output:** -1\n**Explanation:** It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length == n <= 1000`\n* `-109 <= nums[i] <= 109`\n* `0 <= target <= 2 * 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumJumps(self, nums: List[int], target: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.7762120406829567}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.03833496438022266}, {"name": "deepseek-coder-33b-instruct", "score": -0.6185424254601157}, {"name": "Codestral-22B-v0.1", "score": -0.6258800643739271}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.9979101258923935}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.50175467864238}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9666626943864696}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.787167283590132}], "rank": [4, 7, 6, 5, 3, 1, 0, 2]}
{"id": "LeetCode/146", "prompt": "# Longest Non-decreasing Subarray From Two Arrays\n\nYou are given two **0-indexed** integer arrays `nums1` and `nums2` of length `n`.\n\n\nLet's define another **0-indexed** integer array, `nums3`, of length `n`. For each index `i` in the range `[0, n - 1]`, you can assign either `nums1[i]` or `nums2[i]` to `nums3[i]`.\n\n\nYour task is to maximize the length of the **longest non-decreasing subarray** in `nums3` by choosing its values optimally.\n\n\nReturn *an integer representing the length of the **longest non-decreasing** subarray in* `nums3`.\n\n\n**Note:** A **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,3,1], nums2 = [1,2,1]\n**Output:** 2\n**Explanation:** One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2]] => [2,2,1]. \nThe subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2. \nWe can show that 2 is the maximum achievable length.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,3,2,1], nums2 = [2,2,3,4]\n**Output:** 4\n**Explanation:** One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1,2,3,4]. \nThe entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,1], nums2 = [2,2]\n**Output:** 2\n**Explanation:** One way to construct nums3 is: \nnums3 = [nums1[0], nums1[1]] => [1,1]. \nThe entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums1.length == nums2.length == n <= 105`\n* `1 <= nums1[i], nums2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.37422252878283757}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.5856469604129466}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.6058496677304661}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.105065010507153}, {"name": "Codestral-22B-v0.1", "score": -3.4274568479935694}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.025456603252452}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.210141675644311}], "rank": [6, 7, 0, 1, 4, 5, 3, 2]}
{"id": "LeetCode/147", "prompt": "# Apply Operations to Make All Array Elements Equal to Zero\n\nYou are given a **0-indexed** integer array `nums` and a positive integer `k`.\n\n\nYou can apply the following operation on the array **any** number of times:\n\n\n* Choose **any** subarray of size `k` from the array and **decrease** all its elements by `1`.\n\n\nReturn `true` *if you can make all the array elements equal to* `0`*, or* `false` *otherwise*.\n\n\nA **subarray** is a contiguous non-empty part of an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,2,3,1,1,0], k = 3\n**Output:** true\n**Explanation:** We can do the following operations:\n- Choose the subarray [2,2,3]. The resulting array will be nums = [**1**,**1**,**2**,1,1,0].\n- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,**1**,**0**,**0**,0].\n- Choose the subarray [1,1,1]. The resulting array will be nums = [**0**,**0**,**0**,0,0,0].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,1,1], k = 2\n**Output:** false\n**Explanation:** It is not possible to make all the array elements equal to 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def checkArray(self, nums: List[int], k: int) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.731032750533596}, {"name": "deepseek-coder-33b-instruct", "score": -3.476047578674996}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.11414718951828}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.182782698683978}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.20475231910144}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.253236315107398}, {"name": "Codestral-22B-v0.1", "score": -5.962910739689921}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.27272605175684}], "rank": [7, 6, 3, 1, 0, 2, 5, 4]}
{"id": "LeetCode/148", "prompt": "# Longest Alternating Subarray\n\nYou are given a **0-indexed** integer array `nums`. A subarray `s` of length `m` is called **alternating** if:\n\n\n* `m` is greater than `1`.\n* `s1 = s0 + 1`.\n* The **0-indexed** subarray `s` looks like `[s0, s1, s0, s1,...,s(m-1) % 2]`. In other words, `s1 - s0 = 1`, `s2 - s1 = -1`, `s3 - s2 = 1`, `s4 - s3 = -1`, and so on up to `s[m - 1] - s[m - 2] = (-1)m`.\n\n\nReturn *the maximum length of all **alternating** subarrays present in* `nums` *or* `-1` *if no such subarray exists**.*\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,4,3,4]\n**Output:** 4\n**Explanation:** The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,5,6]\n**Output:** 2\n**Explanation:** [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -0.7699454437873037}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3630148080962767}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9088178744791975}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2034978761186235}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.707148990099507}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.200461950375984}, {"name": "Codestral-22B-v0.1", "score": -5.651822291280947}, {"name": "deepseek-coder-33b-instruct", "score": -6.013705376043878}], "rank": [4, 7, 0, 1, 3, 2, 5, 6]}
{"id": "LeetCode/149", "prompt": "# Relocate Marbles\n\nYou are given a **0-indexed** integer array `nums` representing the initial positions of some marbles. You are also given two **0-indexed** integer arrays `moveFrom` and `moveTo` of **equal** length.\n\n\nThroughout `moveFrom.length` steps, you will change the positions of the marbles. On the `ith` step, you will move **all** marbles at position `moveFrom[i]` to position `moveTo[i]`.\n\n\nAfter completing all the steps, return *the sorted list of **occupied** positions*.\n\n\n**Notes:**\n\n\n* We call a position **occupied** if there is at least one marble in that position.\n* There may be multiple marbles in a single position.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\n**Output:** [5,6,8,9]\n**Explanation:** Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\n**Output:** [2]\n**Explanation:** Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= moveFrom.length <= 105`\n* `moveFrom.length == moveTo.length`\n* `1 <= nums[i], moveFrom[i], moveTo[i] <= 109`\n* The test cases are generated such that there is at least a marble in `moveFrom[i]` at the moment we want to apply the `ith` move.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def relocateMarbles(self, nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.3324992032201033}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.32700198508955314}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.2242221901124233}, {"name": "Codestral-22B-v0.1", "score": -1.8953285092812227}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5210766083974834}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.5545477413186446}, {"name": "deepseek-coder-33b-instruct", "score": -4.710359112295851}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.015821820783556}], "rank": [7, 3, 1, 5, 4, 0, 6, 2]}
{"id": "LeetCode/150", "prompt": "# Partition String Into Minimum Beautiful Substrings\n\nGiven a binary string `s`, partition the string into one or more **substrings** such that each substring is **beautiful**.\n\n\nA string is **beautiful** if:\n\n\n* It doesn't contain leading zeros.\n* It's the **binary** representation of a number that is a power of `5`.\n\n\nReturn *the **minimum** number of substrings in such partition.* If it is impossible to partition the string `s` into beautiful substrings, return `-1`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"1011\"\n**Output:** 2\n**Explanation:** We can paritition the given string into [\"101\", \"1\"].\n- The string \"101\" does not contain leading zeros and is the binary representation of integer 51 = 5.\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"111\"\n**Output:** 3\n**Explanation:** We can paritition the given string into [\"1\", \"1\", \"1\"].\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1.\nIt can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"0\"\n**Output:** -1\n**Explanation:** We can not partition the given string into beautiful substrings.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 15`\n* `s[i]` is either `'0'` or `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumBeautifulSubstrings(self, s: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.19893303782124505}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.5703487348172658}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8521880717259602}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.380926029229848}, {"name": "Codestral-22B-v0.1", "score": -4.9214396970182595}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0651234793803255}, {"name": "CodeLlama-7b-Instruct-hf", "score": -6.062211878629456}, {"name": "deepseek-coder-33b-instruct", "score": -6.347886459036815}], "rank": [7, 4, 0, 1, 5, 3, 2, 6]}
{"id": "LeetCode/151", "prompt": "# Longest Even Odd Subarray With Threshold\n\nYou are given a **0-indexed** integer array `nums` and an integer `threshold`.\n\n\nFind the length of the **longest subarray** of `nums` starting at index `l` and ending at index `r` `(0 <= l <= r < nums.length)` that satisfies the following conditions:\n\n\n* `nums[l] % 2 == 0`\n* For all indices `i` in the range `[l, r - 1]`, `nums[i] % 2 != nums[i + 1] % 2`\n* For all indices `i` in the range `[l, r]`, `nums[i] <= threshold`\n\n\nReturn *an integer denoting the length of the longest such subarray.*\n\n\n**Note:** A **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,5,4], threshold = 5\n**Output:** 3\n**Explanation:** In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]. This subarray satisfies the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2], threshold = 2\n**Output:** 1\n**Explanation:** In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2]. \nIt satisfies all the conditions and we can show that 1 is the maximum possible achievable length.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,3,4,5], threshold = 4\n**Output:** 3\n**Explanation:** In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2,3,4]. \nIt satisfies all the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= threshold <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.7064429150189442}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5656720429280266}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3551773006887027}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.808556691524604}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.04319160886348}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.193405275731399}, {"name": "deepseek-coder-33b-instruct", "score": -4.687075413251384}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.360221169862852}], "rank": [5, 4, 7, 3, 0, 1, 6, 2]}
{"id": "LeetCode/152", "prompt": "# Prime Pairs With Target Sum\n\nYou are given an integer `n`. We say that two integers `x` and `y` form a prime number pair if:\n\n\n* `1 <= x <= y <= n`\n* `x + y == n`\n* `x` and `y` are prime numbers\n\n\nReturn *the 2D sorted list of prime number pairs* `[xi, yi]`. The list should be sorted in **increasing** order of `xi`. If there are no prime number pairs at all, return *an empty array*.\n\n\n**Note:** A prime number is a natural number greater than `1` with only two factors, itself and `1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** [[3,7],[5,5]]\n**Explanation:** In this example, there are two prime pairs that satisfy the criteria. \nThese pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** []\n**Explanation:** We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findPrimePairs(self, n: int) -> List[List[int]]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.8358425365962248}, {"name": "Codestral-22B-v0.1", "score": 0.7191087188918752}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.22626870592476278}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.351462742376734}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.2663351601776895}, {"name": "deepseek-coder-33b-instruct", "score": -4.834449541323043}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.871649050788769}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.103469684388674}], "rank": [4, 5, 0, 7, 1, 6, 2, 3]}
{"id": "LeetCode/153", "prompt": "# Continuous Subarrays\n\nYou are given a **0-indexed** integer array `nums`. A subarray of `nums` is called **continuous** if:\n\n\n* Let `i`, `i + 1`, ..., `j`be the indices in the subarray. Then, for each pair of indices `i <= i1, i2 <= j`, `0 <= |nums[i1] - nums[i2]| <= 2`.\n\n\nReturn *the total number of **continuous** subarrays.*\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,4,2,4]\n**Output:** 8\n**Explanation:** \nContinuous subarray of size 1: [5], [4], [2], [4].\nContinuous subarray of size 2: [5,4], [4,2], [2,4].\nContinuous subarray of size 3: [4,2,4].\nThereare no subarrys of size 4.\nTotal continuous subarrays = 4 + 3 + 1 = 8.\nIt can be shown that there are no more continuous subarrays.\n\n```\n\n \n\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 6\n**Explanation:** \nContinuous subarray of size 1: [1], [2], [3].\nContinuous subarray of size 2: [1,2], [2,3].\nContinuous subarray of size 3: [1,2,3].\nTotal continuous subarrays = 3 + 2 + 1 = 6.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def continuousSubarrays(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.346422843200628}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.1525805720544975}, {"name": "Codestral-22B-v0.1", "score": -3.44714594391659}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.0427003290697625}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.19972507767993}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.382826314844445}, {"name": "deepseek-coder-33b-instruct", "score": -4.809166539527277}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.777330289951359}], "rank": [7, 4, 5, 0, 1, 3, 6, 2]}
{"id": "LeetCode/154", "prompt": "# Sum of Imbalance Numbers of All Subarrays\n\nThe **imbalance number** of a **0-indexed** integer array `arr` of length `n` is defined as the number of indices in `sarr = sorted(arr)` such that:\n\n\n* `0 <= i < n - 1`, and\n* `sarr[i+1] - sarr[i] > 1`\n\n\nHere, `sorted(arr)` is the function that returns the sorted version of `arr`.\n\n\nGiven a **0-indexed** integer array `nums`, return *the **sum of imbalance numbers** of all its **subarrays***.\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,1,4]\n**Output:** 3\n**Explanation:** There are 3 subarrays with non-zeroimbalance numbers:\n- Subarray [3, 1] with an imbalance number of 1.\n- Subarray [3, 1, 4] with an imbalance number of 1.\n- Subarray [1, 4] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,3,3,5]\n**Output:** 8\n**Explanation:** There are 7 subarrays with non-zero imbalance numbers:\n- Subarray [1, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. \n- Subarray [3, 3, 3, 5] with an imbalance number of 1. \n- Subarray [3, 3, 5] with an imbalance number of 1.\n- Subarray [3, 5] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8. \n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumImbalanceNumbers(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354235}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.6013941518651755}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9149786332537784}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.008506435440477}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.279606237074412}, {"name": "Codestral-22B-v0.1", "score": -4.367227415898607}, {"name": "deepseek-coder-33b-instruct", "score": -6.185393476943652}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.835326511559285}], "rank": [4, 3, 0, 2, 1, 5, 6, 7]}
{"id": "LeetCode/155", "prompt": "# Number of Beautiful Pairs\n\nYou are given a **0-indexed** integer array `nums`. A pair of indices `i`, `j` where `0 <= i < j < nums.length` is called beautiful if the **first digit** of `nums[i]` and the **last digit** of `nums[j]` are **coprime**.\n\n\nReturn *the total number of beautiful pairs in* `nums`.\n\n\nTwo integers `x` and `y` are **coprime** if there is no integer greater than 1 that divides both of them. In other words, `x` and `y` are coprime if `gcd(x, y) == 1`, where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,5,1,4]\n**Output:** 5\n**Explanation:** There are 5 beautiful pairs in nums:\nWhen i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.\nWhen i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.\nWhen i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.\nWhen i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.\nThus, we return 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [11,21,12]\n**Output:** 2\n**Explanation:** There are 2 beautiful pairs:\nWhen i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.\nThus, we return 2.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 9999`\n* `nums[i] % 10 != 0`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countBeautifulPairs(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.05925299873972456}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.06474303834212858}, {"name": "deepseek-coder-33b-instruct", "score": -0.6526652342893478}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.8900855761438158}, {"name": "Codestral-22B-v0.1", "score": -2.1858193069461302}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.821313291257557}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3248619217701485}], "rank": [4, 7, 1, 6, 0, 5, 3, 2]}
{"id": "LeetCode/156", "prompt": "# Minimum Operations to Make the Integer Zero\n\nYou are given two integers `num1` and `num2`.\n\n\nIn one operation, you can choose integer `i` in the range `[0, 60]` and subtract `2i + num2` from `num1`.\n\n\nReturn *the integer denoting the **minimum** number of operations needed to make* `num1` *equal to* `0`.\n\n\nIf it is impossible to make `num1` equal to `0`, return `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num1 = 3, num2 = -2\n**Output:** 3\n**Explanation:** We can make 3 equal to 0 with the following operations:\n- We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1.\n- We choose i = 2 and substract 22 + (-2) from 1, 1 - (4 + (-2)) = -1.\n- We choose i = 0 and substract 20 + (-2) from -1, (-1) - (1 + (-2)) = 0.\nIt can be proven, that 3 is the minimum number of operations that we need to perform.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num1 = 5, num2 = 7\n**Output:** -1\n**Explanation:** It can be proven, that it is impossible to make 5 equal to 0 with the given operation.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= num1 <= 109`\n* `-109 <= num2 <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def makeTheIntegerZero(self, num1: int, num2: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.13983135709342065}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7363353952702316}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.388952594744614}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.078667704488082}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.8945350569280075}, {"name": "Codestral-22B-v0.1", "score": -6.102290102196866}, {"name": "deepseek-coder-33b-instruct", "score": -6.147313783570821}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.314243456597192}], "rank": [7, 0, 1, 3, 2, 5, 6, 4]}
{"id": "LeetCode/157", "prompt": "# Ways to Split Array Into Good Subarrays\n\nYou are given a binary array `nums`.\n\n\nA subarray of an array is **good** if it contains **exactly** **one** element with the value `1`.\n\n\nReturn *an integer denoting the number of ways to split the array* `nums` *into **good** subarrays*. As the number may be too large, return it **modulo** `109 + 7`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,0,0,1]\n**Output:** 3\n**Explanation:** There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,1,0]\n**Output:** 1\n**Explanation:** There is 1 way to split nums into good subarrays:\n- [0,1,0]\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 1`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.8697023144471094}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.11693689260773343}, {"name": "Codestral-22B-v0.1", "score": -3.0983029460202167}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9703673824023897}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.028347199714948}, {"name": "deepseek-coder-33b-instruct", "score": -4.778207233171153}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.8532794833200485}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.813855867242531}], "rank": [4, 7, 5, 1, 0, 6, 3, 2]}
{"id": "LeetCode/158", "prompt": "# Find Maximum Number of String Pairs\n\nYou are given a **0-indexed** array `words` consisting of **distinct** strings.\n\n\nThe string `words[i]` can be paired with the string `words[j]` if:\n\n\n* The string `words[i]` is equal to the reversed string of `words[j]`.\n* `0 <= i < j < words.length`.\n\n\nReturn *the **maximum** number of pairs that can be formed from the array* `words`*.*\n\n\nNote that each string can belong in **at most one** pair.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]\n**Output:** 2\n**Explanation:** In this example, we can form 2 pair of strings in the following way:\n- We pair the 0th string with the 2nd string, as the reversed string of word[0] is \"dc\" and is equal to words[2].\n- We pair the 1st string with the 3rd string, as the reversed string of word[1] is \"ca\" and is equal to words[3].\nIt can be proven that 2 is the maximum number of pairs that can be formed.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"ab\",\"ba\",\"cc\"]\n**Output:** 1\n**Explanation:** In this example, we can form 1 pair of strings in the following way:\n- We pair the 0th string with the 1st string, as the reversed string of words[1] is \"ab\" and is equal to words[0].\nIt can be proven that 1 is the maximum number of pairs that can be formed.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"aa\",\"ab\"]\n**Output:** 0\n**Explanation:** In this example, we are unable to form any pair of strings.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 50`\n* `words[i].length == 2`\n* `words` consists of distinct strings.\n* `words[i]` contains only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumNumberOfStringPairs(self, words: List[str]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.0400668311623225}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.9628163557037421}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -1.7043694685095243}, {"name": "deepseek-coder-33b-instruct", "score": -2.1519022223188706}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.2204990461960783}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.7316615971889764}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.872812445649653}], "rank": [3, 4, 7, 5, 6, 0, 1, 2]}
{"id": "LeetCode/159", "prompt": "# Construct the Longest New String\n\nYou are given three integers `x`, `y`, and `z`.\n\n\nYou have `x` strings equal to `\"AA\"`, `y` strings equal to `\"BB\"`, and `z` strings equal to `\"AB\"`. You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain `\"AAA\"` or `\"BBB\"` as a substring.\n\n\nReturn *the maximum possible length of the new string*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 2, y = 5, z = 1\n**Output:** 12\n**Explanation:** We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 3, y = 2, z = 2\n**Output:** 14\n**Explanation:** We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= x, y, z <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.1014947648824078}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.9576080386486296}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.331154304300125}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.355374603676455}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.839831940248708}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.960128666798129}, {"name": "deepseek-coder-33b-instruct", "score": -6.384269857069356}, {"name": "Codestral-22B-v0.1", "score": -6.425371328847449}], "rank": [7, 0, 3, 1, 4, 2, 6, 5]}
{"id": "LeetCode/160", "prompt": "# Decremental String Concatenation\n\nYou are given a **0-indexed** array `words` containing `n` strings.\n\n\nLet's define a **join** operation `join(x, y)` between two strings `x` and `y` as concatenating them into `xy`. However, if the last character of `x` is equal to the first character of `y`, one of them is **deleted**.\n\n\nFor example `join(\"ab\", \"ba\") = \"aba\"` and `join(\"ab\", \"cde\") = \"abcde\"`.\n\n\nYou are to perform `n - 1` **join** operations. Let `str0 = words[0]`. Starting from `i = 1` up to `i = n - 1`, for the `ith` operation, you can do one of the following:\n\n\n* Make `stri = join(stri - 1, words[i])`\n* Make `stri = join(words[i], stri - 1)`\n\n\nYour task is to **minimize** the length of `strn - 1`.\n\n\nReturn *an integer denoting the minimum possible length of* `strn - 1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"aa\",\"ab\",\"bc\"]\n**Output:** 4\n**Explanation:** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aa\"\nstr1 = join(str0, \"ab\") = \"aab\"\nstr2 = join(str1, \"bc\") = \"aabc\" \nIt can be shown that the minimum possible length of str2 is 4.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"ab\",\"b\"]\n**Output:** 2\n**Explanation:** In this example, str0 = \"ab\", there are two ways to get str1: \njoin(str0, \"b\") = \"ab\" or join(\"b\", str0) = \"bab\". \nThe first string, \"ab\", has the minimum length. Hence, the answer is 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"aaa\",\"c\",\"aba\"]\n**Output:** 6\n**Explanation:** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aaa\"\nstr1 = join(str0, \"c\") = \"aaac\"\nstr2 = join(\"aba\", str1) = \"abaaac\"\nIt can be shown that the minimum possible length of str2 is 6.\n\n```\n\n \n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 1000`\n* `1 <= words[i].length <= 50`\n* Each character in `words[i]` is an English lowercase letter\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimizeConcatenatedLength(self, words: List[str]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.008988824568433529}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7023878041387284}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.30940217695288}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.983716204744992}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.416633593366079}, {"name": "Codestral-22B-v0.1", "score": -6.236565265774233}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.467201708201478}, {"name": "deepseek-coder-33b-instruct", "score": -6.657600178421077}], "rank": [7, 0, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/161", "prompt": "# Count Zero Request Servers\n\nYou are given an integer `n` denoting the total number of servers and a **2D** **0-indexed** integer array `logs`, where `logs[i] = [server_id, time]` denotes that the server with id `server_id` received a request at time `time`.\n\n\nYou are also given an integer `x` and a **0-indexed** integer array `queries`.\n\n\nReturn *a **0-indexed** integer array* `arr` *of length* `queries.length` *where* `arr[i]` *represents the number of servers that **did not receive** any requests during the time interval* `[queries[i] - x, queries[i]]`.\n\n\nNote that the time intervals are inclusive.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]\n**Output:** [1,2]\n**Explanation:** \nFor queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.\nFor queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]\n**Output:** [0,1]\n**Explanation:** \nFor queries[0]: All servers get at least one request in the duration of [1, 3].\nFor queries[1]: Only server with id 3 gets no request in the duration [2,4].\n\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `1 <= logs.length <= 105`\n* `1 <= queries.length <= 105`\n* `logs[i].length == 2`\n* `1 <= logs[i][0] <= n`\n* `1 <= logs[i][1] <= 106`\n* `1 <= x <= 105`\n* `x < queries[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countServers(self, n: int, logs: List[List[int]], x: int, queries: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.1901532591157009}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.0138660376008826}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.682222968730974}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.112904587743011}, {"name": "Codestral-22B-v0.1", "score": -4.751366554475182}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.920623055385229}, {"name": "deepseek-coder-33b-instruct", "score": -4.959632889385763}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.032788098737389}], "rank": [7, 1, 4, 0, 5, 2, 6, 3]}
{"id": "LeetCode/162", "prompt": "# Total Distance Traveled\n\nA truck has two fuel tanks. You are given two integers, `mainTank` representing the fuel present in the main tank in liters and `additionalTank` representing the fuel present in the additional tank in liters.\n\n\nThe truck has a mileage of `10` km per liter. Whenever `5` liters of fuel get used up in the main tank, if the additional tank has at least `1` liters of fuel, `1` liters of fuel will be transferred from the additional tank to the main tank.\n\n\nReturn *the maximum distance which can be traveled.*\n\n\n**Note:** Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** mainTank = 5, additionalTank = 10\n**Output:** 60\n**Explanation:** \nAfter spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.\nAfter spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.\nTotal distance traveled is 60km.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mainTank = 1, additionalTank = 2\n**Output:** 10\n**Explanation:** \nAfter spending 1 litre of fuel, the main tank becomes empty.\nTotal distance traveled is 10km.\n\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= mainTank, additionalTank <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distanceTraveled(self, mainTank: int, additionalTank: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.4990791714474794}, {"name": "deepseek-coder-33b-instruct", "score": 0.4822472103514466}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.2444053953729437}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4220452141749935}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.155063297256806}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.490163293278459}, {"name": "Codestral-22B-v0.1", "score": -4.829279443800596}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.458291059678084}], "rank": [4, 6, 7, 0, 1, 3, 5, 2]}
{"id": "LeetCode/163", "prompt": "# Find the Value of the Partition\n\nYou are given a **positive** integer array `nums`.\n\n\nPartition `nums` into two arrays, `nums1` and `nums2`, such that:\n\n\n* Each element of the array `nums` belongs to either the array `nums1` or the array `nums2`.\n* Both arrays are **non-empty**.\n* The value of the partition is **minimized**.\n\n\nThe value of the partition is `|max(nums1) - min(nums2)|`.\n\n\nHere, `max(nums1)` denotes the maximum element of the array `nums1`, and `min(nums2)` denotes the minimum element of the array `nums2`.\n\n\nReturn *the integer denoting the value of such partition*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,4]\n**Output:** 1\n**Explanation:** We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].\n- The maximum element of the array nums1 is equal to 2.\n- The minimum element of the array nums2 is equal to 3.\nThe value of the partition is |2 - 3| = 1. \nIt can be proven that 1 is the minimum value out of all partitions.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [100,1,10]\n**Output:** 9\n**Explanation:** We can partition the array nums into nums1 = [10] and nums2 = [100,1].\n- The maximum element of the array nums1 is equal to 10.\n- The minimum element of the array nums2 is equal to 1.\nThe value of the partition is |10 - 1| = 9.\nIt can be proven that 9 is the minimum value out of all partitions.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.2402464756523943}, {"name": "Codestral-22B-v0.1", "score": 1.156799885914518}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.8361692928190783}, {"name": "deepseek-coder-33b-instruct", "score": 0.715654921552682}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6128093396316032}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.133695344787292}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.190219775180324}], "rank": [1, 5, 3, 6, 4, 7, 0, 2]}
{"id": "LeetCode/164", "prompt": "# Special Permutations\n\nYou are given a **0-indexed** integer array `nums` containing `n` **distinct** positive integers. A permutation of `nums` is called special if:\n\n\n* For all indexes `0 <= i < n - 1`, either `nums[i] % nums[i+1] == 0` or `nums[i+1] % nums[i] == 0`.\n\n\nReturn *the total number of special permutations.*As the answer could be large, return it **modulo**`109+ 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,6]\n**Output:** 2\n**Explanation:** [3,6,2] and [2,6,3] are the two special permutations of nums.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,3]\n**Output:** 2\n**Explanation:** [3,1,4] and [4,1,3] are the two special permutations of nums.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 14`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def specialPerm(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.13219835532425783}, {"name": "deepseek-coder-33b-instruct", "score": -2.3105913826834037}, {"name": "Codestral-22B-v0.1", "score": -3.4860185448394656}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5247189136488}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.684533196533816}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.269865267785551}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.291171516329795}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.9344496523804375}], "rank": [7, 6, 5, 4, 3, 1, 0, 2]}
{"id": "LeetCode/165", "prompt": "# Painting the Walls\n\nYou are given two **0-indexed** integer arrays, `cost` and `time`, of size `n` representing the costs and the time taken to paint `n` different walls respectively. There are two painters available:\n\n\n* A**paid painter** that paints the `ith` wall in `time[i]` units of time and takes `cost[i]` units of money.\n* A**free painter** that paints **any** wall in `1` unit of time at a cost of `0`. But the free painter can only be used if the paid painter is already **occupied**.\n\n\nReturn *the minimum amount of money required to paint the* `n`*walls.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cost = [1,2,3,2], time = [1,2,3,2]\n**Output:** 3\n**Explanation:** The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cost = [2,3,4,2], time = [1,1,1,1]\n**Output:** 4\n**Explanation:** The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= cost.length <= 500`\n* `cost.length == time.length`\n* `1 <= cost[i] <= 106`\n* `1 <= time[i] <= 500`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def paintWalls(self, cost: List[int], time: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.7528666660409886}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.149779269110201}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.219272383372456}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.856093265904042}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.0569080064269345}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.268929749653444}, {"name": "deepseek-coder-33b-instruct", "score": -6.237957370109671}, {"name": "Codestral-22B-v0.1", "score": -6.303772156729897}], "rank": [7, 0, 1, 4, 3, 2, 6, 5]}
{"id": "LeetCode/166", "prompt": "# Neither Minimum nor Maximum\n\nGiven an integer array `nums` containing **distinct** **positive** integers, find and return **any** number from the array that is neither the **minimum** nor the **maximum** value in the array, or **`-1`** if there is no such number.\n\n\nReturn *the selected integer.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,1,4]\n**Output:** 2\n**Explanation:** In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2]\n**Output:** -1\n**Explanation:** Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,1,3]\n**Output:** 2\n**Explanation:** Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* All values in `nums` are distinct\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findNonMinOrMax(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": -0.06299465485477374}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.2917056370990725}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.1056814510907973}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.8821409509462255}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.8106221601709}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.0714669533025}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.15047263377687}, {"name": "deepseek-coder-33b-instruct", "score": -5.723349780148729}], "rank": [5, 1, 0, 3, 2, 4, 7, 6]}
{"id": "LeetCode/167", "prompt": "# Lexicographically Smallest String After Substring Operation\n\nYou are given a string `s` consisting of only lowercase English letters. In one operation, you can do the following:\n\n\n* Select any non-empty substring of `s`, possibly the entire string, then replace each one of its characters with the previous character of the English alphabet. For example, 'b' is converted to 'a', and 'a' is converted to 'z'.\n\n\nReturn *the **lexicographically smallest** string you can obtain after performing the above operation **exactly once**.*\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\nA string `x` is **lexicographically smaller** than a string `y` of the same length if `x[i]` comes before `y[i]` in alphabetic order for the first position `i` such that `x[i] != y[i]`.\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"cbabc\"\n**Output:** \"baabc\"\n**Explanation:** We apply the operation on the substring starting at index 0, and ending at index 1 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"acbbc\"\n**Output:** \"abaab\"\n**Explanation:** We apply the operation on the substring starting at index 1, and ending at index 4 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"leetcode\"\n**Output:** \"kddsbncd\"\n**Explanation:** We apply the operation on the entire string. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 3 * 105`\n* `s` consists of lowercase English letters\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def smallestString(self, s: str) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.6083199462555196}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1124463975860825}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.688775769842888}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.392463232438265}, {"name": "Codestral-22B-v0.1", "score": -5.603298936077879}, {"name": "deepseek-coder-33b-instruct", "score": -6.090187080025623}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.2532440252366515}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.723654540382479}], "rank": [0, 1, 3, 2, 5, 6, 4, 7]}
{"id": "LeetCode/168", "prompt": "# Collecting Chocolates\n\nYou are given a **0-indexed** integer array `nums` of size `n` representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index `i` is `nums[i]`. Each chocolate is of a different type, and initially, the chocolate at the index `i` is of `ith` type.\n\n\nIn one operation, you can do the following with an incurred **cost** of `x`:\n\n\n* Simultaneously change the chocolate of `ith` type to `((i + 1) mod n)th` type for all chocolates.\n\n\nReturn *the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [20,1,15], x = 5\n**Output:** 13\n**Explanation:** Initially, the chocolate types are [0,1,2]. We will buy the 1st type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2ndtype of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], x = 4\n**Output:** 6\n**Explanation:** We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 109`\n* `1 <= x <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minCost(self, nums: List[int], x: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3625719626344148}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.996437680570507}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.100459163221955}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.51252844273804}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4140182360000955}, {"name": "Codestral-22B-v0.1", "score": -5.753841674528938}, {"name": "deepseek-coder-33b-instruct", "score": -6.090187080025623}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.186504876309711}], "rank": [7, 1, 0, 3, 2, 5, 6, 4]}
{"id": "LeetCode/169", "prompt": "# Maximum Sum Queries\n\nYou are given two **0-indexed** integer arrays `nums1` and `nums2`, each of length `n`, and a **1-indexed 2D array** `queries` where `queries[i] = [xi, yi]`.\n\n\nFor the `ith` query, find the **maximum value** of `nums1[j] + nums2[j]` among all indices `j` `(0 <= j < n)`, where `nums1[j] >= xi` and `nums2[j] >= yi`, or **-1** if there is no `j` satisfying the constraints.\n\n\nReturn *an array* `answer` *where* `answer[i]` *is the answer to the* `ith` *query.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]\n**Output:** [6,10,7]\n**Explanation:** \nFor the 1st query xi = 4 and yi = 1, we can select index j = 0 since nums1[j] >= 4 and nums2[j] >= 1. The sum nums1[j] + nums2[j] is 6, and we can show that 6 is the maximum we can obtain.\n\nFor the 2nd query xi = 1 and yi = 3, we can select index j = 2 since nums1[j] >= 1 and nums2[j] >= 3. The sum nums1[j] + nums2[j] is 10, and we can show that 10 is the maximum we can obtain. \n\nFor the 3rd query xi = 2 and yi = 5, we can select index j = 3 since nums1[j] >= 2 and nums2[j] >= 5. The sum nums1[j] + nums2[j] is 7, and we can show that 7 is the maximum we can obtain.\n\nTherefore, we return [6,10,7].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]\n**Output:** [9,9,9]\n**Explanation:** For this example, we can use index j = 2 for all the queries since it satisfies the constraints for each query.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]\n**Output:** [-1]\n**Explanation:** There is one query in this example with xi = 3 and yi = 3. For every index, j, either nums1[j] < xi or nums2[j] < yi. Hence, there is no solution. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `nums1.length == nums2.length`\n* `n == nums1.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 109`\n* `1 <= queries.length <= 105`\n* `queries[i].length == 2`\n* `xi == queries[i][1]`\n* `yi == queries[i][2]`\n* `1 <= xi, yi <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.7896772648391552}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.690550426551638}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.287713287082312}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.464573895641447}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.486566813947805}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.535508289062182}, {"name": "deepseek-coder-33b-instruct", "score": -6.560832626486083}, {"name": "Codestral-22B-v0.1", "score": -6.747985508258503}], "rank": [7, 3, 2, 0, 1, 4, 6, 5]}
{"id": "LeetCode/170", "prompt": "# Find the Longest Semi-Repetitive Substring\n\nYou are given a **0-indexed** string `s` that consists of digits from `0` to `9`.\n\n\nA string `t` is called a **semi-repetitive** if there is at most one consecutive pair of the same digits inside `t`. For example, `0010`, `002020`, `0123`, `2002`, and `54944` are semi-repetitive while `00101022`, and `1101234883` are not.\n\n\nReturn *the length of the longest semi-repetitive substring inside* `s`.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"52233\"\n**Output:** 4\n**Explanation:** The longest semi-repetitive substring is \"5223\", which starts at i = 0 and ends at j = 3. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"5494\"\n**Output:** 4\n**Explanation:** s is a semi-reptitive string, so the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"1111111\"\n**Output:** 2\n**Explanation:** The longest semi-repetitive substring is \"11\", which starts at i = 0 and ends at j = 1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `'0' <= s[i] <= '9'`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def longestSemiRepetitiveSubstring(self, s: str) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Codestral-22B-v0.1", "score": -3.0651672718702234}, {"name": "deepseek-coder-33b-instruct", "score": -3.285481487201388}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.727619282429867}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.983153562359623}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.128359440809378}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.858881738868718}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.37899371957979}], "rank": [4, 5, 6, 0, 7, 1, 3, 2]}
{"id": "LeetCode/171", "prompt": "# Movement of Robots\n\nSome robots are standing on an infinite number line with their initial coordinates given by a **0-indexed** integer array `nums` and will start moving once given the command to move. The robots will move a unit distance each second.\n\n\nYou are given a string `s` denoting the direction in which robots will move on command. `'L'` means the robot will move towards the left side or negative side of the number line, whereas `'R'` means the robot will move towards the right side or positive side of the number line.\n\n\nIf two robots collide, they will start moving in opposite directions.\n\n\nReturn *the sum of distances between all the pairs of robots* `d` *seconds after the command.* Since the sum can be very large, return it modulo `109 + 7`.\n\n\n**Note:** \n\n\n* For two robots at the index `i` and `j`, pair `(i,j)` and pair `(j,i)` are considered the same pair.\n* When robots collide, they **instantly change** their directions without wasting any time.\n* Collision happens when two robots share the same place in a moment.\n\t+ For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right.\n\t+ For example, if a robot is positioned in 0 going to the right and another is positioned in 1 going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-2,0,2], s = \"RLL\", d = 3\n**Output:** 8\n**Explanation:** \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,0], s = \"RL\", d = 2\n**Output:** 5\n**Explanation:** \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `-2 * 109 <= nums[i] <= 2 * 109`\n* `0 <= d <= 109`\n* `nums.length == s.length`\n* `s` consists of 'L' and 'R' only\n* `nums[i]` will be unique.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.09820050992224161}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.8101940751372414}, {"name": "Codestral-22B-v0.1", "score": -2.3069758424988107}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.727862489242111}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.187470540211584}, {"name": "deepseek-coder-33b-instruct", "score": -5.090207261013738}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.299176996959918}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.384568454591258}], "rank": [7, 4, 5, 0, 1, 6, 2, 3]}
{"id": "LeetCode/172", "prompt": "# Find a Good Subset of the Matrix\n\nYou are given a **0-indexed** `m x n` binary matrix `grid`.\n\n\nLet us call a **non-empty** subset of rows **good** if the sum of each column of the subset is at most half of the length of the subset.\n\n\nMore formally, if the length of the chosen subset of rows is `k`, then the sum of each column should be at most `floor(k / 2)`.\n\n\nReturn *an integer array that contains row indices of a good subset sorted in **ascending** order.*\n\n\nIf there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.\n\n\nA **subset** of rows of the matrix `grid` is any matrix that can be obtained by deleting some (possibly none or all) rows from `grid`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]\n**Output:** [0,1]\n**Explanation:** We can choose the 0th and 1st rows to create a good subset of rows.\nThe length of the chosen subset is 2.\n- The sum of the 0th column is 0 + 0 = 0, which is at most half of the length of the subset.\n- The sum of the 1st column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 2nd column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 3rd column is 0 + 1 = 1, which is at most half of the length of the subset.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0]]\n**Output:** [0]\n**Explanation:** We can choose the 0th row to create a good subset of rows.\nThe length of the chosen subset is 1.\n- The sum of the 0th column is 0, which is at most half of the length of the subset.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** grid = [[1,1,1],[1,1,1]]\n**Output:** []\n**Explanation:** It is impossible to choose any subset of rows to create a good subset.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m <= 104`\n* `1 <= n <= 5`\n* `grid[i][j]` is either `0` or `1`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": -3.1859356944447095}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8733653337372678}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.3611093864184935}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.369651495152363}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.445730288345827}, {"name": "Codestral-22B-v0.1", "score": -6.184293210419833}, {"name": "deepseek-coder-33b-instruct", "score": -6.348768293309128}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.416732282512326}], "rank": [3, 0, 1, 2, 7, 5, 6, 4]}
{"id": "LeetCode/173", "prompt": "# Minimize String Length\n\nGiven a **0-indexed** string `s`, repeatedly perform the following operation **any** number of times:\n\n\n* Choose an index `i` in the string, and let `c` be the character in position `i`. **Delete** the **closest occurrence** of `c` to the **left** of `i` (if any) and the **closest occurrence** of `c` to the **right** of `i` (if any).\n\n\nYour task is to **minimize** the length of `s` by performing the above operation any number of times.\n\n\nReturn *an integer denoting the length of the **minimized** string.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aaabc\"\n**Output:** 3\n**Explanation:** In this example, s is \"aaabc\". We can start by selecting the character 'a' at index 1. We then remove the closest 'a' to the left of index 1, which is at index 0, and the closest 'a' to the right of index 1, which is at index 2. After this operation, the string becomes \"abc\". Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"cbbd\"\n**Output:** 3\n**Explanation:** For this we can start with character 'b' at index 1. There is no occurrence of 'b' to the left of index 1, but there is one to the right at index 2, so we delete the 'b' at index 2. The string becomes \"cbd\" and further operations will leave it unchanged. Hence, the minimized length is 3. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"dddaaa\"\n**Output:** 2\n**Explanation:** For this, we can start with the character 'd' at index 1. The closest occurrence of a 'd' to its left is at index 0, and the closest occurrence of a 'd' to its right is at index 2. We delete both index 0 and 2, so the string becomes \"daaa\". In the new string, we can select the character 'a' at index 2. The closest occurrence of an 'a' to its left is at index 1, and the closest occurrence of an 'a' to its right is at index 3. We delete both of them, and the string becomes \"da\". We cannot minimize this further, so the minimized length is 2.\n\n```\n\n \n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` contains only lowercase English letters\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimizedStringLength(self, s: str) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.638622697782394}, {"name": "deepseek-coder-33b-instruct", "score": 1.0375763980817405}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.549541413909302}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.2761758879331957}, {"name": "Codestral-22B-v0.1", "score": -1.5295180134639121}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.9824205733126026}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.850442027374289}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.314171030471203}], "rank": [0, 6, 7, 1, 5, 3, 4, 2]}
{"id": "LeetCode/174", "prompt": "# Semi-Ordered Permutation\n\nYou are given a **0-indexed** permutation of `n` integers `nums`.\n\n\nA permutation is called **semi-ordered** if the first number equals `1` and the last number equals `n`. You can perform the below operation as many times as you want until you make `nums` a **semi-ordered** permutation:\n\n\n* Pick two adjacent elements in `nums`, then swap them.\n\n\nReturn *the minimum number of operations to make* `nums` *a **semi-ordered permutation***.\n\n\nA **permutation** is a sequence of integers from `1` to `n` of length `n` containing each number exactly once.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,4,3]\n**Output:** 2\n**Explanation:** We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,1,3]\n**Output:** 3\n**Explanation:** We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,4,2,5]\n**Output:** 0\n**Explanation:** The permutation is already a semi-ordered permutation.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length == n <= 50`\n* `1 <= nums[i] <= 50`\n* `nums is a permutation.`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def semiOrderedPermutation(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.05837359519696239}, {"name": "deepseek-coder-33b-instruct", "score": -0.5508215074833194}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7933061758568876}, {"name": "Codestral-22B-v0.1", "score": -1.701680430396812}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.396017246749288}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.131062145157263}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.20409542618122}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.430713114572265}], "rank": [7, 6, 4, 5, 0, 1, 3, 2]}
{"id": "LeetCode/175", "prompt": "# Count of Integers\n\nYou are given two numeric strings `num1` and `num2` and two integers `max_sum` and `min_sum`. We denote an integer `x` to be *good* if:\n\n\n* `num1 <= x <= num2`\n* `min_sum <= digit_sum(x) <= max_sum`.\n\n\nReturn *the number of good integers*. Since the answer may be large, return it modulo `109 + 7`.\n\n\nNote that `digit_sum(x)` denotes the sum of the digits of `x`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8\n**Output:** 11\n**Explanation:** There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5\n**Output:** 5\n**Explanation:** The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= num1 <= num2 <= 1022`\n* `1 <= min_sum <= max_sum <= 400`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -4.1346157552372125}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.174202637467504}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.519437990496842}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.671407263761244}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.205455184113006}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.698890528575773}, {"name": "Codestral-22B-v0.1", "score": -6.713284214918258}, {"name": "deepseek-coder-33b-instruct", "score": -6.817007475692156}], "rank": [7, 0, 1, 3, 4, 2, 5, 6]}
{"id": "LeetCode/176", "prompt": "# Remove Trailing Zeros From a String\n\nGiven a **positive** integer `num` represented as a string, return *the integer* `num` *without trailing zeros as a string*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"51230100\"\n**Output:** \"512301\"\n**Explanation:** Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"123\"\n**Output:** \"123\"\n**Explanation:** Integer \"123\" has no trailing zeros, we return integer \"123\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 1000`\n* `num` consists of only digits.\n* `num` doesn't have any leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def removeTrailingZeros(self, num: str) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.110310178261426}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.78200543210342}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.9171299427962905}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.298427610797567}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.008072011693091}, {"name": "Codestral-22B-v0.1", "score": -5.175528070455416}, {"name": "deepseek-coder-33b-instruct", "score": -5.286082828879694}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.9657466591023525}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "LeetCode/177", "prompt": "# Minimum Cost to Make All Characters Equal\n\nYou are given a **0-indexed** binary string `s` of length `n` on which you can apply two types of operations:\n\n\n* Choose an index `i` and invert all characters from index `0` to index `i` (both inclusive), with a cost of `i + 1`\n* Choose an index `i` and invert all characters from index `i` to index `n - 1` (both inclusive), with a cost of `n - i`\n\n\nReturn *the **minimum cost** to make all characters of the string **equal***.\n\n\n**Invert** a character means if its value is '0' it becomes '1' and vice-versa.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"0011\"\n**Output:** 2\n**Explanation:** Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"010101\"\n**Output:** 9\n**Explanation:** Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3.\nApply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2. \nApply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1. \nApply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2.\nApply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length == n <= 105`\n* `s[i]` is either `'0'` or `'1'`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, s: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.318886194041057}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5907566720103903}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.176354564271676}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.759092268260348}, {"name": "deepseek-coder-33b-instruct", "score": -4.882395862147449}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.355075700366645}, {"name": "Codestral-22B-v0.1", "score": -5.907131398642231}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.163735768048435}], "rank": [7, 0, 1, 3, 6, 2, 5, 4]}
{"id": "LeetCode/178", "prompt": "# Buy Two Chocolates\n\nYou are given an integer array `prices` representing the prices of various chocolates in a store. You are also given a single integer `money`, which represents your initial amount of money.\n\n\nYou must buy **exactly** two chocolates in such a way that you still have some **non-negative** leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.\n\n\nReturn *the amount of money you will have leftover after buying the two chocolates*. If there is no way for you to buy two chocolates without ending up in debt, return `money`. Note that the leftover must be non-negative.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [1,2,2], money = 3\n**Output:** 0\n**Explanation:** Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [3,2,3], money = 3\n**Output:** 3\n**Explanation:** You cannot buy 2 chocolates without going in debt, so we return 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= prices.length <= 50`\n* `1 <= prices[i] <= 100`\n* `1 <= money <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def buyChoco(self, prices: List[int], money: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.171679969223753}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.587583345409088}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.5248949635596785}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.0906611401506687}, {"name": "deepseek-coder-33b-instruct", "score": 0.8907644385352063}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.02833769655170304}, {"name": "Codestral-22B-v0.1", "score": -1.8166952365172713}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.305451855448636}], "rank": [0, 1, 3, 4, 6, 7, 5, 2]}
{"id": "LeetCode/179", "prompt": "# Extra Characters in a String\n\nYou are given a **0-indexed** string `s` and a dictionary of words `dictionary`. You have to break `s` into one or more **non-overlapping** substrings such that each substring is present in `dictionary`. There may be some **extra characters** in `s` which are not present in any of the substrings.\n\n\nReturn *the **minimum** number of extra characters left over if you break up* `s` *optimally.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]\n**Output:** 1\n**Explanation:** We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]\n**Output:** 3\n**Explanation:** We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `1 <= dictionary.length <= 50`\n* `1 <= dictionary[i].length <= 50`\n* `dictionary[i]` and `s` consists of only lowercase English letters\n* `dictionary` contains distinct words\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minExtraChar(self, s: str, dictionary: List[str]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.9464080354959012}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.16045326231403312}, {"name": "Codestral-22B-v0.1", "score": -0.4876505041766448}, {"name": "deepseek-coder-33b-instruct", "score": -0.7115697622213624}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.2102527605810742}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.835674320212181}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.455680450606996}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.8949976986202755}], "rank": [4, 7, 5, 6, 0, 1, 3, 2]}
{"id": "LeetCode/180", "prompt": "# Maximum Strength of a Group\n\nYou are given a **0-indexed** integer array `nums` representing the score of students in an exam. The teacher would like to form one **non-empty** group of students with maximal **strength**, where the strength of a group of students of indices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] * nums[i2] * ... * nums[ik​]`.\n\n\nReturn *the maximum strength of a group the teacher can create*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,-1,-5,2,5,-9]\n**Output:** 1350\n**Explanation:** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-4,-5,-4]\n**Output:** 20\n**Explanation:** Group the students at indices [0, 1] . Then, we’ll have a resulting strength of 20. We cannot achieve greater strength.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 13`\n* `-9 <= nums[i] <= 9`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -0.7511937559529516}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.6767818807692745}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.928729765787886}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.977211315407214}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.506189277294304}, {"name": "Codestral-22B-v0.1", "score": -4.784518449014965}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4087669111041965}, {"name": "deepseek-coder-33b-instruct", "score": -6.253105473106191}], "rank": [4, 7, 1, 0, 3, 5, 2, 6]}
{"id": "LeetCode/181", "prompt": "# Greatest Common Divisor Traversal\n\nYou are given a **0-indexed** integer array `nums`, and you are allowed to **traverse** between its indices. You can traverse between index `i` and index `j`, `i != j`, if and only if `gcd(nums[i], nums[j]) > 1`, where `gcd` is the **greatest common divisor**.\n\n\nYour task is to determine if for **every pair** of indices `i` and `j` in nums, where `i < j`, there exists a **sequence of traversals** that can take us from `i` to `j`.\n\n\nReturn `true` *if it is possible to traverse between all such pairs of indices,* *or* `false` *otherwise.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,6]\n**Output:** true\n**Explanation:** In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,9,5]\n**Output:** false\n**Explanation:** No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [4,3,12,8]\n**Output:** true\n**Explanation:** There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canTraverseAllPairs(self, nums: List[int]) -> bool:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.8102998555657663}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.05585644227483577}, {"name": "deepseek-coder-33b-instruct", "score": -2.3504240287496403}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.188382865528762}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.123838637449803}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.484673471634024}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.116483473662662}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.987908230905204}], "rank": [5, 7, 6, 3, 0, 1, 4, 2]}
{"id": "LeetCode/182", "prompt": "# Minimum String Length After Removing Substrings\n\nYou are given a string `s` consisting only of **uppercase** English letters.\n\n\nYou can apply some operations to this string where, in one operation, you can remove **any** occurrence of one of the substrings `\"AB\"` or `\"CD\"` from `s`.\n\n\nReturn *the **minimum** possible length of the resulting string that you can obtain*.\n\n\n**Note** that the string concatenates after removing the substring and could produce new `\"AB\"` or `\"CD\"` substrings.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABFCACDB\"\n**Output:** 2\n**Explanation:** We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ACBBD\"\n**Output:** 5\n**Explanation:** We cannot do any operations on the string so the length remains the same.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists only of uppercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minLength(self, s: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.6693425916266444}, {"name": "Codestral-22B-v0.1", "score": 1.4980683900427092}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.4668818143376594}, {"name": "deepseek-coder-33b-instruct", "score": 0.8739635944992976}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.8563971690857519}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.13700424205229833}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8474204822424873}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.707575272894897}], "rank": [1, 5, 4, 6, 3, 7, 0, 2]}
{"id": "LeetCode/183", "prompt": "# Lexicographically Smallest Palindrome\n\nYou are given a string `s` consisting of **lowercase English letters**, and you are allowed to perform operations on it. In one operation, you can **replace** a character in `s` with another lowercase English letter.\n\n\nYour task is to make `s` a **palindrome** with the **minimum** **number** **of operations** possible. If there are **multiple palindromes** that can be made using the **minimum** number of operations, make the **lexicographically smallest** one.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`.\n\n\nReturn *the resulting palindrome string.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"egcfe\"\n**Output:** \"efcfe\"\n**Explanation:** The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\"\n**Output:** \"abba\"\n**Explanation:** The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"seven\"\n**Output:** \"neven\"\n**Explanation:** The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists of only lowercase English letters**.**\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def makeSmallestPalindrome(self, s: str) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.425694853262543}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.024351190401566}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.71492104994721}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.558340431005843}, {"name": "Codestral-22B-v0.1", "score": -5.739889370549483}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.93945520694715}, {"name": "deepseek-coder-33b-instruct", "score": -5.971547513267623}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.673970308067933}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/184", "prompt": "# Find the Punishment Number of an Integer\n\nGiven a positive integer `n`, return *the **punishment number*** of `n`.\n\n\nThe **punishment number** of `n` is defined as the sum of the squares of all integers `i` such that:\n\n\n* `1 <= i <= n`\n* The decimal representation of `i * i` can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals `i`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 182\n**Explanation:** There are exactly 3 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 37\n**Output:** 1478\n**Explanation:** There are exactly 4 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def punishmentNumber(self, n: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.2744297495497081}, {"name": "deepseek-coder-33b-instruct", "score": -2.2541651770684297}, {"name": "Codestral-22B-v0.1", "score": -3.721961698750798}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.828728349230335}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.085034692896323}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.882074385267994}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.123463854361576}], "rank": [4, 7, 6, 5, 0, 1, 3, 2]}
{"id": "LeetCode/185", "prompt": "# Find the Losers of the Circular Game\n\nThere are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in **clockwise order**. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.\n\n\nThe rules of the game are as follows:\n\n\n`1st` friend receives the ball.\n\n\n* After that, `1st` friend passes it to the friend who is `k` steps away from them in the **clockwise** direction.\n* After that, the friend who receives the ball should pass it to the friend who is `2 * k` steps away from them in the **clockwise** direction.\n* After that, the friend who receives the ball should pass it to the friend who is `3 * k` steps away from them in the **clockwise** direction, and so on and so forth.\n\n\nIn other words, on the `ith` turn, the friend holding the ball should pass it to the friend who is `i * k` steps away from them in the **clockwise** direction.\n\n\nThe game is finished when some friend receives the ball for the second time.\n\n\nThe **losers** of the game are friends who did not receive the ball in the entire game.\n\n\nGiven the number of friends, `n`, and an integer `k`, return *the array answer, which contains the losers of the game in the **ascending** order*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, k = 2\n**Output:** [4,5]\n**Explanation:** The game goes as follows:\n1) Start at 1st friend and pass the ball to the friend who is 2 steps away from them - 3rd friend.\n2) 3rd friend passes the ball to the friend who is 4 steps away from them - 2nd friend.\n3) 2nd friend passes the ball to the friend who is 6 steps away from them  - 3rd friend.\n4) The game ends as 3rd friend receives the ball for the second time.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, k = 4\n**Output:** [2,3,4]\n**Explanation:** The game goes as follows:\n1) Start at the 1st friend and pass the ball to the friend who is 4 steps away from them - 1st friend.\n2) The game ends as 1st friend receives the ball for the second time.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= n <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def circularGameLosers(self, n: int, k: int) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3370732885597603}, {"name": "deepseek-coder-v2-lite-instruct", "score": -1.5813181501601195}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.4340311058098454}, {"name": "Codestral-22B-v0.1", "score": -3.5527062477191076}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.238444906195857}, {"name": "deepseek-coder-33b-instruct", "score": -4.743939415189821}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.809644547423179}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.175607212555097}], "rank": [7, 4, 0, 5, 1, 6, 3, 2]}
{"id": "LeetCode/186", "prompt": "# Neighboring Bitwise XOR\n\nA **0-indexed** array `derived` with length `n` is derived by computing the **bitwise XOR** (⊕) of adjacent values in a **binary array** `original` of length `n`.\n\n\nSpecifically, for each index `i` in the range `[0, n - 1]`:\n\n\n* If `i = n - 1`, then `derived[i] = original[i] ⊕ original[0]`.\n* Otherwise, `derived[i] = original[i] ⊕ original[i + 1]`.\n\n\nGiven an array `derived`, your task is to determine whether there exists a **valid binary array** `original` that could have formed `derived`.\n\n\nReturn ***true** if such an array exists or **false** otherwise.*\n\n\n* A binary array is an array containing only **0's** and **1's**\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** derived = [1,1,0]\n**Output:** true\n**Explanation:** A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] ⊕ original[1] = 0 ⊕ 1 = 1 \nderived[1] = original[1] ⊕ original[2] = 1 ⊕ 0 = 1\nderived[2] = original[2] ⊕ original[0] = 0 ⊕ 0 = 0\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** derived = [1,1]\n**Output:** true\n**Explanation:** A valid original array that gives derived is [0,1].\nderived[0] = original[0] ⊕ original[1] = 1\nderived[1] = original[1] ⊕ original[0] = 1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** derived = [1,0]\n**Output:** false\n**Explanation:** There is no valid original array that gives derived.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == derived.length`\n* `1 <= n <= 105`\n* The values in `derived` are either **0's** or **1's**\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def doesValidArrayExist(self, derived: List[int]) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.7533286948183164}, {"name": "Codestral-22B-v0.1", "score": -1.6166746114606951}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.051067104257066}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.9377647866791556}, {"name": "deepseek-coder-33b-instruct", "score": -4.70759653149984}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.725190716584667}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.045461751248301}], "rank": [7, 0, 5, 4, 1, 6, 3, 2]}
{"id": "LeetCode/187", "prompt": "# Number of Senior Citizens\n\nYou are given a **0-indexed** array of strings `details`. Each element of `details` provides information about a given passenger compressed into a string of length `15`. The system is such that:\n\n\n* The first ten characters consist of the phone number of passengers.\n* The next character denotes the gender of the person.\n* The following two characters are used to indicate the age of the person.\n* The last two characters determine the seat allotted to that person.\n\n\nReturn *the number of passengers who are **strictly** **more than 60 years old**.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]\n**Output:** 2\n**Explanation:** The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** details = [\"1313579440F2036\",\"2921522980M5644\"]\n**Output:** 0\n**Explanation:** None of the passengers are older than 60.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= details.length <= 100`\n* `details[i].length == 15`\n* `details[i] consists of digits from '0' to '9'.`\n* `details[i][10] is either 'M' or 'F' or 'O'.`\n* The phone numbers and seat numbers of the passengers are distinct.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSeniors(self, details: List[str]) -> int:\n```\n", "scores": [{"name": "CodeLlama-7b-Instruct-hf", "score": 1.7366844881224148}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.4712346064488342}, {"name": "deepseek-coder-33b-instruct", "score": 1.005976062674657}, {"name": "Codestral-22B-v0.1", "score": 0.996632778652554}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.025105037826116394}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.3813400544409369}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.5886236984141742}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.830051275912919}], "rank": [2, 4, 6, 5, 1, 0, 3, 7]}
{"id": "LeetCode/188", "prompt": "# Sum in a Matrix\n\nYou are given a **0-indexed** 2D integer array `nums`. Initially, your score is `0`. Perform the following operations until the matrix becomes empty:\n\n\n1. From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.\n2. Identify the highest number amongst all those removed in step 1. Add that number to your **score**.\n\n\nReturn *the final **score**.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]\n**Output:** 15\n**Explanation:** In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [[1]]\n**Output:** 1\n**Explanation:** We remove 1 and add it to the answer. We return 1.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 300`\n* `1 <= nums[i].length <= 500`\n* `0 <= nums[i][j] <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def matrixSum(self, nums: List[List[int]]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.044205703902831}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.717466910965849}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.860477047544915}, {"name": "Codestral-22B-v0.1", "score": -4.3852035815880495}, {"name": "deepseek-coder-33b-instruct", "score": -4.652745641588828}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.776228550503335}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.892662240387585}], "rank": [7, 4, 0, 1, 5, 6, 3, 2]}
{"id": "LeetCode/189", "prompt": "# Maximum OR\n\nYou are given a **0-indexed** integer array `nums` of length `n` and an integer `k`. In an operation, you can choose an element and multiply it by `2`.\n\n\nReturn *the maximum possible value of* `nums[0] | nums[1] | ... | nums[n - 1]` *that can be obtained after applying the operation on nums at most* `k` *times*.\n\n\nNote that `a | b` denotes the **bitwise or** between two integers `a` and `b`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [12,9], k = 1\n**Output:** 30\n**Explanation:** If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [8,1,2], k = 2\n**Output:** 35\n**Explanation:** If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 15`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumOr(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.06021885999305532}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.8158846592267999}, {"name": "deepseek-coder-33b-instruct", "score": -3.4529021084813003}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.125197025704865}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.185768412141054}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.705847753741535}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.097106525233376}, {"name": "Codestral-22B-v0.1", "score": -6.169296875712188}], "rank": [7, 4, 6, 0, 1, 3, 2, 5]}
{"id": "LeetCode/190", "prompt": "# Power of Heroes\n\nYou are given a **0-indexed** integer array `nums` representing the strength of some heroes. The **power** of a group of heroes is defined as follows:\n\n\n* Let `i0`, `i1`, ... ,`ik` be the indices of the heroes in a group. Then, the power of this group is `max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik])`.\n\n\nReturn *the sum of the **power** of all **non-empty** groups of heroes possible.* Since the sum could be very large, return it **modulo** `109 + 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,4]\n**Output:** 141\n**Explanation:** \n1st group: [2] has power = 22 * 2 = 8.\n2nd group: [1] has power = 12 * 1 = 1. \n3rd group: [4] has power = 42 * 4 = 64. \n4th group: [2,1] has power = 22 * 1 = 4. \n5th group: [2,4] has power = 42 * 2 = 32. \n6th group: [1,4] has power = 42 * 1 = 16. \n​​​​​​​7th group: [2,1,4] has power = 42​​​​​​​ * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1]\n**Output:** 7\n**Explanation:** A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumOfPower(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3748239797552477}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5055337825954354}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.886664170961256}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.312783731931721}, {"name": "deepseek-coder-33b-instruct", "score": -4.740167077636183}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.001311966635371}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.398560812306384}, {"name": "Codestral-22B-v0.1", "score": -6.152456060699765}], "rank": [7, 4, 0, 1, 6, 3, 2, 5]}
{"id": "LeetCode/191", "prompt": "# Find the Distinct Difference Array\n\nYou are given a **0-indexed** array `nums` of length `n`.\n\n\nThe **distinct difference** array of `nums` is an array `diff` of length `n` such that `diff[i]` is equal to the number of distinct elements in the suffix `nums[i + 1, ..., n - 1]` **subtracted from** the number of distinct elements in the prefix `nums[0, ..., i]`.\n\n\nReturn *the **distinct difference** array of* `nums`.\n\n\nNote that `nums[i, ..., j]` denotes the subarray of `nums` starting at index `i` and ending at index `j` inclusive. Particularly, if `i > j` then `nums[i, ..., j]` denotes an empty subarray.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** [-3,-1,1,3,5]\n**Explanation:** For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,2,3,4,2]\n**Output:** [-2,-1,0,2,3]\n**Explanation:** For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distinctDifferenceArray(self, nums: List[int]) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.8332157021011044}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7316515459578055}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.9349856638999112}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.121116312719528}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.274966852939786}, {"name": "Codestral-22B-v0.1", "score": -6.004084578464084}, {"name": "deepseek-coder-33b-instruct", "score": -6.200841775925363}], "rank": [4, 3, 0, 7, 1, 2, 5, 6]}
{"id": "LeetCode/192", "prompt": "# Number of Adjacent Elements With the Same Color\n\nThere is a **0-indexed** array `nums` of length `n`. Initially, all elements are **uncolored** (has a value of `0`).\n\n\nYou are given a 2D integer array `queries` where `queries[i] = [indexi, colori]`.\n\n\nFor each query, you color the index `indexi` with the color `colori` in the array `nums`.\n\n\nReturn *an array* `answer` *of the same length as* `queries` *where* `answer[i]` *is the number of adjacent elements with the same color **after** the* `ith` *query*.\n\n\nMore formally, `answer[i]` is the number of indices `j`, such that `0 <= j < n - 1` and `nums[j] == nums[j + 1]` and `nums[j] != 0` after the `ith` query.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]\n**Output:** [0,1,1,0,2]\n**Explanation:** Initially array nums = [0,0,0,0], where 0 denotes uncolored elements of the array.\n- After the 1st query nums = [2,0,0,0]. The count of adjacent elements with the same color is 0.\n- After the 2nd query nums = [2,2,0,0]. The count of adjacent elements with the same color is 1.\n- After the 3rd query nums = [2,2,0,1]. The count of adjacent elements with the same color is 1.\n- After the 4th query nums = [2,1,0,1]. The count of adjacent elements with the same color is 0.\n- After the 5th query nums = [2,1,1,1]. The count of adjacent elements with the same color is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1, queries = [[0,100000]]\n**Output:** [0]\n**Explanation:** Initially array nums = [0], where 0 denotes uncolored elements of the array.\n- After the 1st query nums = [100000]. The count of adjacent elements with the same color is 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `1 <= queries.length <= 105`\n* `queries[i].length == 2`\n* `0 <= indexi <= n - 1`\n* `1 <=  colori <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 0.8159751923947951}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.08373563301638498}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.173864057325667}, {"name": "Codestral-22B-v0.1", "score": -3.45042159238194}, {"name": "deepseek-coder-33b-instruct", "score": -3.5609518599107077}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.995407814362077}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.187470540211584}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.943041443523011}], "rank": [3, 7, 4, 5, 6, 0, 1, 2]}
{"id": "LeetCode/193", "prompt": "# Determine the Winner of a Bowling Game\n\nYou are given two **0-indexed** integer arrays `player1` and `player2`, that represent the number of pins that player 1 and player 2 hit in a bowling game, respectively.\n\n\nThe bowling game consists of `n` turns, and the number of pins in each turn is exactly `10`.\n\n\nAssume a player hit `xi` pins in the `ith` turn. The value of the `ith` turn for the player is:\n\n\n* `2xi` if the player hit `10` pins in any of the previous two turns.\n* Otherwise, It is `xi`.\n\n\nThe score of the player is the sum of the values of their `n` turns.\n\n\nReturn\n\n\n* `1` *if the score of player 1 is more than the score of player 2,*\n* `2` *if the score of player 2 is more than the score of player 1, and*\n* `0` *in case of a draw.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** player1 = [4,10,7,9], player2 = [6,5,2,3]\n**Output:** 1\n**Explanation:** The score of player1 is 4 + 10 + 2*7 + 2*9 = 46.\nThe score of player2 is 6 + 5 + 2 + 3 = 16.\nScore of player1 is more than the score of player2, so, player1 is the winner, and the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** player1 = [3,5,7,6], player2 = [8,10,10,2]\n**Output:** 2\n**Explanation:** The score of player1 is 3 + 5 + 7 + 6 = 21.\nThe score of player2 is 8 + 10 + 2*10 + 2*2 = 42.\nScore of player2 is more than the score of player1, so, player2 is the winner, and the answer is 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** player1 = [2,3], player2 = [4,1]\n**Output:** 0\n**Explanation:** The score of player1 is 2 + 3 = 5\nThe score of player2 is 4 + 1 = 5\nThe score of player1 equals to the score of player2, so, there is a draw, and the answer is 0.\n\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == player1.length == player2.length`\n* `1 <= n <= 1000`\n* `0 <= player1[i], player2[i] <= 10`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def isWinner(self, player1: List[int], player2: List[int]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.604489610210008}, {"name": "deepseek-coder-33b-instruct", "score": 0.8429771224646441}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.2696100371017387}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -0.2552731515496198}, {"name": "Codestral-22B-v0.1", "score": -1.1008896181534347}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5383618208920122}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.8633293586347746}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.441359435629561}], "rank": [3, 6, 7, 1, 5, 0, 2, 4]}
{"id": "LeetCode/194", "prompt": "# Minimum Cost of a Path With Special Roads\n\nYou are given an array `start` where `start = [startX, startY]` represents your initial position `(startX, startY)` in a 2D space. You are also given the array `target` where `target = [targetX, targetY]` represents your target position `(targetX, targetY)`.\n\n\nThe cost of going from a position `(x1, y1)` to any other position in the space `(x2, y2)` is `|x2 - x1| + |y2 - y1|`.\n\n\nThere are also some special roads. You are given a 2D array `specialRoads` where `specialRoads[i] = [x1i, y1i, x2i, y2i, costi]` indicates that the `ith` special road can take you from `(x1i, y1i)` to `(x2i, y2i)` with a cost equal to `costi`. You can use each special road any number of times.\n\n\nReturn *the minimum cost required to go from* `(startX, startY)` to `(targetX, targetY)`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]]\n**Output:** 5\n**Explanation:** The optimal path from (1,1) to (4,5) is the following:\n- (1,1) -> (1,2). This move has a cost of |1 - 1| + |2 - 1| = 1.\n- (1,2) -> (3,3). This move uses the first special edge, the cost is 2.\n- (3,3) -> (3,4). This move has a cost of |3 - 3| + |4 - 3| = 1.\n- (3,4) -> (4,5). This move uses the second special edge, the cost is 1.\nSo the total cost is 1 + 2 + 1 + 1 = 5.\nIt can be shown that we cannot achieve a smaller total cost than 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** start = [3,2], target = [5,7], specialRoads = [[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]]\n**Output:** 7\n**Explanation:** It is optimal to not use any special edges and go directly from the starting to the ending position with a cost |5 - 3| + |7 - 2| = 7.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `start.length == target.length == 2`\n* `1 <= startX <= targetX <= 105`\n* `1 <= startY <= targetY <= 105`\n* `1 <= specialRoads.length <= 200`\n* `specialRoads[i].length == 5`\n* `startX <= x1i, x2i <= targetX`\n* `startY <= y1i, y2i <= targetY`\n* `1 <= costi <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCost(self, start: List[int], target: List[int], specialRoads: List[List[int]]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": -3.9640663409180426}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.172909255092764}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.582392738298103}, {"name": "deepseek-coder-33b-instruct", "score": -5.16498120980321}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.492765103139831}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.64691578296709}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.760442452274099}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.707116583007997}], "rank": [5, 0, 1, 6, 3, 2, 7, 4]}
{"id": "LeetCode/195", "prompt": "# Lexicographically Smallest Beautiful String\n\nA string is **beautiful** if:\n\n\n* It consists of the first `k` letters of the English lowercase alphabet.\n* It does not contain any substring of length `2` or more which is a palindrome.\n\n\nYou are given a beautiful string `s` of length `n` and a positive integer `k`.\n\n\nReturn *the lexicographically smallest string of length* `n`*, which is larger than* `s` *and is **beautiful***. If there is no such string, return an empty string.\n\n\nA string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`.\n\n\n* For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcz\", k = 26\n**Output:** \"abda\"\n**Explanation:** The string \"abda\" is beautiful and lexicographically larger than the string \"abcz\".\nIt can be proven that there is no string that is lexicographically larger than the string \"abcz\", beautiful, and lexicographically smaller than the string \"abda\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"dc\", k = 4\n**Output:** \"\"\n**Explanation:** It can be proven that there is no string that is lexicographically larger than the string \"dc\" and is beautiful.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == s.length <= 105`\n* `4 <= k <= 26`\n* `s` is a beautiful string.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.9645395513383916}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.184489912073446}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.528202744831483}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.68043196104795}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.329506978898712}, {"name": "Codestral-22B-v0.1", "score": -6.4007556600496756}, {"name": "deepseek-coder-33b-instruct", "score": -6.4234742104382585}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.870202933329504}], "rank": [0, 1, 3, 2, 4, 5, 6, 7]}
{"id": "LeetCode/196", "prompt": "# Maximum Sum With Exactly K Elements \n\nYou are given a **0-indexed** integer array `nums` and an integer `k`. Your task is to perform the following operation **exactly** `k` times in order to maximize your score:\n\n\n1. Select an element `m` from `nums`.\n2. Remove the selected element `m` from the array.\n3. Add a new element with a value of `m + 1` to the array.\n4. Increase your score by `m`.\n\n\nReturn *the maximum score you can achieve after performing the operation exactly* `k` *times.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 3\n**Output:** 18\n**Explanation:** We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,5,5], k = 2\n**Output:** 11\n**Explanation:** We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= k <= 100`\n\n\n \n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 1.508657281801657}, {"name": "Codestral-22B-v0.1", "score": 0.9157426364918404}, {"name": "deepseek-coder-33b-instruct", "score": 0.7523444973612508}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6786114699075796}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.008714049582125}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.111610090520811}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.21052631651151}], "rank": [0, 5, 6, 4, 7, 1, 2, 3]}
{"id": "LeetCode/197", "prompt": "# Find the Prefix Common Array of Two Arrays\n\nYou are given two **0-indexed** integerpermutations `A` and `B` of length `n`.\n\n\nA **prefix common array** of `A` and `B` is an array `C` such that `C[i]` is equal to the count of numbers that are present at or before the index `i` in both `A` and `B`.\n\n\nReturn *the **prefix common array** of* `A` *and* `B`.\n\n\nA sequence of `n` integers is called a **permutation** if it contains all integers from `1` to `n` exactly once.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** A = [1,3,2,4], B = [3,1,2,4]\n**Output:** [0,2,3,4]\n**Explanation:** At i = 0: no number is common, so C[0] = 0.\nAt i = 1: 1 and 3 are common in A and B, so C[1] = 2.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\nAt i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** A = [2,3,1], B = [3,1,2]\n**Output:** [0,1,3]\n**Explanation:** At i = 0: no number is common, so C[0] = 0.\nAt i = 1: only 3 is common in A and B, so C[1] = 1.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= A.length == B.length == n <= 50`\n* `1 <= A[i], B[i] <= n`\n* `It is guaranteed that A and B are both a permutation of n integers.`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findThePrefixCommonArray(self, A: List[int], B: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.07395774305406277}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.0375323879192218}, {"name": "Codestral-22B-v0.1", "score": -2.8555843979695092}, {"name": "deepseek-coder-33b-instruct", "score": -3.434607755906753}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.083620598859125}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.498208388963291}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.761790534302056}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.923071037023869}], "rank": [7, 0, 5, 6, 1, 3, 4, 2]}
{"id": "LeetCode/198", "prompt": "# Make Array Empty\n\nYou are given an integer array `nums` containing **distinct** numbers, and you can perform the following operations **until the array is empty**:\n\n\n* If the first element has the **smallest** value, remove it\n* Otherwise, put the first element at the **end** of the array.\n\n\nReturn *an integer denoting the number of operations it takes to make* `nums` *empty.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,4,-1]\n**Output:** 5\n\n```\n\n\n\n| Operation | Array |\n| --- | --- |\n| 1 | [4, -1, 3] |\n| 2 | [-1, 3, 4] |\n| 3 | [3, 4] |\n| 4 | [4] |\n| 5 | [] |\n\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,4,3]\n**Output:** 5\n\n```\n\n\n\n| Operation | Array |\n| --- | --- |\n| 1 | [2, 4, 3] |\n| 2 | [4, 3] |\n| 3 | [3, 4] |\n| 4 | [4] |\n| 5 | [] |\n\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 3\n\n```\n\n\n\n| Operation | Array |\n| --- | --- |\n| 1 | [2, 3] |\n| 2 | [3] |\n| 3 | [] |\n\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-109<= nums[i] <= 109`\n* All values in `nums` are **distinct**.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countOperationsToEmptyArray(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.7216799441232338}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.5577184062803506}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7376696182833684}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.8616555980643597}, {"name": "Codestral-22B-v0.1", "score": -5.774116668390349}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.220574265400695}, {"name": "deepseek-coder-33b-instruct", "score": -6.296291305893649}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.705927914836604}], "rank": [3, 2, 0, 1, 5, 4, 6, 7]}
{"id": "LeetCode/199", "prompt": "# Calculate Delayed Arrival Time\n\nYou are given a positive integer `arrivalTime` denoting the arrival time of a train in hours, and another positive integer `delayedTime` denoting the amount of delay in hours.\n\n\nReturn *the time when the train will arrive at the station.*\n\n\nNote that the time in this problem is in 24-hours format.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arrivalTime = 15, delayedTime = 5 \n**Output:** 20 \n**Explanation:** Arrival time of the train was 15:00 hours. It is delayed by 5 hours. Now it will reach at 15+5 = 20 (20:00 hours).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arrivalTime = 13, delayedTime = 11\n**Output:** 0\n**Explanation:** Arrival time of the train was 13:00 hours. It is delayed by 11 hours. Now it will reach at 13+11=24 (Which is denoted by 00:00 in 24 hours format so return 0).\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= arrivaltime < 24`\n* `1 <= delayedTime <= 24`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findDelayedArrivalTime(self, arrivalTime: int, delayedTime: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.291352553557}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.0954273851248475}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.7203425717752392}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.5314740971999297}, {"name": "Codestral-22B-v0.1", "score": 1.281833126098208}, {"name": "deepseek-coder-33b-instruct", "score": 0.6981032618917036}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.9686684602400732}], "rank": [0, 3, 4, 1, 5, 6, 7, 2]}
{"id": "LeetCode/200", "prompt": "# Sum Multiples\n\nGiven a positive integer `n`, find the sum of all integers in the range `[1, n]` **inclusive** that are divisible by `3`, `5`, or `7`.\n\n\nReturn *an integer denoting the sum of all numbers in the given range satisfying the constraint.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 7\n**Output:** 21\n**Explanation:** Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 40\n**Explanation:** Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 9\n**Output:** 30\n**Explanation:** Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumOfMultiples(self, n: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.4564335101374124}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.8959092262842843}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.5731656380596828}, {"name": "deepseek-coder-33b-instruct", "score": 0.9572263102072158}, {"name": "Codestral-22B-v0.1", "score": 0.7567795538345692}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.5518439261673938}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.6474000714794346}], "rank": [0, 2, 4, 6, 5, 7, 3, 1]}
{"id": "LeetCode/201", "prompt": "# Sliding Subarray Beauty\n\nGiven an integer array `nums` containing `n` integers, find the **beauty** of each subarray of size `k`.\n\n\nThe **beauty** of a subarray is the `xth` **smallest integer** in the subarray if it is **negative**, or `0` if there are fewer than `x` negative integers.\n\n\nReturn *an integer array containing* `n - k + 1` *integers, which denote the* **beauty** *of the subarrays **in order** from the first index in the array.*\n\n\n* A subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-1,-3,-2,3], k = 3, x = 2\n**Output:** [-1,-2,-2]\n**Explanation:** There are 3 subarrays with size k = 3. \nThe first subarray is [1, -1, -3] and the 2nd smallest negative integer is -1. \nThe second subarray is [-1, -3, -2] and the 2nd smallest negative integer is -2. \nThe third subarray is [-3, -2, 3] and the 2nd smallest negative integer is -2.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,-2,-3,-4,-5], k = 2, x = 2\n**Output:** [-1,-2,-3,-4]\n**Explanation:** There are 4 subarrays with size k = 2.\nFor [-1, -2], the 2nd smallest negative integer is -1.\nFor [-2, -3], the 2nd smallest negative integer is -2.\nFor [-3, -4], the 2nd smallest negative integer is -3.\nFor [-4, -5], the 2nd smallest negative integer is -4. \n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-3,1,2,-3,0,-3], k = 2, x = 1\n**Output:** [-3,0,-3,-3,-3]\n**Explanation:** There are 5 subarrays with size k = 2**.**\nFor [-3, 1], the 1st smallest negative integer is -3.\nFor [1, 2], there is no negative integer so the beauty is 0.\nFor [2, -3], the 1st smallest negative integer is -3.\nFor [-3, 0], the 1st smallest negative integer is -3.\nFor [0, -3], the 1st smallest negative integer is -3.\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `1 <= k <= n`\n* `1 <= x <= k`\n* `-50 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getSubarrayBeauty(self, nums: List[int], k: int, x: int) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.6542483953587768}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.5691120846730815}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.38958971918521}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.817335780932396}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.918323117976626}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.278054044290903}, {"name": "Codestral-22B-v0.1", "score": -5.12269038571811}, {"name": "deepseek-coder-33b-instruct", "score": -6.347445250117238}], "rank": [4, 3, 7, 2, 0, 1, 5, 6]}
{"id": "LeetCode/202", "prompt": "# Minimum Number of Operations to Make All Array Elements Equal to 1\n\nYou are given a **0-indexed** array `nums` consisiting of **positive** integers. You can do the following operation on the array **any** number of times:\n\n\n* Select an index `i` such that `0 <= i < n - 1` and replace either of `nums[i]` or `nums[i+1]` with their gcd value.\n\n\nReturn *the **minimum** number of operations to make all elements of* `nums` *equal to* `1`. If it is impossible, return `-1`.\n\n\nThe gcd of two integers is the greatest common divisor of the two integers.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,6,3,4]\n**Output:** 4\n**Explanation:** We can do the following operations:\n- Choose index i = 2 and replace nums[2] with gcd(3,4) = 1. Now we have nums = [2,6,1,4].\n- Choose index i = 1 and replace nums[1] with gcd(6,1) = 1. Now we have nums = [2,1,1,4].\n- Choose index i = 0 and replace nums[0] with gcd(2,1) = 1. Now we have nums = [1,1,1,4].\n- Choose index i = 2 and replace nums[3] with gcd(1,4) = 1. Now we have nums = [1,1,1,1].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,10,6,14]\n**Output:** -1\n**Explanation:** It can be shown that it is impossible to make all the elements equal to 1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 50`\n* `1 <= nums[i] <= 106`\n\n\n \n\n\n**Follow-up:**\n\n\nThe `O(n)` time complexity solution works, but could you find an `O(1)` constant time complexity solution?\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.081062400469632}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.861066496427293}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.303362143490199}, {"name": "deepseek-coder-33b-instruct", "score": -4.771477226710174}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.108850341593211}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.336537579367734}, {"name": "Codestral-22B-v0.1", "score": -5.894650737418622}], "rank": [7, 4, 0, 1, 6, 2, 3, 5]}
{"id": "LeetCode/203", "prompt": "# Row With Maximum Ones\n\nGiven a `m x n` binary matrix `mat`, find the **0-indexed** position of the row that contains the **maximum** count of **ones,** and the number of ones in that row.\n\n\nIn case there are multiple rows that have the maximum count of ones, the row with the **smallest row number** should be selected.\n\n\nReturn *an array containing the index of the row, and the number of ones in it.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** mat = [[0,1],[1,0]]\n**Output:** [0,1]\n**Explanation:** Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1). So, the answer is [0,1]. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mat = [[0,0,0],[0,1,1]]\n**Output:** [1,2]\n**Explanation:** The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** mat = [[0,0],[1,1],[0,0]]\n**Output:** [1,2]\n**Explanation:** The row indexed 1 has the maximum count of ones (2). So the answer is [1,2].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `m == mat.length`\n* `n == mat[i].length`\n* `1 <= m, n <= 100`\n* `mat[i][j]` is either `0` or `1`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.5767193971847506}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.9311152955151396}, {"name": "deepseek-coder-33b-instruct", "score": 0.6347900132798738}, {"name": "CodeLlama-7b-Instruct-hf", "score": -1.0222635154599038}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3103040476543573}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.184019311997281}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.046623826010689}, {"name": "Codestral-22B-v0.1", "score": -5.472564748074417}], "rank": [4, 3, 6, 2, 7, 0, 1, 5]}
{"id": "LeetCode/204", "prompt": "# Minimum Additions to Make Valid String\n\nGiven a string `word` to which you can insert letters \"a\", \"b\" or \"c\" anywhere and any number of times, return *the minimum number of letters that must be inserted so that `word` becomes **valid**.*\n\n\nA string is called **valid** if it can be formed by concatenating the string \"abc\" several times.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"b\"\n**Output:** 2\n**Explanation:** Insert the letter \"a\" right before \"b\", and the letter \"c\" right next to \"a\" to obtain the valid string \"**a**b**c**\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"aaa\"\n**Output:** 6\n**Explanation:** Insert letters \"b\" and \"c\" next to each \"a\" to obtain the valid string \"a**bc**a**bc**a**bc**\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word = \"abc\"\n**Output:** 0\n**Explanation:** word is already valid. No modifications are needed. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 50`\n* `word` consists of letters \"a\", \"b\" and \"c\" only.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def addMinimum(self, word: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.054649581593055885}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.053453120846024}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.158570534521372}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.598749618185169}, {"name": "deepseek-coder-33b-instruct", "score": -4.78265769331192}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.519378751657921}, {"name": "Codestral-22B-v0.1", "score": -5.893603616904096}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.309278073339093}], "rank": [7, 0, 1, 3, 6, 2, 5, 4]}
{"id": "LeetCode/205", "prompt": "# Find the Width of Columns of a Grid\n\nYou are given a **0-indexed** `m x n` integer matrix `grid`. The width of a column is the maximum **length** of its integers.\n\n\n* For example, if `grid = [[-10], [3], [12]]`, the width of the only column is `3` since `-10` is of length `3`.\n\n\nReturn *an integer array* `ans` *of size* `n` *where* `ans[i]` *is the width of the* `ith` *column*.\n\n\nThe **length** of an integer `x` with `len` digits is equal to `len` if `x` is non-negative, and `len + 1` otherwise.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[1],[22],[333]]\n**Output:** [3]\n**Explanation:** In the 0th column, 333 is of length 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[-15,1,3],[15,7,12],[5,6,-2]]\n**Output:** [3,1,2]\n**Explanation:** \nIn the 0th column, only -15 is of length 3.\nIn the 1st column, all integers are of length 1. \nIn the 2nd column, both 12 and -2 are of length 2.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 100`\n* `-109 <= grid[r][c] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "CodeLlama-7b-Instruct-hf", "score": 1.8253341701082126}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.1842561575652155}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.9130016413104451}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.147651549229421}, {"name": "deepseek-coder-33b-instruct", "score": -3.279879355817049}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.72617458488557}, {"name": "Codestral-22B-v0.1", "score": -5.867062780899793}], "rank": [2, 1, 7, 0, 3, 6, 4, 5]}
{"id": "LeetCode/206", "prompt": "# Find the Score of All Prefixes of an Array\n\nWe define the **conversion array** `conver` of an array `arr` as follows:\n\n\n* `conver[i] = arr[i] + max(arr[0..i])` where `max(arr[0..i])` is the maximum value of `arr[j]` over `0 <= j <= i`.\n\n\nWe also define the **score** of an array `arr` as the sum of the values of the conversion array of `arr`.\n\n\nGiven a **0-indexed** integer array `nums` of length `n`, return *an array* `ans` *of length* `n` *where* `ans[i]` *is the score of the prefix* `nums[0..i]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,7,5,10]\n**Output:** [4,10,24,36,56]\n**Explanation:** \nFor the prefix [2], the conversion array is [4] hence the score is 4\nFor the prefix [2, 3], the conversion array is [4, 6] hence the score is 10\nFor the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score is 24\nFor the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the score is 36\nFor the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20] hence the score is 56\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,4,8,16]\n**Output:** [2,4,8,16,32,64]\n**Explanation:** \nFor the prefix [1], the conversion array is [2] hence the score is 2\nFor the prefix [1, 1], the conversion array is [2, 2] hence the score is 4\nFor the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score is 8\nFor the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the score is 16\nFor the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16] hence the score is 32\nFor the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16, 32] hence the score is 64\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findPrefixScore(self, nums: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.15111545849032737}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.2588618761083872}, {"name": "Codestral-22B-v0.1", "score": -0.2980933464992477}, {"name": "deepseek-coder-33b-instruct", "score": -0.5938141378259569}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7776462689252783}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6686767467964168}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.7877014228756405}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9969522162134514}], "rank": [7, 3, 5, 6, 4, 0, 2, 1]}
{"id": "LeetCode/207", "prompt": "# Sum of Distances\n\nYou are given a **0-indexed** integer array `nums`. There exists an array `arr` of length `nums.length`, where `arr[i]` is the sum of `|i - j|` over all `j` such that `nums[j] == nums[i]` and `j != i`. If there is no such `j`, set `arr[i]` to be `0`.\n\n\nReturn *the array* `arr`*.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,1,1,2]\n**Output:** [5,0,3,4,0]\n**Explanation:** \nWhen i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. \nWhen i = 1, arr[1] = 0 because there is no other index with value 3.\nWhen i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. \nWhen i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. \nWhen i = 4, arr[4] = 0 because there is no other index with value 2. \n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,5,3]\n**Output:** [0,0,0]\n**Explanation:** Since each element in nums is distinct, arr[i] = 0 for all i.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distance(self, nums: List[int]) -> List[int]:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 2.200760451495608}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.9143171301840791}, {"name": "Codestral-22B-v0.1", "score": -1.9589827891713112}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.050960292732544}, {"name": "deepseek-coder-33b-instruct", "score": -2.1451685140685006}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8462250248377137}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.209754413732928}], "rank": [3, 7, 2, 5, 4, 6, 0, 1]}
{"id": "LeetCode/208", "prompt": "# Minimize the Maximum Difference of Pairs\n\nYou are given a **0-indexed** integer array `nums` and an integer `p`. Find `p` pairs of indices of `nums` such that the **maximum** difference amongst all the pairs is **minimized**. Also, ensure no index appears more than once amongst the `p` pairs.\n\n\nNote that for a pair of elements at the index `i` and `j`, the difference of this pair is `|nums[i] - nums[j]|`, where `|x|` represents the **absolute** **value** of `x`.\n\n\nReturn *the **minimum** **maximum** difference among all* `p` *pairs.* We define the maximum of an empty set to be zero.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,1,2,7,1,3], p = 2\n**Output:** 1\n**Explanation:** The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. \nThe maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,2,1,2], p = 1\n**Output:** 0\n**Explanation:** Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 109`\n* `0 <= p <= (nums.length)/2`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimizeMax(self, nums: List[int], p: int) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.9262860766186938}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6100864199524878}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.563620430921655}, {"name": "deepseek-coder-33b-instruct", "score": -2.0664445651037973}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.111529386976201}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.880982085869385}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.421472612672775}], "rank": [5, 4, 7, 1, 6, 0, 3, 2]}
{"id": "LeetCode/209", "prompt": "# Find the Longest Balanced Substring of a Binary String\n\nYou are given a binary string `s` consisting only of zeroes and ones.\n\n\nA substring of `s` is considered balanced if **all zeroes are before ones** and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.\n\n\nReturn *the length of the longest balanced substring of* `s`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"01000111\"\n**Output:** 6\n**Explanation:** The longest balanced substring is \"000111\", which has length 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"00111\"\n**Output:** 4\n**Explanation:** The longest balanced substring is \"0011\", which has length 4. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"111\"\n**Output:** 0\n**Explanation:** There is no balanced substring except the empty substring, so the answer is 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `'0' <= s[i] <= '1'`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findTheLongestBalancedSubstring(self, s: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.14912554362458508}, {"name": "deepseek-coder-33b-instruct", "score": -1.9830513829461838}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.6420277703019934}, {"name": "Codestral-22B-v0.1", "score": -3.0711172560227307}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5220850119961944}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8127770907701737}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.964800757752456}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.315410443974214}], "rank": [7, 6, 1, 5, 4, 0, 3, 2]}
{"id": "LeetCode/210", "prompt": "# Convert an Array Into a 2D Array With Conditions\n\nYou are given an integer array `nums`. You need to create a 2D array from `nums` satisfying the following conditions:\n\n\n* The 2D array should contain **only** the elements of the array `nums`.\n* Each row in the 2D array contains **distinct** integers.\n* The number of rows in the 2D array should be **minimal**.\n\n\nReturn *the resulting array*. If there are multiple answers, return any of them.\n\n\n**Note** that the 2D array can have a different number of elements on each row.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,4,1,2,3,1]\n**Output:** [[1,3,4,2],[1,3],[1]]\n**Explanation:** We can create a 2D array that contains the following rows:\n- 1,3,4,2\n- 1,3\n- 1\nAll elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.\nIt can be shown that we cannot have less than 3 rows in a valid array.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** [[4,3,2,1]]\n**Explanation:** All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 200`\n* `1 <= nums[i] <= nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMatrix(self, nums: List[int]) -> List[List[int]]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.8492109930162757}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9549292264386033}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.692741406236235}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.282248958368972}, {"name": "Codestral-22B-v0.1", "score": -5.850246545192444}, {"name": "deepseek-coder-33b-instruct", "score": -5.993791836867073}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.037622679089065}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.589993308542003}], "rank": [0, 1, 3, 2, 5, 6, 4, 7]}
{"id": "LeetCode/211", "prompt": "# Mice and Cheese\n\nThere are two mice and `n` different types of cheese, each type of cheese should be eaten by exactly one mouse.\n\n\nA point of the cheese with index `i` (**0-indexed**) is:\n\n\n* `reward1[i]` if the first mouse eats it.\n* `reward2[i]` if the second mouse eats it.\n\n\nYou are given a positive integer array `reward1`, a positive integer array `reward2`, and a non-negative integer `k`.\n\n\nReturn ***the maximum** points the mice can achieve if the first mouse eats exactly* `k` *types of cheese.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2\n**Output:** 15\n**Explanation:** In this example, the first mouse eats the 2nd (0-indexed) and the 3rd types of cheese, and the second mouse eats the 0th and the 1st types of cheese.\nThe total points are 4 + 4 + 3 + 4 = 15.\nIt can be proven that 15 is the maximum total points that the mice can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** reward1 = [1,1], reward2 = [1,1], k = 2\n**Output:** 2\n**Explanation:** In this example, the first mouse eats the 0th (0-indexed) and 1st types of cheese, and the second mouse does not eat any cheese.\nThe total points are 1 + 1 = 2.\nIt can be proven that 2 is the maximum total points that the mice can achieve.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n == reward1.length == reward2.length <= 105`\n* `1 <= reward1[i], reward2[i] <= 1000`\n* `0 <= k <= n`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def miceAndCheese(self, reward1: List[int], reward2: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.11176740474005076}, {"name": "Codestral-22B-v0.1", "score": -3.3540854379633362}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5239293616390412}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6513852496863555}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9160947047981995}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.638527589642088}, {"name": "deepseek-coder-33b-instruct", "score": -4.779642049674289}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.647212123167806}], "rank": [7, 5, 4, 0, 1, 3, 6, 2]}
{"id": "LeetCode/212", "prompt": "# Minimum Reverse Operations\n\nYou are given an integer `n` and an integer `p` in the range `[0, n - 1]`. Representing a **0-indexed** array `arr` of length `n` where all positions are set to `0`'s, except position `p` which is set to `1`.\n\n\nYou are also given an integer array `banned` containing some positions from the array. For the **i****th** position in `banned`, `arr[banned[i]] = 0`, and `banned[i] != p`.\n\n\nYou can perform **multiple** operations on `arr`. In an operation, you can choose a **subarray** with size `k` and **reverse** the subarray. However, the `1` in `arr` should never go to any of the positions in `banned`. In other words, after each operation `arr[banned[i]]` **remains** `0`.\n\n\n*Return an array* `ans` *where* *for each* `i` *from* `[0, n - 1]`, `ans[i]` *is the **minimum** number of reverse operations needed to bring the* `1` *to position* `i` *in arr*, *or* `-1` *if it is impossible*.\n\n\n* A **subarray** is a contiguous **non-empty** sequence of elements within an array.\n* The values of `ans[i]` are independent for all `i`'s.\n* The **reverse** of an array is an array containing the values in **reverse order**.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 4, p = 0, banned = [1,2], k = 4\n**Output:** [0,-1,-1,1]\n**Explanation:** In this case k = 4 so there is only one possible reverse operation we can perform, which is reversing the whole array. Initially, 1is placed at position 0 so the amount of operations we need for position 0 is 0. We can never place a 1 on the banned positions, so the answer for positions 1 and 2 is -1. Finally, with one reverse operation we can bring the 1 to index 3, so the answer for position 3 is 1. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, p = 0, banned = [2,4], k = 3\n**Output:** [0,-1,-1,-1,-1]\n**Explanation:** In this case the 1 is initially at position 0, so the answer for that position is 0. We can perform reverse operations of size 3. The 1 is currently located at position 0, so we need to reverse the subarray [0, 2] for it to leave that position, but reversing that subarray makes position 2 have a 1, which shouldn't happen. So, we can't move the 1 from position 0, making the result for all the other positions -1. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 4, p = 2, banned = [0,1,3], k = 1\n**Output:** [-1,-1,0,-1]\n**Explanation:** In this case we can only perform reverse operations of size 1.So the 1 never changes its position.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `0 <= p <= n - 1`\n* `0 <= banned.length <= n - 1`\n* `0 <= banned[i] <= n - 1`\n* `1 <= k <= n`\n* `banned[i] != p`\n* all values in `banned` are **unique**\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -4.157694877722863}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.4600519241116485}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.07327200794423}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.594904669470335}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.412015292634187}, {"name": "deepseek-coder-33b-instruct", "score": -6.504366014818312}, {"name": "Codestral-22B-v0.1", "score": -6.627551838386039}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.1162123093807175}], "rank": [0, 1, 3, 2, 4, 6, 5, 7]}
{"id": "LeetCode/213", "prompt": "# Form Smallest Number From Two Digit Arrays\n\nGiven two arrays of **unique** digits `nums1` and `nums2`, return *the **smallest** number that contains **at least** one digit from each array*.\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [4,1,3], nums2 = [5,7]\n**Output:** 15\n**Explanation:** The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,5,2,6], nums2 = [3,1,7]\n**Output:** 3\n**Explanation:** The number 3 contains the digit 3 which exists in both arrays.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 9`\n* `1 <= nums1[i], nums2[i] <= 9`\n* All digits in each array are **unique**.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.08620082171491994}, {"name": "Codestral-22B-v0.1", "score": -0.5697582192828694}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.4225848825951792}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.533511366880239}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.967722577898513}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.5482188095379525}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.90953236869107}, {"name": "deepseek-coder-33b-instruct", "score": -5.8017436828320825}], "rank": [7, 5, 4, 0, 1, 3, 2, 6]}
{"id": "LeetCode/214", "prompt": "# Find the Substring With Maximum Cost\n\nYou are given a string `s`, a string `chars` of **distinct** characters and an integer array `vals` of the same length as `chars`.\n\n\nThe **cost of the substring** is the sum of the values of each character in the substring. The cost of an empty string is considered `0`.\n\n\nThe **value of the character** is defined in the following way:\n\n\n* If the character is not in the string `chars`, then its value is its corresponding position **(1-indexed)** in the alphabet.\n\t+ For example, the value of `'a'` is `1`, the value of `'b'` is `2`, and so on. The value of `'z'` is `26`.\n* Otherwise, assuming `i` is the index where the character occurs in the string `chars`, then its value is `vals[i]`.\n\n\nReturn *the maximum cost among all substrings of the string* `s`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"adaa\", chars = \"d\", vals = [-1000]\n**Output:** 2\n**Explanation:** The value of the characters \"a\" and \"d\" is 1 and -1000 respectively.\nThe substring with the maximum cost is \"aa\" and its cost is 1 + 1 = 2.\nIt can be proven that 2 is the maximum cost.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abc\", chars = \"abc\", vals = [-1,-1,-1]\n**Output:** 0\n**Explanation:** The value of the characters \"a\", \"b\" and \"c\" is -1, -1, and -1 respectively.\nThe substring with the maximum cost is the empty substring \"\" and its cost is 0.\nIt can be proven that 0 is the maximum cost.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consist of lowercase English letters.\n* `1 <= chars.length <= 26`\n* `chars` consist of **distinct** lowercase English letters.\n* `vals.length == chars.length`\n* `-1000 <= vals[i] <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.7056800332115634}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6013698632707856}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-33b-instruct", "score": -0.9196407253690815}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.949746319044296}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.887238388605515}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.882074385267994}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.631985675836515}], "rank": [5, 4, 7, 6, 1, 0, 3, 2]}
{"id": "LeetCode/215", "prompt": "# Make K-Subarray Sums Equal\n\nYou are given a **0-indexed** integer array `arr` and an integer `k`. The array `arr` is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.\n\n\nYou can do the following operation any number of times:\n\n\n* Pick any element from `arr` and increase or decrease it by `1`.\n\n\nReturn *the minimum number of operations such that the sum of each **subarray** of length* `k` *is equal*.\n\n\nA **subarray** is a contiguous part of the array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [1,4,1,3], k = 2\n**Output:** 1\n**Explanation:** we can do one operation on index 1 to make its value equal to 3.\nThe array after the operation is [1,3,1,3]\n- Subarray starts at index 0 is [1, 3], and its sum is 4 \n- Subarray starts at index 1 is [3, 1], and its sum is 4 \n- Subarray starts at index 2 is [1, 3], and its sum is 4 \n- Subarray starts at index 3 is [3, 1], and its sum is 4 \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [2,5,5,7], k = 3\n**Output:** 5\n**Explanation:** we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5.\nThe array after the operations is [5,5,5,5]\n- Subarray starts at index 0 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 1 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 2 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 3 is [5, 5, 5], and its sum is 15 \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= arr.length <= 105`\n* `1 <= arr[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.967722577898513}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.15330505504561}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.348056115102728}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.8913370449651925}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.379381091267764}, {"name": "deepseek-coder-33b-instruct", "score": -6.20746263026132}, {"name": "Codestral-22B-v0.1", "score": -6.307934493644584}], "rank": [7, 0, 1, 3, 4, 2, 6, 5]}
{"id": "LeetCode/216", "prompt": "# K Items With the Maximum Sum\n\nThere is a bag that consists of items, each item has a number `1`, `0`, or `-1` written on it.\n\n\nYou are given four **non-negative** integers `numOnes`, `numZeros`, `numNegOnes`, and `k`.\n\n\nThe bag initially contains:\n\n\n* `numOnes` items with `1`s written on them.\n* `numZeroes` items with `0`s written on them.\n* `numNegOnes` items with `-1`s written on them.\n\n\nWe want to pick exactly `k` items among the available items. Return *the **maximum** possible sum of numbers written on the items*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\n**Output:** 2\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\n**Output:** 3\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `0 <= numOnes, numZeros, numNegOnes <= 50`\n* `0 <= k <= numOnes + numZeros + numNegOnes`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def kItemsWithMaximumSum(self, numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.2123789320669482}, {"name": "deepseek-coder-33b-instruct", "score": 0.760393808323891}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -1.7086869657166095}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.8967391363545496}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.684268841556253}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.9576080386486296}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.545630466849431}], "rank": [4, 6, 7, 5, 3, 0, 1, 2]}
{"id": "LeetCode/217", "prompt": "# Prime Subtraction Operation\n\nYou are given a **0-indexed** integer array `nums` of length `n`.\n\n\nYou can perform the following operation as many times as you want:\n\n\n* Pick an index `i` that you haven’t picked before, and pick a prime `p` **strictly less than** `nums[i]`, then subtract `p` from `nums[i]`.\n\n\nReturn *true if you can make `nums` a strictly increasing array using the above operation and false otherwise.*\n\n\nA **strictly increasing array** is an array whose each element is strictly greater than its preceding element.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,9,6,10]\n**Output:** true\n**Explanation:** In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].\nIn the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].\nAfter the second operation, nums is sorted in strictly increasing order, so the answer is true.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,8,11,12]\n**Output:** true\n**Explanation:** Initially nums is sorted in strictly increasing order, so we don't need to make any operations.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,8,3]\n**Output:** false\n**Explanation:** It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 1000`\n* `nums.length == n`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def primeSubOperation(self, nums: List[int]) -> bool:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3565235493632288}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.1151923947349385}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.31876729503469}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.955370956656336}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.2088302000465}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.615300926585387}, {"name": "Codestral-22B-v0.1", "score": -6.137791846803555}, {"name": "deepseek-coder-33b-instruct", "score": -6.573233139684538}], "rank": [7, 0, 1, 4, 3, 2, 5, 6]}
{"id": "LeetCode/218", "prompt": "# Minimum Operations to Make All Array Elements Equal\n\nYou are given an array `nums` consisting of positive integers.\n\n\nYou are also given an integer array `queries` of size `m`. For the `ith` query, you want to make all of the elements of `nums` equal to `queries[i]`. You can perform the following operation on the array **any** number of times:\n\n\n* **Increase** or **decrease** an element of the array by `1`.\n\n\nReturn *an array* `answer` *of size* `m` *where* `answer[i]` *is the **minimum** number of operations to make all elements of* `nums` *equal to* `queries[i]`.\n\n\n**Note** that after each query the array is reset to its original state.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,6,8], queries = [1,5]\n**Output:** [14,10]\n**Explanation:** For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,9,6,3], queries = [10]\n**Output:** [20]\n**Explanation:** We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `m == queries.length`\n* `1 <= n, m <= 105`\n* `1 <= nums[i], queries[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int], queries: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -2.1275616050939465}, {"name": "starcoder2-15b-instruct-v0.1", "score": -2.6399976631960627}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5316559410980872}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.8851720417361064}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.1050866587540025}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.166417131013752}, {"name": "deepseek-coder-33b-instruct", "score": -6.369702332961662}], "rank": [7, 5, 3, 4, 2, 0, 1, 6]}
{"id": "LeetCode/219", "prompt": "# Number of Even and Odd Bits\n\nYou are given a **positive** integer `n`.\n\n\nLet `even` denote the number of even indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\n\nLet `odd` denote the number of odd indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\n\nReturn *an integer array* `answer` *where* `answer = [even, odd]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 17\n**Output:** [2,0]\n**Explanation:** The binary representation of 17 is 10001. \nIt contains 1 on the 0th and 4th indices. \nThere are 2 even and 0 odd indices.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** [0,1]\n**Explanation:** The binary representation of 2 is 10.\nIt contains 1 on the 1st index. \nThere are 0 even and 1 odd indices.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.339184200882447}, {"name": "deepseek-coder-33b-instruct", "score": 0.5653138090500605}, {"name": "Codestral-22B-v0.1", "score": -2.0040210258422286}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4220452141749935}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.466657271375887}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.043682647419873}, {"name": "CodeLlama-7b-Instruct-hf", "score": -4.657155241054042}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.144972106546158}], "rank": [4, 6, 5, 0, 3, 1, 2, 7]}
{"id": "LeetCode/220", "prompt": "# The Number of Beautiful Subsets\n\nYou are given an array `nums` of positive integers and a **positive** integer `k`.\n\n\nA subset of `nums` is **beautiful** if it does not contain two integers with an absolute difference equal to `k`.\n\n\nReturn *the number of **non-empty beautiful** subsets of the array* `nums`.\n\n\nA **subset** of `nums` is an array that can be obtained by deleting some (possibly none) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,4,6], k = 2\n**Output:** 4\n**Explanation:** The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].\nIt can be proved that there are only 4 beautiful subsets in the array [2,4,6].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1], k = 1\n**Output:** 1\n**Explanation:** The beautiful subset of the array nums is [1].\nIt can be proved that there is only 1 beautiful subset in the array [1].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 20`\n* `1 <= nums[i], k <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulSubsets(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.237495446747789}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5490115548734393}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.161192913646563}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.222972284818273}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.493389102527342}, {"name": "Codestral-22B-v0.1", "score": -4.865906954190886}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.547269005639754}, {"name": "deepseek-coder-33b-instruct", "score": -6.503988727509554}], "rank": [7, 4, 0, 1, 3, 5, 2, 6]}
{"id": "LeetCode/221", "prompt": "# Smallest Missing Non-negative Integer After Operations\n\nYou are given a **0-indexed** integer array `nums` and an integer `value`.\n\n\nIn one operation, you can add or subtract `value` from any element of `nums`.\n\n\n* For example, if `nums = [1,2,3]` and `value = 2`, you can choose to subtract `value` from `nums[0]` to make `nums = [-1,2,3]`.\n\n\nThe MEX (minimum excluded) of an array is the smallest missing **non-negative** integer in it.\n\n\n* For example, the MEX of `[-1,2,3]` is `0` while the MEX of `[1,0,3]` is `2`.\n\n\nReturn *the maximum MEX of* `nums` *after applying the mentioned operation **any number of times***.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 5\n**Output:** 4\n**Explanation:** One can achieve this result by applying the following operations:\n- Add value to nums[1] twice to make nums = [1,**0**,7,13,6,8]\n- Subtract value from nums[2] once to make nums = [1,0,**2**,13,6,8]\n- Subtract value from nums[3] twice to make nums = [1,0,2,**3**,6,8]\nThe MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 7\n**Output:** 2\n**Explanation:** One can achieve this result by applying the following operation:\n- subtract value from nums[2] once to make nums = [1,-10,**0**,13,6,8]\nThe MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length, value <= 105`\n* `-109 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.709890668598395}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-33b-instruct", "score": -0.7794953573542385}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.722894332701214}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.075093782629963}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.1845508301082495}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.063151840006501}, {"name": "Codestral-22B-v0.1", "score": -6.078627995867447}], "rank": [4, 7, 6, 0, 1, 3, 2, 5]}
{"id": "LeetCode/222", "prompt": "# Distribute Money to Maximum Children\n\nYou are given an integer `money` denoting the amount of money (in dollars) that you have and another integer `children` denoting the number of children that you must distribute the money to.\n\n\nYou have to distribute the money according to the following rules:\n\n\n* All money must be distributed.\n* Everyone must receive at least `1` dollar.\n* Nobody receives `4` dollars.\n\n\nReturn *the **maximum** number of children who may receive **exactly*** `8` *dollars if you distribute the money according to the aforementioned rules*. If there is no way to distribute the money, return `-1`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** money = 20, children = 3\n**Output:** 1\n**Explanation:** \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** money = 16, children = 2\n**Output:** 2\n**Explanation:** Each child can be given 8 dollars.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= money <= 200`\n* `2 <= children <= 30`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distMoney(self, money: int, children: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.7899970065498625}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -3.2304153692757778}, {"name": "deepseek-coder-v2-lite-instruct", "score": -3.5116604895695094}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.08078639762325}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.096276029071848}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.789489745444719}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.410645551521456}], "rank": [6, 7, 5, 4, 1, 0, 3, 2]}
{"id": "LeetCode/223", "prompt": "# Maximize Greatness of an Array\n\nYou are given a 0-indexed integer array `nums`. You are allowed to permute `nums` into a new array `perm` of your choosing.\n\n\nWe define the **greatness** of `nums` be the number of indices `0 <= i < nums.length` for which `perm[i] > nums[i]`.\n\n\nReturn *the **maximum** possible greatness you can achieve after permuting* `nums`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,5,2,1,3,1]\n**Output:** 4\n**Explanation:** One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].\nAt indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 3\n**Explanation:** We can prove the optimal perm is [2,3,4,1].\nAt indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximizeGreatness(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 0.7219179320038931}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.6368041669376767}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.854153833419528}, {"name": "deepseek-coder-33b-instruct", "score": -3.0338879639957375}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.4926212315811087}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.188927204708048}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.171324550763096}], "rank": [5, 7, 4, 1, 6, 0, 3, 2]}
{"id": "LeetCode/224", "prompt": "# Find Score of an Array After Marking All Elements\n\nYou are given an array `nums` consisting of positive integers.\n\n\nStarting with `score = 0`, apply the following algorithm:\n\n\n* Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.\n* Add the value of the chosen integer to `score`.\n* Mark **the chosen element and its two adjacent elements if they exist**.\n* Repeat until all the array elements are marked.\n\n\nReturn *the score you get after applying the above algorithm*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,4,5,2]\n**Output:** 7\n**Explanation:** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].\n- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].\n- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].\nOur score is 1 + 2 + 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,1,3,2]\n**Output:** 5\n**Explanation:** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].\n- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].\n- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].\nOur score is 1 + 2 + 2 = 5.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findScore(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 1.5061695121222751}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6246232422586084}, {"name": "Codestral-22B-v0.1", "score": 0.6245190158788176}, {"name": "deepseek-coder-33b-instruct", "score": 0.4096934442176847}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.8746660142387146}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.6538846793519335}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.200925020539387}], "rank": [0, 4, 5, 6, 7, 1, 3, 2]}
{"id": "LeetCode/225", "prompt": "# Minimum Time to Repair Cars\n\nYou are given an integer array `ranks` representing the **ranks** of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank `r` can repair n cars in `r * n2` minutes.\n\n\nYou are also given an integer `cars` representing the total number of cars waiting in the garage to be repaired.\n\n\nReturn *the **minimum** time taken to repair all the cars.*\n\n\n**Note:** All the mechanics can repair the cars simultaneously.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ranks = [4,2,3,1], cars = 10\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.​​​​​\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ranks = [5,1,8], cars = 6\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.​​​​​\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= ranks.length <= 105`\n* `1 <= ranks[i] <= 100`\n* `1 <= cars <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def repairCars(self, ranks: List[int], cars: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.7661959470188355}, {"name": "Codestral-22B-v0.1", "score": 0.7086193905151434}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7705323328698697}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.4349557670619593}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.167285186623816}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.711042570618639}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.199535166250333}], "rank": [6, 5, 7, 4, 0, 1, 3, 2]}
{"id": "LeetCode/226", "prompt": "# Count the Number of Vowel Strings in Range\n\nYou are given a **0-indexed** array of string `words` and two integers `left` and `right`.\n\n\nA string is called a **vowel string** if it starts with a vowel character and ends with a vowel character where vowel characters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\nReturn *the number of vowel strings* `words[i]` *where* `i` *belongs to the inclusive range* `[left, right]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"are\",\"amy\",\"u\"], left = 0, right = 2\n**Output:** 2\n**Explanation:** \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4\n**Output:** 3\n**Explanation:** \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 1000`\n* `1 <= words[i].length <= 10`\n* `words[i]` consists of only lowercase English letters.\n* `0 <= left <= right < words.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.952737781981136}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.451962494068647}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.1556596785729587}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.3742501155881373}, {"name": "Codestral-22B-v0.1", "score": 0.7255435349537018}, {"name": "deepseek-coder-33b-instruct", "score": 0.5405511790720094}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "CodeLlama-7b-Instruct-hf", "score": -0.8271719731302367}], "rank": [0, 1, 3, 4, 5, 6, 7, 2]}
{"id": "LeetCode/227", "prompt": "# Rearrange Array to Maximize Prefix Score\n\nYou are given a **0-indexed** integer array `nums`. You can rearrange the elements of `nums` to **any order** (including the given order).\n\n\nLet `prefix` be the array containing the prefix sums of `nums` after rearranging it. In other words, `prefix[i]` is the sum of the elements from `0` to `i` in `nums` after rearranging it. The **score** of `nums` is the number of positive integers in the array `prefix`.\n\n\nReturn *the maximum score you can achieve*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,-1,0,1,-3,3,-3]\n**Output:** 6\n**Explanation:** We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].\nprefix = [2,5,6,5,2,2,-1], so the score is 6.\nIt can be shown that 6 is the maximum score we can obtain.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-2,-3,0]\n**Output:** 0\n**Explanation:** Any rearrangement of the array will result in a score of 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-106 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxScore(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Codestral-22B-v0.1", "score": 1.473225732185635}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.1882967263533115}, {"name": "deepseek-coder-33b-instruct", "score": 0.7344936276948175}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.013061733296289901}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.9742306531783886}, {"name": "deepseek-coder-v2-lite-instruct", "score": -2.0254936416451397}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.9674198686484337}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.095564504881561}], "rank": [5, 1, 6, 7, 0, 4, 3, 2]}
{"id": "LeetCode/228", "prompt": "# Count the Number of Beautiful Subarrays\n\nYou are given a **0-indexed** integer array `nums`. In one operation, you can:\n\n\n* Choose two different indices `i` and `j` such that `0 <= i, j < nums.length`.\n* Choose a non-negative integer `k` such that the `kth` bit (**0-indexed**) in the binary representation of `nums[i]` and `nums[j]` is `1`.\n* Subtract `2k` from `nums[i]` and `nums[j]`.\n\n\nA subarray is **beautiful** if it is possible to make all of its elements equal to `0` after applying the above operation any number of times.\n\n\nReturn *the number of **beautiful subarrays** in the array* `nums`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,1,2,4]\n**Output:** 2\n**Explanation:** There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4].\n- We can make all elements in the subarray [3,1,2] equal to 0 in the following way:\n  - Choose [3, 1, 2] and k = 1. Subtract 21 from both numbers. The subarray becomes [1, 1, 0].\n  - Choose [1, 1, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 0, 0].\n- We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:\n  - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 22 from both numbers. The subarray becomes [0, 3, 1, 2, 0].\n  - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 2, 0, 2, 0].\n  - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 21 from both numbers. The subarray becomes [0, 0, 0, 0, 0].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,10,4]\n**Output:** 0\n**Explanation:** There are no beautiful subarrays in nums.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulSubarrays(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354235}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.28916370000449554}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.05755823546332284}, {"name": "Codestral-22B-v0.1", "score": -0.5728836924184995}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.5154752294859515}, {"name": "deepseek-coder-33b-instruct", "score": -2.093808820628115}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.99255278654549}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.651056575633121}], "rank": [4, 0, 7, 5, 1, 6, 3, 2]}
{"id": "LeetCode/229", "prompt": "# Minimum Time to Complete All Tasks\n\nThere is a computer that can run an unlimited number of tasks **at the same time**. You are given a 2D integer array `tasks` where `tasks[i] = [starti, endi, durationi]` indicates that the `ith` task should run for a total of `durationi` seconds (not necessarily continuous) within the **inclusive** time range `[starti, endi]`.\n\n\nYou may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\n\n\nReturn *the minimum time during which the computer should be turned on to complete all tasks*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tasks = [[2,3,1],[4,5,1],[1,5,2]]\n**Output:** 2\n**Explanation:** \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tasks = [[1,3,2],[2,5,3],[5,6,2]]\n**Output:** 4\n**Explanation:** \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= tasks.length <= 2000`\n* `tasks[i].length == 3`\n* `1 <= starti, endi <= 2000`\n* `1 <= durationi <= endi - starti + 1`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.294000830587546}, {"name": "deepseek-coder-33b-instruct", "score": -3.608610869457636}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.157694877722863}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.169884841467447}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.845383221197824}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.010235214074916}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.298478547859255}, {"name": "Codestral-22B-v0.1", "score": -6.446687604898323}], "rank": [7, 6, 0, 1, 3, 2, 4, 5]}
{"id": "LeetCode/230", "prompt": "# Pass the Pillow\n\nThere are `n` people standing in a line labeled from `1` to `n`. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.\n\n\n* For example, once the pillow reaches the `nth` person they pass it to the `n - 1th` person, then to the `n - 2th` person and so on.\n\n\nGiven the two positive integers `n` and `time`, return *the index of the person holding the pillow after* `time` *seconds*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 4, time = 5\n**Output:** 2\n**Explanation:** People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2.\nAfer five seconds, the pillow is given to the 2nd person.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, time = 2\n**Output:** 3\n**Explanation:** People pass the pillow in the following way: 1 -> 2 -> 3.\nAfer two seconds, the pillow is given to the 3rd person.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `2 <= n <= 1000`\n* `1 <= time <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def passThePillow(self, n: int, time: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5639804079244755}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.3246057668711977}, {"name": "deepseek-coder-33b-instruct", "score": -1.990635697247539}, {"name": "Codestral-22B-v0.1", "score": -3.0696894120455065}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.68145193828514}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.069368576151923}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.348056115102728}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.118448798715148}], "rank": [4, 7, 6, 5, 0, 1, 3, 2]}
{"id": "LeetCode/231", "prompt": "# Number of Ways to Earn Points\n\nThere is a test that has `n` types of questions. You are given an integer `target` and a **0-indexed** 2D integer array `types` where `types[i] = [counti, marksi]` indicates that there are `counti` questions of the `ith` type, and each one of them is worth `marksi` points.\n\n\n\n\nReturn *the number of ways you can earn **exactly*** `target` *points in the exam*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n**Note** that questions of the same type are indistinguishable.\n\n\n* For example, if there are `3` questions of the same type, then solving the `1st` and `2nd` questions is the same as solving the `1st` and `3rd` questions, or the `2nd` and `3rd` questions.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** target = 6, types = [[6,1],[3,2],[2,3]]\n**Output:** 7\n**Explanation:** You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2nd type: 3 + 3 = 6\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** target = 5, types = [[50,1],[50,2],[50,5]]\n**Output:** 4\n**Explanation:** You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2nd type: 5\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** target = 18, types = [[6,1],[3,2],[2,3]]\n**Output:** 1\n**Explanation:** You can only earn 18 points by answering all questions.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= target <= 1000`\n* `n == types.length`\n* `1 <= n <= 50`\n* `types[i].length == 2`\n* `1 <= counti, marksi <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.9104980646662426}, {"name": "deepseek-coder-33b-instruct", "score": 0.5846070119847395}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.196731596903561}, {"name": "Codestral-22B-v0.1", "score": -1.7730463808928754}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5553101820463295}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.244085533560659}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.083141984883004}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.837403863230966}], "rank": [4, 6, 7, 5, 0, 1, 3, 2]}
{"id": "LeetCode/232", "prompt": "# Split With Minimum Sum\n\nGiven a positive integer `num`, split it into two non-negative integers `num1` and `num2` such that:\n\n\n* The concatenation of `num1` and `num2` is a permutation of `num`.\n\t+ In other words, the sum of the number of occurrences of each digit in `num1` and `num2` is equal to the number of occurrences of that digit in `num`.\n* `num1` and `num2` can contain leading zeros.\n\n\nReturn *the **minimum** possible sum of* `num1` *and* `num2`.\n\n\n**Notes:**\n\n\n* It is guaranteed that `num` does not contain any leading zeros.\n* The order of occurrence of the digits in `num1` and `num2` may differ from the order of occurrence of `num`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 4325\n**Output:** 59\n**Explanation:** We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 687\n**Output:** 75\n**Explanation:** We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `10 <= num <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def splitNum(self, num: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.8540945240042497}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.5962508094942565}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354227}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.23119728612130697}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.4360884695897234}, {"name": "Codestral-22B-v0.1", "score": -4.3252069563650295}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.891851758106289}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.566082405159459}], "rank": [6, 0, 4, 7, 1, 5, 3, 2]}
{"id": "LeetCode/233", "prompt": "# Count Ways to Group Overlapping Ranges\n\nYou are given a 2D integer array `ranges` where `ranges[i] = [starti, endi]` denotes that all integers between `starti` and `endi` (both **inclusive**) are contained in the `ith` range.\n\n\nYou are to split `ranges` into **two** (possibly empty) groups such that:\n\n\n* Each range belongs to exactly one group.\n* Any two **overlapping** ranges must belong to the **same** group.\n\n\nTwo ranges are said to be **overlapping** if there exists at least **one** integer that is present in both ranges.\n\n\n* For example, `[1, 3]` and `[2, 5]` are overlapping because `2` and `3` occur in both ranges.\n\n\nReturn *the **total number** of ways to split* `ranges` *into two groups*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ranges = [[6,10],[5,15]]\n**Output:** 2\n**Explanation:** \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ranges = [[1,3],[10,20],[2,5],[4,8]]\n**Output:** 4\n**Explanation:** \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= ranges.length <= 105`\n* `ranges[i].length == 2`\n* `0 <= starti <= endi <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countWays(self, ranges: List[List[int]]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.124432148769408}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.8147907640658927}, {"name": "Yi-Coder-1.5B-Chat", "score": -0.992848535550273}, {"name": "deepseek-coder-33b-instruct", "score": -3.2636592262623294}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.484357565771344}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.1429259172846455}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.474972901715365}, {"name": "Codestral-22B-v0.1", "score": -6.553463208030912}], "rank": [7, 4, 0, 6, 1, 3, 2, 5]}
{"id": "LeetCode/234", "prompt": "# Left and Right Sum Differences\n\nGiven a **0-indexed** integer array `nums`, find a **0-indexed** integer array `answer` where:\n\n\n* `answer.length == nums.length`.\n* `answer[i] = |leftSum[i] - rightSum[i]|`.\n\n\nWhere:\n\n\n* `leftSum[i]` is the sum of elements to the left of the index `i` in the array `nums`. If there is no such element, `leftSum[i] = 0`.\n* `rightSum[i]` is the sum of elements to the right of the index `i` in the array `nums`. If there is no such element, `rightSum[i] = 0`.\n\n\nReturn *the array* `answer`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,4,8,3]\n**Output:** [15,1,11,22]\n**Explanation:** The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].\nThe array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1]\n**Output:** [0]\n**Explanation:** The array leftSum is [0] and the array rightSum is [0].\nThe array answer is [|0 - 0|] = [0].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.9263821954191975}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.7121600417144078}, {"name": "deepseek-coder-33b-instruct", "score": 0.5376194061841}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.4175518925765367}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.5556788002625783}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.3553075357009186}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.5252100918856906}], "rank": [0, 4, 6, 3, 7, 5, 1, 2]}
{"id": "LeetCode/235", "prompt": "# Find the Divisibility Array of a String\n\nYou are given a **0-indexed** string `word` of length `n` consisting of digits, and a positive integer `m`.\n\n\nThe **divisibility array** `div` of `word` is an integer array of length `n` such that:\n\n\n* `div[i] = 1` if the **numeric value** of `word[0,...,i]` is divisible by `m`, or\n* `div[i] = 0` otherwise.\n\n\nReturn *the divisibility array of*`word`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"998244353\", m = 3\n**Output:** [1,1,0,0,0,1,1,0,0]\n**Explanation:** There are only 4 prefixes that are divisible by 3: \"9\", \"99\", \"998244\", and \"9982443\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"1010\", m = 10\n**Output:** [0,1,0,1]\n**Explanation:** There are only 2 prefixes that are divisible by 10: \"10\", and \"1010\".\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `word.length == n`\n* `word` consists of digits from `0` to `9`\n* `1 <= m <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 2.0201232576405066}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.8006911672170967}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.1902978170069503}, {"name": "Codestral-22B-v0.1", "score": 1.123452500255687}, {"name": "deepseek-coder-33b-instruct", "score": 0.6231516199593159}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5596157879354235}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.029852963149681777}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.6687069543664657}], "rank": [0, 2, 1, 5, 6, 4, 7, 3]}
{"id": "LeetCode/236", "prompt": "# Find the Maximum Number of Marked Indices\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n\n\n* Pick two **different unmarked** indices `i` and `j` such that `2 * nums[i] <= nums[j]`, then mark `i` and `j`.\n\n\nReturn *the maximum possible number of marked indices in `nums` using the above operation any number of times*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,5,2,4]\n**Output:** 2\n**Explanation:** In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,2,5,4]\n**Output:** 4\n**Explanation:** In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [7,6,8]\n**Output:** 0\n**Explanation:** There is no valid operation to do, so the answer is 0.\n\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n \n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.5807654759568024}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.5206269471747067}, {"name": "deepseek-coder-33b-instruct", "score": -0.5914039127122033}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.6926722523526325}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.1789307786634495}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.333046452452163}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.272814926135613}], "rank": [4, 7, 5, 6, 0, 1, 3, 2]}
{"id": "LeetCode/237", "prompt": "# Merge Two 2D Arrays by Summing Values\n\nYou are given two **2D** integer arrays `nums1` and `nums2.`\n\n\n* `nums1[i] = [idi, vali]` indicate that the number with the id `idi` has a value equal to `vali`.\n* `nums2[i] = [idi, vali]` indicate that the number with the id `idi` has a value equal to `vali`.\n\n\nEach array contains **unique** ids and is sorted in **ascending** order by id.\n\n\nMerge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:\n\n\n* Only ids that appear in at least one of the two arrays should be included in the resulting array.\n* Each id should be included **only once** and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be `0`.\n\n\nReturn *the resulting array*. The returned array must be sorted in ascending order by id.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]\n**Output:** [[1,6],[2,3],[3,2],[4,6]]\n**Explanation:** The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]\n**Output:** [[1,3],[2,4],[3,6],[4,3],[5,5]]\n**Explanation:** There are no common ids, so we just include each id with its value in the resulting list.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 200`\n* `nums1[i].length == nums2[j].length == 2`\n* `1 <= idi, vali <= 1000`\n* Both arrays contain unique ids.\n* Both arrays are in strictly ascending order by id.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.8477044550887847}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6071644870167896}, {"name": "Codestral-22B-v0.1", "score": -0.8317708388451477}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.3355459237571736}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.845996195011038}, {"name": "deepseek-coder-33b-instruct", "score": -3.5443185627590283}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.138711836037815}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.227227959544548}], "rank": [1, 4, 5, 2, 0, 6, 3, 7]}
{"id": "LeetCode/238", "prompt": "# Minimum Operations to Reduce an Integer to 0\n\nYou are given a positive integer `n`, you can do the following operation **any** number of times:\n\n\n* Add or subtract a **power** of `2` from `n`.\n\n\nReturn *the **minimum** number of operations to make* `n` *equal to* `0`.\n\n\nA number `x` is power of `2` if `x == 2i` where `i >= 0`*.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 39\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 20 = 1 to n, so now n = 40.\n- Subtract 23 = 8 from n, so now n = 32.\n- Subtract 25 = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 54\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 21 = 2 to n, so now n = 56.\n- Add 23 = 8 to n, so now n = 64.\n- Subtract 26 = 64 from n, so now n = 0.\nSo the minimum number of operations is 3.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, n: int) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.4535367953427287}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -3.840132214092278}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.056019447900432}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.200144981108312}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.530867040512245}, {"name": "Codestral-22B-v0.1", "score": -6.107379171704338}, {"name": "CodeLlama-7b-Instruct-hf", "score": -6.139556912351276}, {"name": "deepseek-coder-33b-instruct", "score": -6.20746263026132}], "rank": [0, 7, 3, 1, 4, 5, 2, 6]}
{"id": "LeetCode/239", "prompt": "# Count the Number of Square-Free Subsets\n\nYou are given a positive integer **0-indexed** array `nums`.\n\n\nA subset of the array `nums` is **square-free** if the product of its elements is a **square-free integer**.\n\n\nA **square-free integer** is an integer that is divisible by no square number other than `1`.\n\n\nReturn *the number of square-free non-empty subsets of the array* **nums**. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nA **non-empty** **subset** of `nums` is an array that can be obtained by deleting some (possibly none but not all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,4,4,5]\n**Output:** 3\n**Explanation:** There are 3 square-free subsets in this example:\n- The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer.\n- The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer.\n- The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer.\nIt can be proven that there are no more than 3 square-free subsets in the given array.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1]\n**Output:** 1\n**Explanation:** There is 1 square-free subset in this example:\n- The subset consisting of the 0th element [1]. The product of its elements is 1, which is a square-free integer.\nIt can be proven that there is no more than 1 square-free subset in the given array.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 30`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def squareFreeSubsets(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -2.214679774349878}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.836206695601791}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.106470742019941}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.499409590308925}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.164557376368512}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.719222659144079}, {"name": "Codestral-22B-v0.1", "score": -6.3113899221000045}, {"name": "deepseek-coder-33b-instruct", "score": -6.616643331227164}], "rank": [4, 7, 0, 1, 3, 2, 5, 6]}
{"id": "LeetCode/240", "prompt": "# Find the String with LCP\n\nWe define the `lcp` matrix of any **0-indexed** string `word` of `n` lowercase English letters as an `n x n` grid such that:\n\n\n* `lcp[i][j]` is equal to the length of the **longest common prefix** between the substrings `word[i,n-1]` and `word[j,n-1]`.\n\n\nGiven an `n x n` matrix `lcp`, return the alphabetically smallest string `word` that corresponds to `lcp`. If there is no such string, return an empty string.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"aabd\"` is lexicographically smaller than `\"aaca\"` because the first position they differ is at the third letter, and `'b'` comes before `'c'`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\n**Output:** \"abab\"\n**Explanation:** lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\n**Output:** \"aaaa\"\n**Explanation:** lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\". \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]\n**Output:** \"\"\n**Explanation:** lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n ==``lcp.length ==` `lcp[i].length` `<= 1000`\n* `0 <= lcp[i][j] <= n`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": -3.8509983035903717}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.260818991738191}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.477834996009257}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.856091459604088}, {"name": "Codestral-22B-v0.1", "score": -6.304467083790525}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.4108325603851375}, {"name": "deepseek-coder-33b-instruct", "score": -6.691016175340922}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -7.012396335891575}], "rank": [0, 1, 3, 2, 5, 4, 6, 7]}
{"id": "LeetCode/241", "prompt": "# Maximum Difference by Remapping a Digit\n\nYou are given an integer `num`. You know that Bob will sneakily **remap** one of the `10` possible digits (`0` to `9`) to another digit.\n\n\nReturn *the difference between the maximum and minimum values Bob can make by remapping **exactly** **one** digit in* `num`.\n\n\n**Notes:**\n\n\n* When Bob remaps a digit d1 to another digit d2, Bob replaces all occurrences of `d1` in `num` with `d2`.\n* Bob can remap a digit to itself, in which case `num` does not change.\n* Bob can remap different digits for obtaining minimum and maximum values respectively.\n* The resulting number after remapping can contain leading zeroes.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 11891\n**Output:** 99009\n**Explanation:** \nTo achieve the maximum value, Bob can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Bob can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 90\n**Output:** 99\n**Explanation:**\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99.\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= num <= 108`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minMaxDifference(self, num: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.31187716375397034}, {"name": "Codestral-22B-v0.1", "score": -3.263034801832496}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.3781334420636036}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.132859898450435}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.980753239614335}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.244410132479126}, {"name": "deepseek-coder-33b-instruct", "score": -5.983684359789019}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.291835770675751}], "rank": [7, 5, 0, 1, 3, 2, 6, 4]}
{"id": "LeetCode/242", "prompt": "# Minimum Score by Changing Two Elements\n\nYou are given a **0-indexed** integer array `nums`.\n\n\n* The **low** score of `nums` is the minimum value of `|nums[i] - nums[j]|` over all `0 <= i < j < nums.length`.\n* The **high** score of `nums` is the maximum value of `|nums[i] - nums[j]|` over all `0 <= i < j < nums.length`.\n* The **score** of `nums` is the sum of the **high** and **low** scores of nums.\n\n\nTo minimize the score of `nums`, we can change the value of **at most two** elements of `nums`.\n\n\nReturn *the **minimum** possible **score** after changing the value of **at most two** elements o*f `nums`.\n\n\nNote that `|x|` denotes the absolute value of `x`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,4,3]\n**Output:** 0\n**Explanation:** Change value of nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. Now, the value of |nums[i] - nums[j]| is always equal to 0, so we return 0 + 0 = 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,7,8,5]\n**Output:** 3\n**Explanation:** Change nums[0] and nums[1] to be 6. Now nums becomes [6,6,7,8,5].\nOur low score is achieved when i = 0 and j = 1, in which case |nums[i] - nums[j]| = |6 - 6| = 0.\nOur high score is achieved when i = 3 and j = 4, in which case |nums[i] - nums[j]| = |8 - 5| = 3.\nThe sum of our high and low score is 3, which we can prove to be minimal.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 0.5482845741282758}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.039640659474423856}, {"name": "deepseek-coder-33b-instruct", "score": -0.533005378840608}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.7982461168197084}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -3.795938526407344}, {"name": "Codestral-22B-v0.1", "score": -4.42037848081908}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.539030383483546}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.507524252123373}], "rank": [0, 7, 6, 4, 1, 5, 3, 2]}
{"id": "LeetCode/243", "prompt": "# Minimum Impossible OR\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nWe say that an integer x is **expressible** from `nums` if there exist some integers `0 <= index1 < index2 < ... < indexk < nums.length` for which `nums[index1] | nums[index2] | ... | nums[indexk] = x`. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of `nums`.\n\n\nReturn *the minimum **positive non-zero integer** that is not* *expressible from* `nums`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1]\n**Output:** 4\n**Explanation:** 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,3,2]\n**Output:** 1\n**Explanation:** We can show that 1 is the smallest number that is not expressible.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minImpossibleOR(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 1.8826001457375816}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.6501297954762553}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.5540683963051345}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.011252766355647}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.2083872782627605}, {"name": "deepseek-coder-33b-instruct", "score": -4.507416277675272}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.342295973720247}], "rank": [0, 4, 7, 5, 1, 3, 6, 2]}
{"id": "LeetCode/244", "prompt": "# Handling Sum Queries After Update\n\nYou are given two **0-indexed** arrays `nums1` and `nums2` and a 2D array `queries` of queries. There are three types of queries:\n\n\n1. For a query of type 1, `queries[i] = [1, l, r]`. Flip the values from `0` to `1` and from `1` to `0` in `nums1` from index `l` to index `r`. Both `l` and `r` are **0-indexed**.\n2. For a query of type 2, `queries[i] = [2, p, 0]`. For every index `0 <= i < n`, set `nums2[i] = nums2[i] + nums1[i] * p`.\n3. For a query of type 3, `queries[i] = [3, 0, 0]`. Find the sum of the elements in `nums2`.\n\n\nReturn *an array containing all the answers to the third type queries.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]\n**Output:** [3]\n**Explanation:** After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]\n**Output:** [5]\n**Explanation:** After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums1.length,nums2.length <= 105`\n* `nums1.length = nums2.length`\n* `1 <= queries.length <= 105`\n* `queries[i].length = 3`\n* `0 <= l <= r <= nums1.length - 1`\n* `0 <= p <= 106`\n* `0 <= nums1[i] <= 1`\n* `0 <= nums2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def handleQuery(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.1809372339241122}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -1.885485479885138}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.452366837147341}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.288100496641719}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.396570360114723}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.592935648319749}, {"name": "deepseek-coder-33b-instruct", "score": -5.5714874252086}], "rank": [4, 7, 5, 2, 0, 1, 3, 6]}
{"id": "LeetCode/245", "prompt": "# Find the Array Concatenation Value\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nThe **concatenation** of two numbers is the number formed by concatenating their numerals.\n\n\n* For example, the concatenation of `15`, `49` is `1549`.\n\n\nThe **concatenation value** of `nums` is initially equal to `0`. Perform this operation until `nums` becomes empty:\n\n\n* If there exists more than one number in `nums`, pick the first element and last element in `nums` respectively and add the value of their concatenation to the **concatenation value** of `nums`, then delete the first and last element from `nums`.\n* If one element exists, add its value to the **concatenation value** of `nums`, then delete it.\n\n\nReturn *the concatenation value of the `nums`*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [7,52,2,4]\n**Output:** 596\n**Explanation:** Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to [52,2].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,14,13,8,12]\n**Output:** 673\n**Explanation:** Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to [14,13,8].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to [13].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 104`\n\n\n \n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.0404787605596133}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.380843571872994}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.2366854517678352}, {"name": "Codestral-22B-v0.1", "score": 0.5387098793355403}, {"name": "starcoder2-15b-instruct-v0.1", "score": 0.49253800224113053}, {"name": "deepseek-coder-33b-instruct", "score": 0.41054280765414397}, {"name": "CodeLlama-7b-Instruct-hf", "score": 0.21953794497010204}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}], "rank": [0, 1, 4, 5, 3, 6, 2, 7]}
{"id": "LeetCode/246", "prompt": "# Count the Number of Fair Pairs\n\nGiven a **0-indexed** integer array `nums` of size `n` and two integers `lower` and `upper`, return *the number of fair pairs*.\n\n\nA pair `(i, j)` is **fair** if:\n\n\n* `0 <= i < j < n`, and\n* `lower <= nums[i] + nums[j] <= upper`\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,7,4,4,5], lower = 3, upper = 6\n**Output:** 6\n**Explanation:** There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,7,9,2,5], lower = 11, upper = 11\n**Output:** 1\n**Explanation:** There is a single fair pair: (2,3).\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `nums.length == n`\n* `-109 <= nums[i] <= 109`\n* `-109 <= lower <= upper <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n```\n", "scores": [{"name": "starcoder2-15b-instruct-v0.1", "score": 1.2013176855953311}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -1.2375168768967333}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.354667830640442}, {"name": "deepseek-coder-33b-instruct", "score": -3.42424828662789}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.001058998166105}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.271430213331855}, {"name": "Codestral-22B-v0.1", "score": -4.817195515034374}, {"name": "deepseek-coder-v2-lite-instruct", "score": -4.970960466795134}], "rank": [3, 7, 2, 6, 0, 1, 5, 4]}
{"id": "LeetCode/247", "prompt": "# Substring XOR Queries\n\nYou are given a **binary string** `s`, and a **2D** integer array `queries` where `queries[i] = [firsti, secondi]`.\n\n\nFor the `ith` query, find the **shortest substring** of `s` whose **decimal value**, `val`, yields `secondi` when **bitwise XORed** with `firsti`. In other words, `val ^ firsti == secondi`.\n\n\nThe answer to the `ith` query is the endpoints (**0-indexed**) of the substring `[lefti, righti]` or `[-1, -1]` if no such substring exists. If there are multiple answers, choose the one with the **minimum** `lefti`.\n\n\n*Return an array* `ans` *where* `ans[i] = [lefti, righti]` *is the answer to the* `ith` *query.*\n\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"101101\", queries = [[0,5],[1,2]]\n**Output:** [[0,2],[2,3]]\n**Explanation:** For the first query the substring in range [0,2] is **\"101\"** which has a decimal value of **`5`**, and **`5 ^ 0 = 5`**, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is **\"11\",** and has a decimal value of **3**, and **3 `^ 1 = 2`**. So, [2,3] is returned for the second query. \n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"0101\", queries = [[12,8]]\n**Output:** [[-1,-1]]\n**Explanation:** In this example there is no substring that answers the query, hence [-1,-1] is returned.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"1\", queries = [[4,5]]\n**Output:** [[0,0]]\n**Explanation:** For this example, the substring in range [0,0] has a decimal value of **`1`**, and **`1 ^ 4 = 5`**. So, the answer is [0,0].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s[i]` is either `'0'` or `'1'`.\n* `1 <= queries.length <= 105`\n* `0 <= firsti, secondi <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -3.4409207357816554}, {"name": "deepseek-coder-33b-instruct", "score": -3.624569482167792}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.0288455799894045}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.272602317392592}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.741657206438246}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4181250179527485}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -5.479880563584485}, {"name": "Codestral-22B-v0.1", "score": -6.3784261836515865}], "rank": [4, 6, 0, 1, 3, 2, 7, 5]}
{"id": "LeetCode/248", "prompt": "# Subsequence With the Minimum Score\n\nYou are given two strings `s` and `t`.\n\n\nYou are allowed to remove any number of characters from the string `t`.\n\n\nThe score of the string is `0` if no characters are removed from the string `t`, otherwise:\n\n\n* Let `left` be the minimum index among all removed characters.\n* Let `right` be the maximum index among all removed characters.\n\n\nThen the score of the string is `right - left + 1`.\n\n\nReturn *the minimum possible score to make* `t`*a subsequence of* `s`*.*\n\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not).\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abacaba\", t = \"bzaa\"\n**Output:** 1\n**Explanation:** In this example, we remove the character \"z\" at index 1 (0-indexed).\nThe string t becomes \"baa\" which is a subsequence of the string \"abacaba\" and the score is 1 - 1 + 1 = 1.\nIt can be proven that 1 is the minimum score that we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"cde\", t = \"xyz\"\n**Output:** 3\n**Explanation:** In this example, we remove characters \"x\", \"y\" and \"z\" at indices 0, 1, and 2 (0-indexed).\nThe string t becomes \"\" which is a subsequence of the string \"cde\" and the score is 2 - 0 + 1 = 3.\nIt can be proven that 3 is the minimum score that we can achieve.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= s.length, t.length <= 105`\n* `s` and `t` consist of only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumScore(self, s: str, t: str) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.272211768666675}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.276888316550576}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.242635509120757}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.562587505989159}, {"name": "Codestral-22B-v0.1", "score": -6.177612108735465}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.414612390068454}, {"name": "deepseek-coder-33b-instruct", "score": -6.432026492253575}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.99591999062559}], "rank": [1, 0, 2, 3, 5, 4, 6, 7]}
{"id": "LeetCode/249", "prompt": "# Take Gifts From the Richest Pile\n\nYou are given an integer array `gifts` denoting the number of gifts in various piles. Every second, you do the following:\n\n\n* Choose the pile with the maximum number of gifts.\n* If there is more than one pile with the maximum number of gifts, choose any.\n* Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.\n\n\nReturn *the number of gifts remaining after* `k` *seconds.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** gifts = [25,64,9,4,100], k = 4\n**Output:** 29\n**Explanation:** \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** gifts = [1,1,1,1], k = 4\n**Output:** 4\n**Explanation:** \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can't take any pile with you. \nSo, the total gifts remaining are 4.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= gifts.length <= 103`\n* `1 <= gifts[i] <= 109`\n* `1 <= k <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def pickGifts(self, gifts: List[int], k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 0.7161399957723518}, {"name": "deepseek-coder-33b-instruct", "score": 0.5697563452827525}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.7269383898777608}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.9884256365553146}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.5009837605436913}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -2.784852236732947}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.3633745031813405}], "rank": [4, 6, 7, 5, 3, 0, 1, 2]}
{"id": "LeetCode/250", "prompt": "# Count Vowel Strings in Ranges\n\nYou are given a **0-indexed** array of strings `words` and a 2D array of integers `queries`.\n\n\nEach query `queries[i] = [li, ri]` asks us to find the number of strings present in the range `li` to `ri` (both **inclusive**) of `words` that start and end with a vowel.\n\n\nReturn *an array* `ans` *of size* `queries.length`*, where* `ans[i]` *is the answer to the* `i`th *query*.\n\n\n**Note** that the vowel letters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]]\n**Output:** [2,3,0]\n**Explanation:** The strings starting and ending with a vowel are \"aba\", \"ece\", \"aa\" and \"e\".\nThe answer to the query [0,2] is 2 (strings \"aba\" and \"ece\").\nto query [1,4] is 3 (strings \"ece\", \"aa\", \"e\").\nto query [1,1] is 0.\nWe return [2,3,0].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]]\n**Output:** [3,2,1]\n**Explanation:** Every string satisfies the conditions, so we return [3,2,1].\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 105`\n* `1 <= words[i].length <= 40`\n* `words[i]` consists only of lowercase English letters.\n* `sum(words[i].length) <= 3 * 105`\n* `1 <= queries.length <= 105`\n* `0 <= li <= ri < words.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:\n```\n", "scores": [{"name": "deepseek-coder-33b-instruct", "score": 0.6248162319831456}, {"name": "deepseek-coder-v2-lite-instruct", "score": 0.5733574157877195}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.6346179082798562}, {"name": "Yi-Coder-1.5B-Chat", "score": -1.1703821234082854}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -1.6011352594265849}, {"name": "CodeLlama-7b-Instruct-hf", "score": -2.367601981284214}, {"name": "starcoder2-15b-instruct-v0.1", "score": -3.624790375321295}], "rank": [6, 4, 7, 5, 0, 1, 2, 3]}
{"id": "LeetCode/251", "prompt": "# House Robber IV\n\nThere are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he **refuses to steal from adjacent homes**.\n\n\nThe **capability** of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\n\n\nYou are given an integer array `nums` representing how much money is stashed in each house. More formally, the `ith` house from the left has `nums[i]` dollars.\n\n\nYou are also given an integer `k`, representing the **minimum** number of houses the robber will steal from. It is always possible to steal at least `k` houses.\n\n\nReturn *the **minimum** capability of the robber out of all the possible ways to steal at least* `k` *houses*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,9], k = 2\n**Output:** 5\n**Explanation:** \nThere are three ways to rob at least 2 houses:\n- Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5.\n- Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9.\n- Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9.\nTherefore, we return min(5, 9, 9) = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,7,9,3,1], k = 2\n**Output:** 2\n**Explanation:** There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= (nums.length + 1)/2`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minCapability(self, nums: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.23519188983038486}, {"name": "Codestral-22B-v0.1", "score": -0.4019239529209493}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.8320929012274254}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.132859898450435}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.183209775350729}, {"name": "deepseek-coder-33b-instruct", "score": -4.793165711724509}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.091145584743526}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.4917272203274115}], "rank": [7, 5, 4, 1, 0, 6, 3, 2]}
{"id": "LeetCode/252", "prompt": "# Rearranging Fruits\n\nYou have two fruit baskets containing `n` fruits each. You are given two **0-indexed** integer arrays `basket1` and `basket2` representing the cost of fruit in each basket. You want to make both baskets **equal**. To do so, you can use the following operation as many times as you want:\n\n\n* Chose two indices `i` and `j`, and swap the `ith`fruit of `basket1` with the `jth` fruit of `basket2`.\n* The cost of the swap is `min(basket1[i],basket2[j])`.\n\n\nTwo baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\n\n\nReturn *the minimum cost to make both the baskets equal or* `-1` *if impossible.*\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** basket1 = [4,2,2,2], basket2 = [1,4,1,2]\n**Output:** 1\n**Explanation:** Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** basket1 = [2,3,4,1], basket2 = [3,2,5,1]\n**Output:** -1\n**Explanation:** It can be shown that it is impossible to make both the baskets equal.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `basket1.length == basket2.length`\n* `1 <= basket1.length <= 105`\n* `1 <= basket1[i],basket2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minCost(self, basket1: List[int], basket2: List[int]) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": -2.740245933460354}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.237232049770649}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.404472823503712}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.721351940277501}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.607315626168495}, {"name": "Codestral-22B-v0.1", "score": -6.194425799059694}, {"name": "deepseek-coder-v2-lite-instruct", "score": -6.367542038321554}, {"name": "deepseek-coder-33b-instruct", "score": -6.465522446681758}], "rank": [7, 0, 1, 3, 2, 5, 4, 6]}
{"id": "LeetCode/253", "prompt": "# Separate the Digits in an Array\n\nGiven an array of positive integers `nums`, return *an array* `answer` *that consists of the digits of each integer in* `nums` *after separating them in **the same order** they appear in* `nums`.\n\n\nTo separate the digits of an integer is to get all the digits it has in the same order.\n\n\n* For example, for the integer `10921`, the separation of its digits is `[1,0,9,2,1]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [13,25,83,77]\n**Output:** [1,3,2,5,8,3,7,7]\n**Explanation:** \n- The separation of 13 is [1,3].\n- The separation of 25 is [2,5].\n- The separation of 83 is [8,3].\n- The separation of 77 is [7,7].\nanswer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,1,3,9]\n**Output:** [7,1,3,9]\n**Explanation:** The separation of each integer in nums is itself.\nanswer = [7,1,3,9].\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def separateDigits(self, nums: List[int]) -> List[int]:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.3516889439302218}, {"name": "CodeLlama-7b-Instruct-hf", "score": 1.673884988278754}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.6447392148175881}, {"name": "starcoder2-15b-instruct-v0.1", "score": 1.248752359814222}, {"name": "Codestral-22B-v0.1", "score": 1.1426811056704205}, {"name": "deepseek-coder-33b-instruct", "score": 0.6956193697053337}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 0.07222064532562955}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}], "rank": [0, 2, 4, 3, 5, 6, 1, 7]}
{"id": "LeetCode/254", "prompt": "# Maximum Number of Integers to Choose From a Range I\n\nYou are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules:\n\n\n* The chosen integers have to be in the range `[1, n]`.\n* Each integer can be chosen **at most once**.\n* The chosen integers should not be in the array `banned`.\n* The sum of the chosen integers should not exceed `maxSum`.\n\n\nReturn *the **maximum** number of integers you can choose following the mentioned rules*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** banned = [1,6,5], n = 5, maxSum = 6\n**Output:** 2\n**Explanation:** You can choose the integers 2 and 4.\n2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1\n**Output:** 0\n**Explanation:** You cannot choose any integer while following the mentioned conditions.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** banned = [11], n = 7, maxSum = 50\n**Output:** 7\n**Explanation:** You can choose the integers 1, 2, 3, 4, 5, 6, and 7.\nThey are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= banned.length <= 104`\n* `1 <= banned[i], n <= 104`\n* `1 <= maxSum <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 2.915701226260233}, {"name": "deepseek-coder-v2-lite-instruct", "score": 1.6507526765187492}, {"name": "Codestral-22B-v0.1", "score": 1.603990337812168}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.3378829629240281}, {"name": "starcoder2-15b-instruct-v0.1", "score": -1.8046118394967898}, {"name": "Yi-Coder-1.5B-Chat", "score": -2.4729942314758073}, {"name": "deepseek-coder-33b-instruct", "score": -3.2229378798711608}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.911966690975883}], "rank": [1, 4, 5, 7, 3, 0, 6, 2]}
{"id": "LeetCode/255", "prompt": "# Maximize Win From Two Segments\n\nThere are some prizes on the **X-axis**. You are given an integer array `prizePositions` that is **sorted in non-decreasing order**, where `prizePositions[i]` is the position of the `ith` prize. There could be different prizes at the same position on the line. You are also given an integer `k`.\n\n\nYou are allowed to select two segments with integer endpoints. The length of each segment must be `k`. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\n\n* For example if `k = 2`, you can choose segments `[1, 3]` and `[2, 4]`, and you will win any prize i that satisfies `1 <= prizePositions[i] <= 3` or `2 <= prizePositions[i] <= 4`.\n\n\nReturn *the **maximum** number of prizes you can win if you choose the two segments optimally*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prizePositions = [1,1,2,2,3,3,5], k = 2\n**Output:** 7\n**Explanation:** In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prizePositions = [1,2,3,4], k = 0\n**Output:** 2\n**Explanation:** For this example, **one choice** for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= prizePositions.length <= 105`\n* `1 <= prizePositions[i] <= 109`\n* `0 <= k <= 109`\n* `prizePositions` is sorted in non-decreasing order.\n\n\n \n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximizeWin(self, prizePositions: List[int], k: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "deepseek-coder-33b-instruct", "score": -2.2324965304351894}, {"name": "Yi-Coder-1.5B-Chat", "score": -4.156818453477455}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.162501528882383}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.035013203917698}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.504453101441246}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.601616849894894}, {"name": "Codestral-22B-v0.1", "score": -6.358223476334067}], "rank": [7, 6, 0, 1, 4, 2, 3, 5]}
{"id": "LeetCode/256", "prompt": "# Count Distinct Numbers on Board\n\nYou are given a positive integer `n`, that is initially placed on a board. Every day, for `109` days, you perform the following procedure:\n\n\n* For each number `x` present on the board, find all numbers `1 <= i <= n` such that `x % i == 1`.\n* Then, place those numbers on the board.\n\n\nReturn *the number of **distinct** integers present on the board after* `109` *days have elapsed*.\n\n\n**Note:**\n\n\n* Once a number is placed on the board, it will remain on it until the end.\n* `%` stands for the modulo operation. For example, `14 % 3` is `2`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5\n**Output:** 4\n**Explanation:** Initially, 5 is present on the board. \nThe next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. \nAfter that day, 3 will be added to the board because 4 % 3 == 1. \nAt the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** \nSince 3 % 2 == 1, 2 will be added to the board. \nAfter a billion days, the only two distinct numbers on the board are 2 and 3. \n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distinctIntegers(self, n: int) -> int:\n```\n", "scores": [{"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.32765729217717876}, {"name": "deepseek-coder-33b-instruct", "score": -3.3309572109943697}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.8372132486196295}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.120207221747828}, {"name": "starcoder2-15b-instruct-v0.1", "score": -4.423360498166859}, {"name": "Codestral-22B-v0.1", "score": -5.782347167526864}, {"name": "deepseek-coder-v2-lite-instruct", "score": -5.785178112860195}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.833476514049468}], "rank": [7, 6, 0, 1, 3, 5, 4, 2]}
{"id": "LeetCode/257", "prompt": "# Put Marbles in Bags\n\nYou have `k` bags. You are given a **0-indexed** integer array `weights` where `weights[i]` is the weight of the `ith` marble. You are also given the integer `k.`\n\n\nDivide the marbles into the `k` bags according to the following rules:\n\n\n* No bag is empty.\n* If the `ith` marble and `jth` marble are in a bag, then all marbles with an index between the `ith` and `jth` indices should also be in that same bag.\n* If a bag consists of all the marbles with an index from `i` to `j` inclusively, then the cost of the bag is `weights[i] + weights[j]`.\n\n\nThe **score** after distributing the marbles is the sum of the costs of all the `k` bags.\n\n\nReturn *the **difference** between the **maximum** and **minimum** scores among marble distributions*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** weights = [1,3,5,1], k = 2\n**Output:** 4\n**Explanation:** \nThe distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. \nThe distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. \nThus, we return their difference 10 - 6 = 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** weights = [1, 3], k = 2\n**Output:** 0\n**Explanation:** The only distribution possible is [1],[3]. \nSince both the maximal and minimal score are the same, we return 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= k <= weights.length <= 105`\n* `1 <= weights[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def putMarbles(self, weights: List[int], k: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": -2.155199188465885}, {"name": "Codestral-22B-v0.1", "score": -3.2122710367704683}, {"name": "deepseek-coder-33b-instruct", "score": -3.5231423937083632}, {"name": "Yi-Coder-1.5B-Chat", "score": -3.7768903314366495}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.153744905503548}, {"name": "starcoder2-15b-instruct-v0.1", "score": -5.150466799269258}, {"name": "CodeLlama-7b-Instruct-hf", "score": -5.546613912265524}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.678734490495051}], "rank": [4, 5, 6, 0, 1, 3, 2, 7]}
{"id": "LeetCode/258", "prompt": "# Count Increasing Quadruplets\n\nGiven a **0-indexed** integer array `nums` of size `n` containing all numbers from `1` to `n`, return *the number of increasing quadruplets*.\n\n\nA quadruplet `(i, j, k, l)` is increasing if:\n\n\n* `0 <= i < j < k < l < n`, and\n* `nums[i] < nums[k] < nums[j] < nums[l]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,4,5]\n**Output:** 2\n**Explanation:** \n- When i = 0, j = 1, k = 2, and l = 3, nums[i] < nums[k] < nums[j] < nums[l].\n- When i = 0, j = 1, k = 2, and l = 4, nums[i] < nums[k] < nums[j] < nums[l]. \nThere are no other quadruplets, so we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 0\n**Explanation:** There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] < nums[k], we return 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `4 <= nums.length <= 4000`\n* `1 <= nums[i] <= nums.length`\n* All the integers of `nums` are **unique**. `nums` is a permutation.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n```\n", "scores": [{"name": "Yi-Coder-1.5B-Chat", "score": 3.389376462318397}, {"name": "starcoder2-15b-instruct-v0.1", "score": 2.336526326422078}, {"name": "deepseek-coder-v2-lite-instruct", "score": -0.8400751813103327}, {"name": "Codestral-22B-v0.1", "score": -1.728013105434509}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.840276685913809}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": -4.360036616782266}, {"name": "deepseek-coder-33b-instruct", "score": -6.166005916582974}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": -6.994534629055604}], "rank": [0, 3, 4, 5, 2, 1, 6, 7]}
{"id": "LeetCode/259", "prompt": "# Alternating Digit Sum\n\nYou are given a positive integer `n`. Each digit of `n` has a sign according to the following rules:\n\n\n* The **most significant digit** is assigned a **positive** sign.\n* Each other digit has an opposite sign to its adjacent digits.\n\n\nReturn *the sum of all digits with their corresponding sign*.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 521\n**Output:** 4\n**Explanation:** (+5) + (-2) + (+1) = 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 111\n**Output:** 1\n**Explanation:** (+1) + (-1) + (+1) = 1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 886996\n**Output:** 0\n**Explanation:** (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.\n\n```\n\n \n\n\n**Constraints:**\n\n\n* `1 <= n <= 109`\n\n\n \n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def alternateDigitSum(self, n: int) -> int:\n```\n", "scores": [{"name": "deepseek-coder-v2-lite-instruct", "score": 1.5235988685212938}, {"name": "Qwen2.5-Coder-1.5B-Instruct", "score": 1.282400636608394}, {"name": "Yi-Coder-1.5B-Chat", "score": 0.7507133753855912}, {"name": "deepseek-coder-33b-instruct", "score": 0.2731427061238412}, {"name": "Qwen2.5-Coder-32B-Instruct", "score": 0.0}, {"name": "Codestral-22B-v0.1", "score": -0.7291529983450404}, {"name": "starcoder2-15b-instruct-v0.1", "score": -0.8412499065252446}, {"name": "CodeLlama-7b-Instruct-hf", "score": -3.626066109016124}], "rank": [4, 1, 0, 6, 7, 5, 3, 2]}
