{"id": "HumanEval/12", "prompt": "```python\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [187, 320, 178, 193, 94]}
{"id": "HumanEval/13", "prompt": "```python\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [135, 134, 305, 391, 420]}
{"id": "HumanEval/19", "prompt": "```python\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [474, 477, 246, 405, 139]}
{"id": "HumanEval/27", "prompt": "```python\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [108, 320, 190, 267, 179]}
{"id": "HumanEval/29", "prompt": "```python\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [344, 274, 180, 470, 407]}
{"id": "HumanEval/34", "prompt": "```python\n\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "2", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [91, 92, 238, 295, 226]}
{"id": "HumanEval/42", "prompt": "```python\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [468, 140, 327, 428, 189]}
{"id": "HumanEval/44", "prompt": "```python\n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [485, 338, 222, 272, 207]}
{"id": "HumanEval/46", "prompt": "```python\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [486, 398, 584, 282, 571]}
{"id": "HumanEval/47", "prompt": "```python\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [271, 257, 497, 161, 155]}
{"id": "HumanEval/58", "prompt": "```python\n\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [268, 455, 149, 261, 179]}
{"id": "HumanEval/62", "prompt": "```python\n\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "2", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [493, 410, 470, 402, 334]}
{"id": "HumanEval/73", "prompt": "```python\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "2", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [819, 677, 541, 1270, 580]}
{"id": "HumanEval/74", "prompt": "```python\n\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [442, 418, 444, 680, 412]}
{"id": "HumanEval/79", "prompt": "```python\n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [449, 404, 378, 364, 334]}
{"id": "HumanEval/82", "prompt": "```python\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "2", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [425, 542, 420, 199, 549]}
{"id": "HumanEval/83", "prompt": "```python\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [451, 323, 335, 292, 373]}
{"id": "HumanEval/89", "prompt": "```python\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "2", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [314, 556, 408, 511, 669]}
{"id": "HumanEval/92", "prompt": "```python\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [333, 318, 305, 367, 442]}
{"id": "HumanEval/95", "prompt": "```python\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [377, 545, 440, 598, 294]}
{"id": "HumanEval/96", "prompt": "```python\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [461, 464, 809, 421, 718]}
{"id": "HumanEval/109", "prompt": "```python\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [403, 557, 404, 411, 506]}
{"id": "HumanEval/114", "prompt": "```python\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [276, 273, 557, 628, 533]}
{"id": "HumanEval/122", "prompt": "```python\n\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 4, "prediction": "1", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [438, 556, 421, 421, 513]}
{"id": "HumanEval/131", "prompt": "```python\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [394, 271, 375, 133, 269]}
{"id": "HumanEval/136", "prompt": "```python\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "2", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [528, 460, 253, 495, 393]}
{"id": "HumanEval/138", "prompt": "```python\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "2", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [200, 182, 238, 690, 438]}
{"id": "HumanEval/141", "prompt": "```python\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "2", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [580, 490, 517, 578, 492]}
{"id": "HumanEval/159", "prompt": "```python\n\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [597, 574, 611, 581, 486]}
{"id": "LeetCode/4", "prompt": "# Count Elements With Maximum Frequency\n\nYou are given an array `nums` consisting of **positive** integers.\n\n\nReturn *the **total frequencies** of elements in*`nums`\u00a0*such that those elements all have the **maximum** frequency*.\n\n\nThe **frequency** of an element is the number of occurrences of that element in the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,2,3,1,4]\n**Output:** 4\n**Explanation:** The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 5\n**Explanation:** All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxFrequencyElements(self, nums: List[int]) -> int:\n```\n", "cluster": 3, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [247, 500, 371, 281, 426]}
{"id": "LeetCode/79", "prompt": "# Divisible and Non-divisible Sums Difference\n\nYou are given positive integers `n` and `m`.\n\n\nDefine two integers, `num1` and `num2`, as follows:\n\n\n* `num1`: The sum of all integers in the range `[1, n]` that are **not divisible** by `m`.\n* `num2`: The sum of all integers in the range `[1, n]` that are **divisible** by `m`.\n\n\nReturn *the integer* `num1 - num2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10, m = 3\n**Output:** 19\n**Explanation:** In the given example:\n- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\nWe return 37 - 18 = 19 as the answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, m = 6\n**Output:** 15\n**Explanation:** In the given example:\n- Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n- Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\nWe return 15 - 0 = 15 as the answer.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 5, m = 1\n**Output:** -15\n**Explanation:** In the given example:\n- Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n- Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\nWe return 0 - 15 = -15 as the answer.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def differenceOfSums(self, n: int, m: int) -> int:\n```\n", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [221, 215, 378, 226, 443]}
{"id": "LeetCode/88", "prompt": "# Split Array Into Maximum Number of Subarrays\n\nYou are given an array `nums` consisting of **non-negative** integers.\n\n\nWe define the score of subarray `nums[l..r]` such that `l <= r` as `nums[l] AND nums[l + 1] AND ... AND nums[r]` where **AND** is the bitwise `AND` operation.\n\n\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\n\n\n* **E****ach** element of the array belongs to **exactly** one subarray.\n* The sum of scores of the subarrays is the **minimum** possible.\n\n\nReturn *the **maximum** number of subarrays in a split that satisfies the conditions above.*\n\n\nA **subarray** is a contiguous part of an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,0,2,0,1,2]\n**Output:** 3\n**Explanation:** We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,7,1,3]\n**Output:** 1\n**Explanation:** We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSubarrays(self, nums: List[int]) -> int:\n```\n", "cluster": 4, "prediction": "2", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [358, 447, 562, 473, 696]}
{"id": "LeetCode/89", "prompt": "# Maximum Odd Binary Number\n\nYou are given a **binary** string `s` that contains at least one `'1'`.\n\n\nYou have to **rearrange** the bits in such a way that the resulting binary number is the **maximum odd binary number** that can be created from this combination.\n\n\nReturn *a string representing the maximum odd binary number that can be created from the given combination.*\n\n\n**Note** that the resulting string **can** have leading zeros.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"010\"\n**Output:** \"001\"\n**Explanation:** Because there is just one '1', it must be in the last position. So the answer is \"001\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"0101\"\n**Output:** \"1001\"\n**Explanation:** One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists only of `'0'` and `'1'`.\n* `s` contains at least one `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumOddBinaryNumber(self, s: str) -> str:\n```\n", "cluster": 5, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [272, 325, 390, 388, 469]}
{"id": "LeetCode/99", "prompt": "# Points That Intersect With Cars\n\nYou are given a **0-indexed** 2D integer array `nums` representing the coordinates of the cars parking on a number line. For any index `i`, `nums[i] = [starti, endi]` where `starti` is the starting point of the `ith` car and `endi` is the ending point of the `ith` car.\n\n\nReturn *the number of integer points on the line that are covered with **any part** of a car.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [[3,6],[1,5],[4,7]]\n**Output:** 7\n**Explanation:** All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [[1,3],[5,8]]\n**Output:** 7\n**Explanation:** Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `nums[i].length == 2`\n* `1 <= starti\u00a0<= endi\u00a0<= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfPoints(self, nums: List[List[int]]) -> int:\n```\n", "cluster": 2, "prediction": "1", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [376, 551, 534, 325, 464]}
{"id": "LeetCode/116", "prompt": "# Count Pairs Whose Sum is Less than Target\n\nGiven a **0-indexed** integer array `nums` of length `n` and an integer `target`, return *the number of pairs* `(i, j)` *where* `0 <= i < j < n` *and* `nums[i] + nums[j] < target`.\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,1,2,3,1], target = 2\n**Output:** 3\n**Explanation:** There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target \n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-6,2,5,-2,-7,-1,3], target = -2\n**Output:** 10\n**Explanation:** There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length == n <= 50`\n* `-50 <= nums[i], target <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countPairs(self, nums: List[int], target: int) -> int:\n```\n", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [305, 292, 344, 471, 282]}
{"id": "LeetCode/120", "prompt": "# Max Pair Sum in an Array\n\nYou are given a **0-indexed** integer array `nums`. You have to find the **maximum** sum of a pair of numbers from `nums` such that the maximum **digit** in both numbers are equal.\n\n\nReturn *the maximum sum or* `-1` *if no such pair exists*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [51,71,17,24,42]\n**Output:** 88\n**Explanation:** \nFor i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. \nFor i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.\nIt can be shown that there are no other pairs with equal maximum digits, so the answer is 88.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** -1\n**Explanation:** No pair exists in nums with equal maximum digits.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `1 <= nums[i] <= 104`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxSum(self, nums: List[int]) -> int:\n```\n", "cluster": 3, "prediction": "2", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [567, 421, 596, 584, 423]}
{"id": "LeetCode/129", "prompt": "# Number of Employees Who Met the Target\n\nThere are `n` employees in a company, numbered from `0` to `n - 1`. Each employee `i` has worked for `hours[i]` hours in the company.\n\n\nThe company requires each employee to work for **at least** `target` hours.\n\n\nYou are given a **0-indexed** array of non-negative integers `hours` of length `n` and a non-negative integer `target`.\n\n\nReturn *the integer denoting the number of employees who worked at least* `target` *hours*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** hours = [0,1,2,3,4], target = 2\n**Output:** 3\n**Explanation:** The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** hours = [5,1,4,2,2], target = 6\n**Output:** 0\n**Explanation:** The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == hours.length <= 50`\n* `0 <=\u00a0hours[i], target <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n```\n", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [255, 220, 470, 215, 257]}
{"id": "LeetCode/187", "prompt": "# Number of Senior Citizens\n\nYou are given a **0-indexed** array of strings `details`. Each element of `details` provides information about a given passenger compressed into a string of length `15`. The system is such that:\n\n\n* The first ten characters consist of the phone number of passengers.\n* The next character denotes the gender of the person.\n* The following two characters are used to indicate the age of the person.\n* The last two characters determine the seat allotted to that person.\n\n\nReturn *the number of passengers who are **strictly** **more than 60 years old**.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]\n**Output:** 2\n**Explanation:** The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** details = [\"1313579440F2036\",\"2921522980M5644\"]\n**Output:** 0\n**Explanation:** None of the passengers are older than 60.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= details.length <= 100`\n* `details[i].length == 15`\n* `details[i] consists of digits from '0' to '9'.`\n* `details[i][10] is either 'M' or 'F' or 'O'.`\n* The phone numbers and seat numbers of the passengers are distinct.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countSeniors(self, details: List[str]) -> int:\n```\n", "cluster": 1, "prediction": "1", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [203, 208, 395, 177, 258]}
{"id": "LeetCode/226", "prompt": "# Count the Number of Vowel Strings in Range\n\nYou are given a **0-indexed** array of string `words` and two integers `left` and `right`.\n\n\nA string is called a **vowel string** if it starts with a vowel character and ends with a vowel character where vowel characters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\nReturn *the number of vowel strings* `words[i]` *where* `i` *belongs to the inclusive range* `[left, right]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"are\",\"amy\",\"u\"], left = 0, right = 2\n**Output:** 2\n**Explanation:** \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4\n**Output:** 3\n**Explanation:** \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 1000`\n* `1 <= words[i].length <= 10`\n* `words[i]` consists of only lowercase English letters.\n* `0 <= left <= right < words.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n```\n", "cluster": 1, "prediction": "1", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [238, 215, 360, 193, 232]}
{"id": "LeetCode/232", "prompt": "# Split With Minimum Sum\n\nGiven a positive integer `num`, split it into two non-negative integers `num1` and `num2` such that:\n\n\n* The concatenation of `num1` and `num2` is a permutation of `num`.\n\t+ In other words, the sum of the number of occurrences of each digit in `num1` and `num2` is equal to the number of occurrences of that digit in `num`.\n* `num1` and `num2` can contain leading zeros.\n\n\nReturn *the **minimum** possible sum of* `num1` *and* `num2`.\n\n\n**Notes:**\n\n\n* It is guaranteed that `num` does not contain any leading zeros.\n* The order of occurrence of the digits in `num1` and `num2` may differ from the order of occurrence of `num`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 4325\n**Output:** 59\n**Explanation:** We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 687\n**Output:** 75\n**Explanation:** We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `10 <= num <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def splitNum(self, num: int) -> int:\n```\n", "cluster": 3, "prediction": "2", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [487, 836, 554, 553, 682]}
{"id": "LeetCode/245", "prompt": "# Find the Array Concatenation Value\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nThe **concatenation** of two numbers is the number formed by concatenating their numerals.\n\n\n* For example, the concatenation of `15`, `49` is `1549`.\n\n\nThe **concatenation value** of `nums` is initially equal to `0`. Perform this operation until `nums` becomes empty:\n\n\n* If there exists more than one number in `nums`, pick the first element and last element in `nums` respectively and add the value of their concatenation to the **concatenation value** of `nums`, then delete the first and last element from `nums`.\n* If one element exists, add its value to the **concatenation value** of `nums`, then delete it.\n\n\nReturn *the concatenation value of the `nums`*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [7,52,2,4]\n**Output:** 596\n**Explanation:** Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to [52,2].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,14,13,8,12]\n**Output:** 673\n**Explanation:** Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to [14,13,8].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to [13].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 104`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0;\u00a0\n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\n```\n", "cluster": 1, "prediction": "2", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [350, 305, 281, 423, 283]}
