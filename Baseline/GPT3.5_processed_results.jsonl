{"id": "HumanEval/35", "prompt": "```python\n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [85, 94, 85, 85, 85]}
{"id": "HumanEval/49", "prompt": "```python\n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [25, 110, 173, 113, 113]}
{"id": "HumanEval/66", "prompt": "```python\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [36, 37, 40, 37, 40]}
{"id": "HumanEval/67", "prompt": "```python\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [104, 43, 43, 140, 85]}
{"id": "HumanEval/68", "prompt": "```python\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [75, 85, 93, 88, 73]}
{"id": "HumanEval/70", "prompt": "```python\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [55, 48, 48, 44, 48]}
{"id": "HumanEval/75", "prompt": "```python\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 4, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [126, 167, 162, 129, 155]}
{"id": "HumanEval/80", "prompt": "```python\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [74, 80, 80, 76, 74]}
{"id": "HumanEval/85", "prompt": "```python\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [94, 53, 94, 50, 53]}
{"id": "HumanEval/99", "prompt": "```python\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [154, 45, 43, 91, 133]}
{"id": "HumanEval/110", "prompt": "```python\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "3", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [39, 100, 54, 101, 51]}
{"id": "HumanEval/112", "prompt": "```python\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [79, 76, 37, 47, 46]}
{"id": "HumanEval/118", "prompt": "```python\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "3", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [87, 186, 108, 155, 235]}
{"id": "HumanEval/123", "prompt": "```python\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [109, 116, 88, 149, 74]}
{"id": "HumanEval/128", "prompt": "```python\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [101, 81, 109, 92, 102]}
{"id": "HumanEval/130", "prompt": "```python\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 4, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [91, 86, 110, 94, 84]}
{"id": "HumanEval/137", "prompt": "```python\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 3, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [201, 67, 169, 177, 123]}
{"id": "HumanEval/156", "prompt": "```python\n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 1, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [176, 165, 184, 177, 143]}
{"id": "HumanEval/158", "prompt": "```python\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n```\n\nPlease complete the above code according to the requirements in the docstring. Write the complete code and wrap it in markdown syntax. The code should not contain `Main` function.", "cluster": 2, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [87, 89, 87, 86, 77]}
{"id": "LeetCode/6", "prompt": "# Maximum Number That Sum of the Prices Is Less Than or Equal to K\n\nYou are given an integer `k` and an integer `x`.\n\n\nConsider `s` is the **1-indexed** binary representation of an integer `num`. The **price** of a number `num` is the number of `i`'s such that `i % x == 0` and `s[i]` is a **set bit**.\n\n\nReturn *the **greatest** integer* `num` *such that the sum of **prices** of all numbers from* `1` *to* `num` *is less than or equal to* `k`*.*\n\n\n**Note**:\n\n\n* In the binary representation of a number **set bit** is a bit of value `1`.\n* The binary representation of a number will be indexed from right to left. For example, if `s == 11100`, `s[4] == 1` and `s[2] == 0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** k = 9, x = 1\n**Output:** 6\n**Explanation:** The numbers 1, 2, 3, 4, 5, and 6 can be written in binary representation as \"1\", \"10\", \"11\", \"100\", \"101\", and \"110\" respectively.\nSince x is equal to 1, the price of each number is the number of its set bits.\nThe number of set bits in these numbers is 9. So the sum of the prices of the first 6 numbers is 9.\nSo the answer is 6.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** k = 7, x = 2\n**Output:** 9\n**Explanation:** Since x is equal to 2, we should just check eventh bits.\nThe second bit of binary representation of numbers 2 and 3 is a set bit. So the sum of their prices is 2.\nThe second bit of binary representation of numbers 6 and 7 is a set bit. So the sum of their prices is 2.\nThe fourth bit of binary representation of numbers 8 and 9 is a set bit but their second bit is not. So the sum of their prices is 2.\nNumbers 1, 4, and 5 don't have set bits in their eventh bits in their binary representation. So the sum of their prices is 0.\nThe second and the fourth bit of the binary representation of the number 10 are a set bit. So its price is 2.\nThe sum of the prices of the first 9 numbers is 6.\nBecause the sum of the prices of the first 10 numbers is 8, the answer is 9.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 1015`\n* `1 <= x <= 8`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [77, 127, 135, 74, 95]}
{"id": "LeetCode/7", "prompt": "# Find Beautiful Indices in the Given Array II\n\nYou are given a **0-indexed** string `s`, a string `a`, a string `b`, and an integer `k`.\n\n\nAn index `i` is **beautiful** if:\n\n\n* `0 <= i <= s.length - a.length`\n* `s[i..(i + a.length - 1)] == a`\n* There exists an index `j` such that:\n\t+ `0 <= j <= s.length - b.length`\n\t+ `s[j..(j + b.length - 1)] == b`\n\t+ `|j - i| <= k`\n\n\nReturn *the array that contains beautiful indices in **sorted order from smallest to largest***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\n**Output:** [16,33]\n**Explanation:** There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", a = \"a\", b = \"a\", k = 4\n**Output:** [0]\n**Explanation:** There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= s.length <= 5 * 105`\n* `1 <= a.length, b.length <= 5 * 105`\n* `s`, `a`, and `b` contain only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n```\n", "cluster": 2, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [130, 132, 126, 123, 131]}
{"id": "LeetCode/8", "prompt": "# Maximum Area of Longest Diagonal Rectangle\n\nYou are given a 2D **0-indexed** integer array `dimensions`.\n\n\nFor all indices `i`, `0 <= i < dimensions.length`, `dimensions[i][0]` represents the length and `dimensions[i][1]` represents the width of the rectangle `i`.\n\n\nReturn *the **area** of the rectangle having the **longest** diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the **maximum** area.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** dimensions = [[9,3],[8,6]]\n**Output:** 48\n**Explanation:** \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90) \u2248 9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** dimensions = [[3,4],[4,3]]\n**Output:** 12\n**Explanation:** Length of diagonal is the same for both which is 5, so maximum area = 12.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= dimensions.length <= 100`\n* `dimensions[i].length == 2`\n* `1 <= dimensions[i][0], dimensions[i][1] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:\n```\n", "cluster": 2, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [121, 134, 131, 129, 120]}
{"id": "LeetCode/11", "prompt": "# Smallest Missing Integer Greater Than Sequential Prefix Sum\n\nYou are given a **0-indexed** array of integers `nums`.\n\n\nA prefix `nums[0..i]` is **sequential** if, for all `1 <= j <= i`, `nums[j] = nums[j - 1] + 1`. In particular, the prefix consisting only of `nums[0]` is **sequential**.\n\n\nReturn *the **smallest** integer* `x` *missing from* `nums` *such that* `x` *is greater than or equal to the sum of the **longest** sequential prefix.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,2,5]\n**Output:** 6\n**Explanation:** The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,4,5,1,12,14,13]\n**Output:** 15\n**Explanation:** The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def missingInteger(self, nums: List[int]) -> int:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [106, 80, 98, 91, 81]}
{"id": "LeetCode/12", "prompt": "# Minimum Number of Operations to Make Array XOR Equal to K\n\nYou are given a **0-indexed** integer array `nums` and a positive integer `k`.\n\n\nYou can apply the following operation on the array **any** number of times:\n\n\n* Choose **any** element of the array and **flip** a bit in its **binary** representation. Flipping a bit means changing a `0` to `1` or vice versa.\n\n\nReturn *the **minimum** number of operations required to make the bitwise* `XOR` *of **all** elements of the final array equal to* `k`.\n\n\n**Note** that you can flip leading zero bits in the binary representation of elements. For example, for the number `(101)2` you can flip the fourth bit and obtain `(1101)2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,4], k = 1\n**Output:** 2\n**Explanation:** We can do the following operations:\n- Choose element 2 which is 3 == (011)2, we flip the first bit and we obtain (010)2 == 2. nums becomes [2,1,2,4].\n- Choose element 0 which is 2 == (010)2, we flip the third bit and we obtain (110)2 = 6. nums becomes [6,1,2,4].\nThe XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\nIt can be shown that we cannot make the XOR equal to k in less than 2 operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,0,2,0], k = 0\n**Output:** 0\n**Explanation:** The XOR of elements of the array is (2 XOR 0 XOR 2 XOR 0) == 0 == k. So no operation is needed.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n* `0 <= k <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums: List[int], k: int) -> int:\n```\n", "cluster": 4, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [85, 227, 156, 132, 245]}
{"id": "LeetCode/30", "prompt": "# Double Modular Exponentiation\n\nYou are given a **0-indexed** 2D array `variables` where `variables[i] = [ai, bi, ci, mi]`, and an integer `target`.\n\n\nAn index `i` is **good** if the following formula holds:\n\n\n* `0 <= i < variables.length`\n* `((aibi % 10)ci) % mi == target`\n\n\nReturn *an array consisting of **good** indices in **any order***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2\n**Output:** [0,2]\n**Explanation:** For each index i in the variables array:\n1) For the index 0, variables[0] = [2,3,3,10], (23 % 10)3 % 10 = 2.\n2) For the index 1, variables[1] = [3,3,3,1], (33 % 10)3 % 1 = 0.\n3) For the index 2, variables[2] = [6,1,1,4], (61 % 10)1 % 4 = 2.\nTherefore we return [0,2] as the answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** variables = [[39,3,1000,1000]], target = 17\n**Output:** []\n**Explanation:** For each index i in the variables array:\n1) For the index 0, variables[0] = [39,3,1000,1000], (393 % 10)1000 % 1000 = 1.\nTherefore we return [] as the answer.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= variables.length <= 100`\n* `variables[i] == [ai, bi, ci, mi]`\n* `1 <= ai, bi, ci, mi <= 103`\n* `0 <= target <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getGoodIndices(self, variables: List[List[int]], target: int) -> List[int]:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [88, 90, 90, 90, 88]}
{"id": "LeetCode/44", "prompt": "# Minimum Number of Coins for Fruits\n\nYou are at a fruit market with different types of exotic fruits on display.\n\n\nYou are given a **1-indexed** array `prices`, where `prices[i]` denotes the number of coins needed to purchase the `ith` fruit.\n\n\nThe fruit market has the following offer:\n\n\n* If you purchase the `ith` fruit at `prices[i]` coins, you can get the next `i` fruits for free.\n\n\n**Note** that even if you **can** take fruit `j` for free, you can still purchase it for `prices[j]` coins to receive a new offer.\n\n\nReturn *the **minimum** number of coins needed to acquire all the fruits*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [3,1,2]\n**Output:** 4\n**Explanation:** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 3 coins, you are allowed to take the 2nd fruit for free.\n- Purchase the 2nd fruit with 1 coin, you are allowed to take the 3rd fruit for free.\n- Take the 3rd fruit for free.\nNote that even though you were allowed to take the 2nd fruit for free, you purchased it because it is more optimal.\nIt can be proven that 4 is the minimum number of coins needed to acquire all the fruits.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [1,10,1,1]\n**Output:** 2\n**Explanation:** You can acquire the fruits as follows:\n- Purchase the 1st fruit with 1 coin, you are allowed to take the 2nd fruit for free.\n- Take the 2nd fruit for free.\n- Purchase the 3rd fruit for 1 coin, you are allowed to take the 4th fruit for free.\n- Take the 4th fruit for free.\nIt can be proven that 2 is the minimum number of coins needed to acquire all the fruits.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 1000`\n* `1 <= prices[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumCoins(self, prices: List[int]) -> int:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [66, 71, 87, 93, 127]}
{"id": "LeetCode/50", "prompt": "# Maximum Strong Pair XOR I\n\nYou are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n* `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\n**Note** that you can pick the same integer twice to form a pair.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 7\n**Explanation:** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,100]\n**Output:** 0\n**Explanation:** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,6,25,30]\n**Output:** 7\n**Explanation:** There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\nThe maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [69, 64, 67, 69, 64]}
{"id": "LeetCode/51", "prompt": "# High-Access Employees\n\nYou are given a 2D **0-indexed** array of strings, `access_times`, with size `n`. For each `i` where `0 <= i <= n - 1`, `access_times[i][0]` represents the name of an employee, and `access_times[i][1]` represents the access time of that employee. All entries in `access_times` are within the same day.\n\n\nThe access time is represented as **four digits** using a **24-hour** time format, for example, `\"0800\"` or `\"2250\"`.\n\n\nAn employee is said to be **high-access** if he has accessed the system **three or more** times within a **one-hour period**.\n\n\nTimes with exactly one hour of difference are **not** considered part of the same one-hour period. For example, `\"0815\"` and `\"0915\"` are not part of the same one-hour period.\n\n\nAccess times at the start and end of the day are **not** counted within the same one-hour period. For example, `\"0005\"` and `\"2350\"` are not part of the same one-hour period.\n\n\nReturn *a list that contains the names of **high-access** employees with any order you want.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]\n**Output:** [\"a\"]\n**Explanation:** \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.\nBut \"b\" does not have more than two access times at all.\nSo the answer is [\"a\"].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]]\n**Output:** [\"c\",\"d\"]\n**Explanation:** \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.\n\"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.\nHowever, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"].\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]]\n**Output:** [\"ab\",\"cd\"]\n**Explanation:** \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.\n\"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.\nSo the answer is [\"ab\",\"cd\"].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= access_times.length <= 100`\n* `access_times[i].length == 2`\n* `1 <= access_times[i][0].length <= 10`\n* `access_times[i][0]` consists only of English small letters.\n* `access_times[i][1].length == 4`\n* `access_times[i][1]` is in 24-hour time format.\n* `access_times[i][1]` consists only of `'0'` to `'9'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findHighAccessEmployees(self, access_times: List[List[str]]) -> List[str]:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [139, 220, 174, 186, 171]}
{"id": "LeetCode/52", "prompt": "# Minimum Operations to Maximize Last Elements in Arrays\n\nYou are given two **0-indexed** integer arrays, `nums1` and `nums2`, both having length `n`.\n\n\nYou are allowed to perform a series of **operations** (**possibly none**).\n\n\nIn an operation, you select an index `i` in the range `[0, n - 1]` and **swap** the values of `nums1[i]` and `nums2[i]`.\n\n\nYour task is to find the **minimum** number of operations required to satisfy the following conditions:\n\n\n* `nums1[n - 1]` is equal to the **maximum value** among all elements of `nums1`, i.e., `nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1])`.\n* `nums2[n - 1]` is equal to the **maximum** **value** among all elements of `nums2`, i.e., `nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1])`.\n\n\nReturn *an integer denoting the **minimum** number of operations needed to meet **both** conditions*, *or* `-1` *if it is **impossible** to satisfy both conditions.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,7], nums2 = [4,5,3]\n**Output:** 1\n**Explanation:** In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\n**Output:** 2\n**Explanation:** In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2.   \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,5,4], nums2 = [2,5,3]\n**Output:** -1\n**Explanation:** In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == nums1.length == nums2.length <= 1000`\n* `1 <= nums1[i] <= 109`\n* `1 <= nums2[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n```\n", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [417, 299, 306, 234, 336]}
{"id": "LeetCode/55", "prompt": "# Distribute Candies Among Children II\n\nYou are given two positive integers `n` and `limit`.\n\n\nReturn *the **total number** of ways to distribute* `n` *candies among* `3` *children such that no child gets more than* `limit` *candies.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, limit = 2\n**Output:** 3\n**Explanation:** There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, limit = 3\n**Output:** 10\n**Explanation:** There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 106`\n* `1 <= limit <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distributeCandies(self, n: int, limit: int) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [108, 135, 116, 89, 100]}
{"id": "LeetCode/60", "prompt": "# Find the K-or of an Array\n\nYou are given a **0-indexed** integer array `nums`, and an integer `k`.\n\n\nThe **K-or** of `nums` is a non-negative integer that satisfies the following:\n\n\n* The `ith` bit is set in the K-or **if and only if** there are at least `k` elements of nums in which bit `i` is set.\n\n\nReturn *the  **K-or** of* `nums`.\n\n\n**Note** that a bit `i` is set in `x` if `(2i AND x) == 2i`, where `AND` is the bitwise `AND` operator.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [7,12,9,8,9,15], k = 4\n**Output:** 9\n**Explanation:** Bit 0 is set at nums[0], nums[2], nums[4], and nums[5].\nBit 1 is set at nums[0], and nums[5].\nBit 2 is set at nums[0], nums[1], and nums[5].\nBit 3 is set at nums[1], nums[2], nums[3], nums[4], and nums[5].\nOnly bits 0 and 3 are set in at least k elements of the array, and bits i >= 4 are not set in any of the array's elements. Hence, the answer is 2^0 + 2^3 = 9.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,12,1,11,4,5], k = 6\n**Output:** 0\n**Explanation:** Since k == 6 == nums.length, the 6-or of the array is equal to the bitwise AND of all its elements. Hence, the answer is 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [10,8,5,9,11,6,8], k = 1\n**Output:** 15\n**Explanation:** Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `0 <= nums[i] < 231`\n* `1 <= k <= nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n```\n", "cluster": 2, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [109, 107, 98, 91, 87]}
{"id": "LeetCode/66", "prompt": "# Subarrays Distinct Element Sum of Squares II\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nThe **distinct count** of a subarray of `nums` is defined as:\n\n\n* Let `nums[i..j]` be a subarray of `nums` consisting of all the indices from `i` to `j` such that `0 <= i <= j < nums.length`. Then the number of distinct values in `nums[i..j]` is called the distinct count of `nums[i..j]`.\n\n\nReturn *the sum of the **squares** of **distinct counts** of all subarrays of* `nums`.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1]\n**Output:** 15\n**Explanation:** Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,2]\n**Output:** 3\n**Explanation:** Three possible subarrays are:\n[2]: 1 distinct value\n[2]: 1 distinct value\n[2,2]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n```\n", "cluster": 4, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [96, 82, 93, 214, 104]}
{"id": "LeetCode/69", "prompt": "# Minimum Number of Groups to Create a Valid Assignment\n\nYou are given a **0-indexed** integer array `nums` of length `n`.\n\n\nWe want to group the indices so for each index `i` in the range `[0, n - 1]`, it is assigned to **exactly one** group.\n\n\nA groupassignment is **valid** if the following conditions hold:\n\n\n* For every group `g`, all indices `i` assigned to group `g` have the same value in `nums`.\n* For any two groups `g1` and `g2`, the **difference** between the **number of indices** assigned to `g1` and `g2` should **not exceed** `1`.\n\n\nReturn *an integer denoting* *the **minimum** number of groups needed to create a valid group assignment.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,3,2,3]\n**Output:** 2\n**Explanation:** One way the indices can be assigned to 2 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0,2,4]\ngroup 2 -> [1,3]\nAll indices are assigned to one group.\nIn group 1, nums[0] == nums[2] == nums[4], so all indices have the same value.\nIn group 2, nums[1] == nums[3], so all indices have the same value.\nThe number of indices assigned to group 1 is 3, and the number of indices assigned to group 2 is 2.\nTheir difference doesn't exceed 1.\nIt is not possible to use fewer than 2 groups because, in order to use just 1 group, all indices assigned to that group must have the same value.\nHence, the answer is 2.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,10,10,3,1,1]\n**Output:** 4\n**Explanation:** One way the indices can be assigned to 4 groups is as follows, where the values in square brackets are indices:\ngroup 1 -> [0]\ngroup 2 -> [1,2]\ngroup 3 -> [3]\ngroup 4 -> [4,5]\nThe group assignment above satisfies both conditions.\nIt can be shown that it is not possible to create a valid assignment using fewer than 4 groups.\nHence, the answer is 4.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minGroupsForValidAssignment(self, nums: List[int]) -> int:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [93, 89, 88, 72, 65]}
{"id": "LeetCode/74", "prompt": "# Construct Product Matrix\n\nGiven a **0-indexed** 2D integer matrix `grid` of size `n * m`, we define a **0-indexed** 2D matrix `p` of size `n * m` as the **product** matrix of `grid` if the following condition is met:\n\n\n* Each element `p[i][j]` is calculated as the product of all elements in `grid` except for the element `grid[i][j]`. This product is then taken modulo `12345`.\n\n\nReturn *the product matrix of* `grid`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[1,2],[3,4]]\n**Output:** [[24,12],[8,6]]\n**Explanation:** p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[12345],[2],[1]]\n**Output:** [[2],[0],[0]]\n**Explanation:** p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\nSo the answer is [[2],[0],[0]].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == grid.length\u00a0<= 105`\n* `1 <= m == grid[i].length\u00a0<= 105`\n* `2 <= n * m <= 105`\n* `1 <= grid[i][j] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n```\n", "cluster": 4, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [131, 124, 132, 122, 146]}
{"id": "LeetCode/76", "prompt": "# Longest Unequal Adjacent Groups Subsequence I\n\nYou are given an integer `n`, a **0-indexed** string array `words`, and a **0-indexed** **binary** array `groups`, both arrays having length `n`.\n\n\nYou need to select the **longest** **subsequence** from an array of indices `[0, 1, ..., n - 1]`, such that for the subsequence denoted as `[i0, i1, ..., ik - 1]` having length `k`, `groups[ij] != groups[ij + 1]`, for each `j` where `0 < j + 1 < k`.\n\n\nReturn *a string array containing the words corresponding to the indices **(in order)** in the selected subsequence*. If there are multiple answers, return *any of them*.\n\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n\n\n**Note:** strings in `words` may be **unequal** in length.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, words = [\"e\",\"a\",\"b\"], groups = [0,0,1]\n**Output:** [\"e\",\"b\"]\n**Explanation:** A subsequence that can be selected is [0,2] because groups[0] != groups[2].\nSo, a valid answer is [words[0],words[2]] = [\"e\",\"b\"].\nAnother subsequence that can be selected is [1,2] because groups[1] != groups[2].\nThis results in [words[1],words[2]] = [\"a\",\"b\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 2.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]\n**Output:** [\"a\",\"b\",\"c\"]\n**Explanation:** A subsequence that can be selected is [0,1,2] because groups[0] != groups[1] and groups[1] != groups[2].\nSo, a valid answer is [words[0],words[1],words[2]] = [\"a\",\"b\",\"c\"].\nAnother subsequence that can be selected is [0,1,3] because groups[0] != groups[1] and groups[1] != groups[3].\nThis results in [words[0],words[1],words[3]] = [\"a\",\"b\",\"d\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 100`\n* `1 <= words[i].length <= 10`\n* `0 <= groups[i] < 2`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def getWordsInLongestSubsequence(self, n: int, words: List[str], groups: List[int]) -> List[str]:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [78, 103, 157, 112, 119]}
{"id": "LeetCode/81", "prompt": "# Apply Operations to Make Two Strings Equal\n\nYou are given two **0-indexed** binary strings `s1` and `s2`, both of length `n`, and a positive integer `x`.\n\n\nYou can perform any of the following operations on the string `s1` **any** number of times:\n\n\n* Choose two indices `i` and `j`, and flip both `s1[i]` and `s1[j]`. The cost of this operation is `x`.\n* Choose an index `i` such that `i < n - 1` and flip both `s1[i]` and `s1[i + 1]`. The cost of this operation is `1`.\n\n\nReturn *the **minimum** cost needed to make the strings* `s1` *and* `s2` *equal, or return* `-1` *if it is impossible.*\n\n\n**Note** that flipping a character means changing it from `0` to `1` or vice-versa.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"1100011000\", s2 = \"0101001010\", x = 2\n**Output:** 4\n**Explanation:** We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = \"110**11**11000\".\n- Choose i = 4 and apply the second operation. The resulting string is s1 = \"1101**00**1000\".\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = \"**0**1010010**1**0\" = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"10110\", s2 = \"00011\", x = 4\n**Output:** -1\n**Explanation:** It is not possible to make the two strings equal.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == s1.length == s2.length`\n* `1 <= n, x <= 500`\n* `s1` and `s2` consist only of the characters `'0'` and `'1'`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, s1: str, s2: str, x: int) -> int:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [177, 172, 211, 131, 184]}
{"id": "LeetCode/90", "prompt": "# Beautiful Towers I\n\nYou are given a **0-indexed** array `maxHeights` of `n` integers.\n\n\nYou are tasked with building `n` towers in the coordinate line. The `ith` tower is built at coordinate `i` and has a height of `heights[i]`.\n\n\nA configuration of towers is **beautiful** if the following conditions hold:\n\n\n1. `1 <= heights[i] <= maxHeights[i]`\n2. `heights` is a **mountain** array.\n\n\nArray `heights` is a **mountain** if there exists an index `i` such that:\n\n\n* For all `0 < j <= i`, `heights[j - 1] <= heights[j]`\n* For all `i <= k < n - 1`, `heights[k + 1] <= heights[k]`\n\n\nReturn *the **maximum possible sum of heights** of a beautiful configuration of towers*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** maxHeights = [5,3,4,1,1]\n**Output:** 13\n**Explanation:** One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** maxHeights = [6,5,3,9,2,7]\n**Output:** 22\n**Explanation:** One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** maxHeights = [3,2,5,5,2,3]\n**Output:** 18\n**Explanation:** One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 <= heights[i] <= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == maxHeights <= 103`\n* `1 <= maxHeights[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n```\n", "cluster": 4, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [81, 139, 174, 135, 122]}
{"id": "LeetCode/93", "prompt": "# Happy Students\n\nYou are given a **0-indexed** integer array `nums` of length `n` where `n` is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\n\n\nThe `ith` student will become happy if one of these two conditions is met:\n\n\n* The student is selected and the total number of selected students is **strictly greater than** `nums[i]`.\n* The student is not selected and the total number of selected students is **strictly** **less than** `nums[i]`.\n\n\nReturn *the number of ways to select a group of students so that everyone remains happy.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1]\n**Output:** 2\n**Explanation:** \nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group. \nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,0,3,3,6,7,2,7]\n**Output:** 3\n**Explanation:** \nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] < nums.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countWays(self, nums: List[int]) -> int:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [104, 126, 73, 71, 173]}
{"id": "LeetCode/102", "prompt": "# Minimum Operations to Make a Special Number\n\nYou are given a **0-indexed** string `num` representing a non-negative integer.\n\n\nIn one operation, you can pick any digit of `num` and delete it. Note that if you delete all the digits of `num`, `num` becomes `0`.\n\n\nReturn *the **minimum number of operations** required to make* `num` *special*.\n\n\nAn integer `x` is considered **special** if it is divisible by `25`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"2245047\"\n**Output:** 2\n**Explanation:** Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"2908305\"\n**Output:** 3\n**Explanation:** Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"10\"\n**Output:** 1\n**Explanation:** Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 100`\n* `num` only consists of digits `'0'` through `'9'`.\n* `num` does not contain any leading zeros.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperations(self, num: str) -> int:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [143, 158, 167, 103, 100]}
{"id": "LeetCode/107", "prompt": "# Count K-Subsequences of a String With Maximum Beauty\n\nYou are given a string `s` and an integer `k`.\n\n\nA **k-subsequence** is a **subsequence** of `s`, having length `k`, and all its characters are **unique**, **i.e**., every character occurs once.\n\n\nLet `f(c)` denote the number of times the character `c` occurs in `s`.\n\n\nThe **beauty** of a **k-subsequence** is the **sum** of `f(c)` for every character `c` in the k-subsequence.\n\n\nFor example, consider `s = \"abbbdd\"` and `k = 2`:\n\n\n* `f('a') = 1`, `f('b') = 3`, `f('d') = 2`\n* Some k-subsequences of `s` are:\n\t+ `\"**ab**bbdd\"` -> `\"ab\"` having a beauty of `f('a') + f('b') = 4`\n\t+ `\"**a**bbb**d**d\"` -> `\"ad\"` having a beauty of `f('a') + f('d') = 3`\n\t+ `\"a**b**bb**d**d\"` -> `\"bd\"` having a beauty of `f('b') + f('d') = 5`\n\n\nReturn *an integer denoting the number of k-subsequences* *whose **beauty** is the **maximum** among all **k-subsequences***. Since the answer may be too large, return it modulo `109 + 7`.\n\n\nA subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\n**Notes**\n\n\n* `f(c)` is the number of times a character `c` occurs in `s`, not a k-subsequence.\n* Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bcca\", k = 2\n**Output:** 4\n**Explanation:** From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are: \n**bc**ca having a beauty of f('b') + f('c') = 3 \n**b**c**c**a having a beauty of f('b') + f('c') = 3 \n**b**cc**a** having a beauty of f('b') + f('a') = 2 \nb**c**c**a**having a beauty of f('c') + f('a') = 3\nbc**ca** having a beauty of f('c') + f('a') = 3 \nThere are 4 k-subsequences that have the maximum beauty, 3. \nHence, the answer is 4. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abbcd\", k = 4\n**Output:** 2\n**Explanation:** From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. \nThe k-subsequences of s are: \n**ab**b**cd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5\n**a**b**bcd** having a beauty of f('a') + f('b') + f('c') + f('d') = 5 \nThere are 2 k-subsequences that have the maximum beauty, 5. \nHence, the answer is 2. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2 * 105`\n* `1 <= k <= s.length`\n* `s` consists only of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:\n```\n", "cluster": 4, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [162, 146, 121, 162, 212]}
{"id": "LeetCode/112", "prompt": "# Check if a String Is an Acronym of Words\n\nGiven an array of strings `words` and a string `s`, determine if `s` is an **acronym** of words.\n\n\nThe string `s` is considered an acronym of `words` if it can be formed by concatenating the **first** character of each string in `words` **in order**. For example, `\"ab\"` can be formed from `[\"apple\", \"banana\"]`, but it can't be formed from `[\"bear\", \"aardvark\"]`.\n\n\nReturn `true` *if* `s` *is an acronym of* `words`*, and* `false` *otherwise.* \n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\n**Output:** true\n**Explanation:** The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"an\",\"apple\"], s = \"a\"\n**Output:** false\n**Explanation:** The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\n**Output:** true\n**Explanation:** By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 100`\n* `1 <= words[i].length <= 10`\n* `1 <= s.length <= 100`\n* `words[i]` and `s` consist of lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n```\n", "cluster": 2, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [71, 51, 51, 71, 71]}
{"id": "LeetCode/113", "prompt": "# Determine the Minimum Sum of a k-avoiding Array\n\nYou are given two integers,\u00a0`n` and `k`.\n\n\nAn array of **distinct** positive integers is called a **k-avoiding** array if there does not exist any pair of distinct elements that sum to `k`.\n\n\nReturn *the **minimum** possible sum of a k-avoiding array of length* `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, k = 4\n**Output:** 18\n**Explanation:** Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, k = 6\n**Output:** 3\n**Explanation:** We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [83, 121, 67, 58, 61]}
{"id": "LeetCode/117", "prompt": "# Make String a Subsequence Using Cyclic Increments\n\nYou are given two **0-indexed** strings `str1` and `str2`.\n\n\nIn an operation, you select a **set** of indices in `str1`, and for each index `i` in the set, increment `str1[i]` to the next character **cyclically**. That is `'a'` becomes `'b'`, `'b'` becomes `'c'`, and so on, and `'z'` becomes `'a'`.\n\n\nReturn `true` *if it is possible to make* `str2` *a subsequence of* `str1` *by performing the operation **at most once***, *and* `false` *otherwise*.\n\n\n**Note:** A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** str1 = \"abc\", str2 = \"ad\"\n**Output:** true\n**Explanation:** Select index 2 in str1.\nIncrement str1[2] to become 'd'. \nHence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** str1 = \"zc\", str2 = \"ad\"\n**Output:** true\n**Explanation:** Select indices 0 and 1 in str1. \nIncrement str1[0] to become 'a'. \nIncrement str1[1] to become 'd'. \nHence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** str1 = \"ab\", str2 = \"d\"\n**Output:** false\n**Explanation:** In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. \nTherefore, false is returned.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= str1.length <= 105`\n* `1 <= str2.length <= 105`\n* `str1` and `str2` consist of only lowercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canMakeSubsequence(self, str1: str, str2: str) -> bool:\n```\n", "cluster": 4, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [98, 110, 91, 85, 109]}
{"id": "LeetCode/118", "prompt": "# Sorting Three Groups\n\nYou are given a **0-indexed** integer array `nums` of length `n`.  \n\n  \n\nThe numbers from `0` to `n - 1` are divided into three groups numbered from `1` to `3`, where number `i` belongs to group `nums[i]`. Notice that some groups may be **empty**.  \n\n  \n\nYou are allowed to perform this operation any number of times:\n\n\n* Pick number `x` and change its group. More formally, change `nums[x]` to any number from `1` to `3`.\n\n\nA new array `res` is constructed using the following procedure:\n\n\n1. Sort the numbers in each group independently.\n2. Append the elements of groups `1`, `2`, and `3` to `res` **in this order**.\n\n\nArray `nums` is called a **beautiful array** if the constructed array `res` is sorted in **non-decreasing** order.\n\n\nReturn *the **minimum** number of operations to make* `nums` *a **beautiful array***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,2,1]\n**Output:** 3\n**Explanation:** It's optimal to perform three operations:\n1. change nums[0] to 1.\n2. change nums[2] to 1.\n3. change nums[3] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than three operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,1,3,3]\n**Output:** 2\n**Explanation:** It's optimal to perform two operations:\n1. change nums[1] to 1.\n2. change nums[2] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3], group 2 becomes empty, and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than two operations.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,2,2,2,3,3]\n**Output:** 0\n**Explanation:** It's optimal to not perform operations.\nAfter sorting the numbers in each group, group 1 becomes empty, group 2 becomes equal to [0,1,2,3] and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 3`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [127, 112, 67, 80, 175]}
{"id": "LeetCode/141", "prompt": "# Maximum Beauty of an Array After Applying Operation\n\nYou are given a **0-indexed** array `nums` and a **non-negative** integer `k`.\n\n\nIn one operation, you can do the following:\n\n\n* Choose an index `i` that **hasn't been chosen before** from the range `[0, nums.length - 1]`.\n* Replace `nums[i]` with any integer from the range `[nums[i] - k, nums[i] + k]`.\n\n\nThe **beauty** of the array is the length of the longest subsequence consisting of equal elements.\n\n\nReturn *the **maximum** possible beauty of the array* `nums` *after applying the operation any number of times.*\n\n\n**Note** that you can apply the operation to each index **only once**.\n\n\nA\u00a0**subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,6,1,2], k = 2\n**Output:** 3\n**Explanation:** In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1], k = 10\n**Output:** 4\n**Explanation:** In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [99, 169, 151, 250, 124]}
{"id": "LeetCode/159", "prompt": "# Construct the Longest New String\n\nYou are given three integers `x`, `y`, and `z`.\n\n\nYou have `x` strings equal to `\"AA\"`, `y` strings equal to `\"BB\"`, and `z` strings equal to `\"AB\"`. You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain `\"AAA\"` or `\"BBB\"` as a substring.\n\n\nReturn *the maximum possible length of the new string*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 2, y = 5, z = 1\n**Output:** 12\n**Explanation:** We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 3, y = 2, z = 2\n**Output:** 14\n**Explanation:** We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x, y, z <= 50`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n```\n", "cluster": 4, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [84, 106, 128, 136, 172]}
{"id": "LeetCode/162", "prompt": "# Total Distance Traveled\n\nA truck has two fuel tanks. You are given two integers, `mainTank` representing the fuel present in the main tank in liters and `additionalTank` representing the fuel present in the additional tank in liters.\n\n\nThe truck has a mileage of `10` km per liter. Whenever `5` liters of fuel get\u00a0used up in the main tank,\u00a0if the additional tank has at least `1` liters of fuel, `1` liters of fuel will be transferred from the additional tank to the main tank.\n\n\nReturn *the maximum distance which can be traveled.*\n\n\n**Note:** Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** mainTank = 5, additionalTank = 10\n**Output:** 60\n**Explanation:** \nAfter spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.\nAfter spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.\nTotal distance traveled is 60km.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mainTank = 1, additionalTank = 2\n**Output:** 10\n**Explanation:** \nAfter spending 1 litre of fuel, the main tank becomes empty.\nTotal distance traveled is 10km.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= mainTank, additionalTank <= 100`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def distanceTraveled(self, mainTank: int, additionalTank: int) -> int:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [86, 94, 124, 92, 106]}
{"id": "LeetCode/165", "prompt": "# Painting the Walls\n\nYou are given two **0-indexed** integer arrays,\u00a0`cost` and `time`, of size `n` representing the costs and the time taken to paint `n` different walls respectively. There are two painters available:\n\n\n* A**paid painter**\u00a0that paints the `ith` wall in `time[i]` units of time and takes `cost[i]` units of money.\n* A**free painter** that paints\u00a0**any** wall in `1` unit of time at a cost of `0`. But the\u00a0free painter can only be used if the paid painter is already **occupied**.\n\n\nReturn *the minimum amount of money required to paint the* `n`*walls.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cost = [1,2,3,2], time = [1,2,3,2]\n**Output:** 3\n**Explanation:** The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cost = [2,3,4,2], time = [1,1,1,1]\n**Output:** 4\n**Explanation:** The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= cost.length <= 500`\n* `cost.length == time.length`\n* `1 <= cost[i] <= 106`\n* `1 <= time[i] <= 500`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def paintWalls(self, cost: List[int], time: List[int]) -> int:\n```\n", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [213, 168, 236, 158, 99]}
{"id": "LeetCode/168", "prompt": "# Collecting Chocolates\n\nYou are given a **0-indexed** integer array `nums` of size `n` representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index `i`\u00a0is `nums[i]`. Each chocolate is of a different type, and initially, the chocolate at the index\u00a0`i`\u00a0is of `ith` type.\n\n\nIn one operation, you can do the following with an incurred **cost** of `x`:\n\n\n* Simultaneously change the chocolate of `ith` type to `((i + 1) mod n)th` type for all chocolates.\n\n\nReturn *the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [20,1,15], x = 5\n**Output:** 13\n**Explanation:** Initially, the chocolate types are [0,1,2]. We will buy the 1st\u00a0type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2ndtype of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], x = 4\n**Output:** 6\n**Explanation:** We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 109`\n* `1 <= x <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minCost(self, nums: List[int], x: int) -> int:\n```\n", "cluster": 4, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [98, 127, 105, 110, 100]}
{"id": "LeetCode/171", "prompt": "# Movement of Robots\n\nSome robots are standing on an infinite number line with their initial coordinates given by a **0-indexed** integer array `nums` and will start moving once given the command to move. The robots will move a unit distance each second.\n\n\nYou are given a string `s` denoting the direction in which robots will move on command. `'L'` means the robot will move towards the left side or negative side of the number line, whereas `'R'` means the robot will move towards the right side or positive side of the number line.\n\n\nIf two robots collide, they will start moving in opposite directions.\n\n\nReturn *the sum of distances between all the\u00a0pairs of robots* `d` *seconds after\u00a0the command.* Since the sum can be very large, return it modulo `109 + 7`.\n\n\n**Note:** \n\n\n* For two robots at the index `i` and `j`, pair `(i,j)` and pair `(j,i)` are considered the same pair.\n* When robots collide, they **instantly change** their directions without wasting any time.\n* Collision happens\u00a0when two robots share the same place in a\u00a0moment.\n\t+ For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right.\n\t+ For example,\u00a0if a robot is positioned in 0 going to the right and another is positioned in 1\u00a0going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-2,0,2], s = \"RLL\", d = 3\n**Output:** 8\n**Explanation:** \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,0], s = \"RL\", d = 2\n**Output:** 5\n**Explanation:** \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `-2 * 109\u00a0<= nums[i] <= 2 * 109`\n* `0 <= d <= 109`\n* `nums.length == s.length`\n* `s` consists of 'L' and 'R' only\n* `nums[i]`\u00a0will be unique.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n```\n", "cluster": 4, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [125, 169, 184, 135, 142]}
{"id": "LeetCode/172", "prompt": "# Find a Good Subset of the Matrix\n\nYou are given a **0-indexed** `m x n` binary matrix `grid`.\n\n\nLet us call a **non-empty** subset of rows **good** if the sum of each column of the subset is at most half of the length of the subset.\n\n\nMore formally, if the length of the chosen subset of rows is `k`, then the sum of each column should be at most `floor(k / 2)`.\n\n\nReturn *an integer array that contains row indices of a good subset sorted in **ascending** order.*\n\n\nIf there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.\n\n\nA **subset** of rows of the matrix `grid` is any matrix that can be obtained by deleting some (possibly none or all) rows from `grid`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]\n**Output:** [0,1]\n**Explanation:** We can choose the 0th and 1st rows to create a good subset of rows.\nThe length of the chosen subset is 2.\n- The sum of the 0th\u00a0column is 0 + 0 = 0, which is at most half of the length of the subset.\n- The sum of the 1st\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 2nd\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 3rd\u00a0column is 0 + 1 = 1, which is at most half of the length of the subset.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0]]\n**Output:** [0]\n**Explanation:** We can choose the 0th row to create a good subset of rows.\nThe length of the chosen subset is 1.\n- The sum of the 0th\u00a0column is 0, which is at most half of the length of the subset.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** grid = [[1,1,1],[1,1,1]]\n**Output:** []\n**Explanation:** It is impossible to choose any subset of rows to create a good subset.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m <= 104`\n* `1 <= n <= 5`\n* `grid[i][j]` is either `0` or `1`.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n```\n", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [108, 128, 116, 131, 127]}
{"id": "LeetCode/175", "prompt": "# Count of Integers\n\nYou are given two numeric strings `num1` and `num2` and two integers `max_sum` and `min_sum`. We denote an integer `x` to be *good* if:\n\n\n* `num1 <= x <= num2`\n* `min_sum <= digit_sum(x) <= max_sum`.\n\n\nReturn *the number of good integers*. Since the answer may be large, return it modulo `109 + 7`.\n\n\nNote that `digit_sum(x)` denotes the sum of the digits of `x`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8\n**Output:** 11\n**Explanation:** There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5\n**Output:** 5\n**Explanation:** The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num1 <= num2 <= 1022`\n* `1 <= min_sum <= max_sum <= 400`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n```\n", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [126, 135, 148, 126, 95]}
{"id": "LeetCode/180", "prompt": "# Maximum Strength of a Group\n\nYou are given a **0-indexed** integer array `nums` representing the score of students in an exam. The teacher would like to form one **non-empty** group of students with maximal **strength**, where the strength of a group of students of indices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] * nums[i2] * ... * nums[ik\u200b]`.\n\n\nReturn *the maximum strength of a group the teacher can create*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,-1,-5,2,5,-9]\n**Output:** 1350\n**Explanation:** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-4,-5,-4]\n**Output:** 20\n**Explanation:** Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 13`\n* `-9 <= nums[i] <= 9`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n```\n", "cluster": 4, "prediction": "4", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [135, 100, 102, 90, 152]}
{"id": "LeetCode/181", "prompt": "# Greatest Common Divisor Traversal\n\nYou are given a **0-indexed** integer array `nums`, and you are allowed to **traverse** between its indices. You can traverse between index `i` and index `j`, `i != j`, if and only if `gcd(nums[i], nums[j]) > 1`, where `gcd` is the **greatest common divisor**.\n\n\nYour task is to determine if for **every pair** of indices `i` and `j` in nums, where `i < j`, there exists a **sequence of traversals** that can take us from `i` to `j`.\n\n\nReturn `true` *if it is possible to traverse between all such pairs of indices,* *or* `false` *otherwise.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,6]\n**Output:** true\n**Explanation:** In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,9,5]\n**Output:** false\n**Explanation:** No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [4,3,12,8]\n**Output:** true\n**Explanation:** There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def canTraverseAllPairs(self, nums: List[int]) -> bool:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": true, "output_token_counts": [96, 101, 79, 80, 228]}
{"id": "LeetCode/182", "prompt": "# Minimum String Length After Removing Substrings\n\nYou are given a string `s` consisting only of **uppercase** English letters.\n\n\nYou can apply some operations to this string where, in one operation, you can remove **any** occurrence of one of the substrings `\"AB\"` or `\"CD\"` from `s`.\n\n\nReturn *the **minimum** possible length of the resulting string that you can obtain*.\n\n\n**Note** that the string concatenates after removing the substring and could produce new `\"AB\"` or `\"CD\"` substrings.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABFCACDB\"\n**Output:** 2\n**Explanation:** We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ACBBD\"\n**Output:** 5\n**Explanation:** We cannot do any operations on the string so the length remains the same.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s`\u00a0consists only of uppercase English letters.\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minLength(self, s: str) -> int:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [52, 88, 88, 52, 88]}
{"id": "LeetCode/189", "prompt": "# Maximum OR\n\nYou are given a **0-indexed** integer array `nums` of length `n` and an integer `k`. In an operation, you can choose an element and multiply it by `2`.\n\n\nReturn *the maximum possible value of* `nums[0] | nums[1] | ... | nums[n - 1]` *that can be obtained after applying the operation on nums at most* `k` *times*.\n\n\nNote that `a | b` denotes the **bitwise or** between two integers `a` and `b`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [12,9], k = 1\n**Output:** 30\n**Explanation:** If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [8,1,2], k = 2\n**Output:** 35\n**Explanation:** If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 15`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximumOr(self, nums: List[int], k: int) -> int:\n```\n", "cluster": 5, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [108, 100, 118, 83, 92]}
{"id": "LeetCode/190", "prompt": "# Power of Heroes\n\nYou are given a **0-indexed** integer array `nums` representing the strength of some heroes. The **power** of a group of heroes is defined as follows:\n\n\n* Let `i0`, `i1`, ... ,`ik` be the indices of the heroes in a group. Then, the power of this group is `max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik])`.\n\n\nReturn *the sum of the **power** of all **non-empty** groups of heroes possible.* Since the sum could be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,4]\n**Output:** 141\n**Explanation:** \n1st\u00a0group: [2] has power = 22\u00a0* 2 = 8.\n2nd\u00a0group: [1] has power = 12 * 1 = 1. \n3rd\u00a0group: [4] has power = 42 * 4 = 64. \n4th\u00a0group: [2,1] has power = 22 * 1 = 4. \n5th\u00a0group: [2,4] has power = 42 * 2 = 32. \n6th\u00a0group: [1,4] has power = 42 * 1 = 16. \n\u200b\u200b\u200b\u200b\u200b\u200b\u200b7th\u00a0group: [2,1,4] has power = 42\u200b\u200b\u200b\u200b\u200b\u200b\u200b * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1]\n**Output:** 7\n**Explanation:** A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumOfPower(self, nums: List[int]) -> int:\n```\n", "cluster": 4, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [72, 103, 82, 77, 107]}
{"id": "LeetCode/196", "prompt": "# Maximum Sum With Exactly K Elements \n\nYou are given a **0-indexed** integer array `nums` and an integer `k`. Your task is to perform the following operation **exactly** `k` times in order to maximize your score:\n\n\n1. Select an element `m` from `nums`.\n2. Remove the selected element `m` from the array.\n3. Add a new element with a value of `m + 1` to the array.\n4. Increase your score by `m`.\n\n\nReturn *the maximum score you can achieve after performing the operation exactly* `k` *times.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 3\n**Output:** 18\n**Explanation:** We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,5,5], k = 2\n**Output:** 11\n**Explanation:** We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= k <= 100`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [91, 58, 63, 74, 96]}
{"id": "LeetCode/200", "prompt": "# Sum Multiples\n\nGiven a positive integer `n`, find the sum of all integers in the range `[1, n]` **inclusive** that are divisible by `3`, `5`, or `7`.\n\n\nReturn *an integer denoting the sum of all numbers in the given range satisfying\u00a0the constraint.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 7\n**Output:** 21\n**Explanation:** Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 40\n**Explanation:** Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 9\n**Output:** 30\n**Explanation:** Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 103`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def sumOfMultiples(self, n: int) -> int:\n```\n", "cluster": 1, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [78, 78, 78, 79, 78]}
{"id": "LeetCode/219", "prompt": "# Number of Even and Odd Bits\n\nYou are given a **positive** integer `n`.\n\n\nLet `even` denote the number of even indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\n\nLet `odd` denote the number of odd indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\n\nReturn *an integer array* `answer` *where* `answer = [even, odd]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 17\n**Output:** [2,0]\n**Explanation:** The binary representation of 17 is 10001. \nIt contains 1 on the 0th and 4th indices. \nThere are 2 even and 0 odd indices.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** [0,1]\n**Explanation:** The binary representation of 2 is 10.\nIt contains 1 on the 1st index. \nThere are 0 even and 1 odd indices.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def evenOddBit(self, n: int) -> List[int]:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [108, 107, 120, 97, 85]}
{"id": "LeetCode/221", "prompt": "# Smallest Missing Non-negative Integer After Operations\n\nYou are given a **0-indexed** integer array `nums` and an integer `value`.\n\n\nIn one operation, you can add or subtract `value` from any element of `nums`.\n\n\n* For example, if `nums = [1,2,3]` and `value = 2`, you can choose to subtract `value` from `nums[0]` to make `nums = [-1,2,3]`.\n\n\nThe MEX (minimum excluded) of an array is the smallest missing **non-negative** integer in it.\n\n\n* For example, the MEX of `[-1,2,3]` is `0` while the MEX of `[1,0,3]` is `2`.\n\n\nReturn *the maximum MEX of* `nums` *after applying the mentioned operation **any number of times***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 5\n**Output:** 4\n**Explanation:** One can achieve this result by applying the following operations:\n- Add value to nums[1] twice to make nums = [1,**0**,7,13,6,8]\n- Subtract value from nums[2] once to make nums = [1,0,**2**,13,6,8]\n- Subtract value from nums[3] twice to make nums = [1,0,2,**3**,6,8]\nThe MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 7\n**Output:** 2\n**Explanation:** One can achieve this result by applying the following operation:\n- subtract value from nums[2] once to make nums = [1,-10,**0**,13,6,8]\nThe MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, value <= 105`\n* `-109 <= nums[i] <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [125, 51, 92, 65, 118]}
{"id": "LeetCode/225", "prompt": "# Minimum Time to Repair Cars\n\nYou are given an integer array `ranks` representing the **ranks** of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank `r` can repair n cars in `r * n2` minutes.\n\n\nYou are also given an integer `cars` representing the total number of cars waiting in the garage to be repaired.\n\n\nReturn *the **minimum** time taken to repair all the cars.*\n\n\n**Note:** All the mechanics can repair the cars simultaneously.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ranks = [4,2,3,1], cars = 10\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ranks = [5,1,8], cars = 6\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= ranks.length <= 105`\n* `1 <= ranks[i] <= 100`\n* `1 <= cars <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def repairCars(self, ranks: List[int], cars: int) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [103, 145, 131, 101, 126]}
{"id": "LeetCode/227", "prompt": "# Rearrange Array to Maximize Prefix Score\n\nYou are given a **0-indexed** integer array `nums`. You can rearrange the elements of `nums` to **any order** (including the given order).\n\n\nLet `prefix` be the array containing the prefix sums of `nums` after rearranging it. In other words, `prefix[i]` is the sum of the elements from `0` to `i` in `nums` after rearranging it. The **score** of `nums` is the number of positive integers in the array `prefix`.\n\n\nReturn *the maximum score you can achieve*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,-1,0,1,-3,3,-3]\n**Output:** 6\n**Explanation:** We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].\nprefix = [2,5,6,5,2,2,-1], so the score is 6.\nIt can be shown that 6 is the maximum score we can obtain.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-2,-3,0]\n**Output:** 0\n**Explanation:** Any rearrangement of the array will result in a score of 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-106 <= nums[i] <= 106`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxScore(self, nums: List[int]) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [66, 61, 50, 43, 67]}
{"id": "LeetCode/233", "prompt": "# Count Ways to Group Overlapping Ranges\n\nYou are given a 2D integer array `ranges` where `ranges[i] = [starti, endi]` denotes that all integers between `starti` and `endi` (both **inclusive**) are contained in the `ith` range.\n\n\nYou are to split `ranges` into **two** (possibly empty) groups such that:\n\n\n* Each range belongs to exactly one group.\n* Any two **overlapping** ranges must belong to the **same** group.\n\n\nTwo ranges are said to be **overlapping**\u00a0if there exists at least **one** integer that is present in both ranges.\n\n\n* For example, `[1, 3]` and `[2, 5]` are overlapping because `2` and `3` occur in both ranges.\n\n\nReturn *the **total number** of ways to split* `ranges` *into two groups*. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ranges = [[6,10],[5,15]]\n**Output:** 2\n**Explanation:** \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ranges = [[1,3],[10,20],[2,5],[4,8]]\n**Output:** 4\n**Explanation:** \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= ranges.length <= 105`\n* `ranges[i].length == 2`\n* `0 <= starti <= endi <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countWays(self, ranges: List[List[int]]) -> int:\n```\n", "cluster": 3, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [135, 146, 109, 215, 169]}
{"id": "LeetCode/236", "prompt": "# Find the Maximum Number of Marked Indices\n\nYou are given a **0-indexed** integer array `nums`.\n\n\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n\n\n* Pick two **different unmarked** indices `i` and `j` such that `2 * nums[i] <= nums[j]`, then mark `i` and `j`.\n\n\nReturn *the maximum possible number of marked indices in `nums` using the above operation any number of times*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,5,2,4]\n**Output:** 2\n**Explanation:** In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,2,5,4]\n**Output:** 4\n**Explanation:** In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [7,6,8]\n**Output:** 0\n**Explanation:** There is no valid operation to do, so the answer is 0.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [103, 86, 81, 101, 100]}
{"id": "LeetCode/238", "prompt": "# Minimum Operations to Reduce an Integer to 0\n\nYou are given a positive integer `n`, you can do the following operation **any** number of times:\n\n\n* Add or subtract a **power** of `2` from `n`.\n\n\nReturn *the **minimum** number of operations to make* `n` *equal to* `0`.\n\n\nA number `x` is power of `2` if `x == 2i`\u00a0where `i >= 0`*.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 39\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 20 = 1 to n, so now n = 40.\n- Subtract 23 = 8 from n, so now n = 32.\n- Subtract 25 = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 54\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 21 = 2 to n, so now n = 56.\n- Add 23 = 8 to n, so now n = 64.\n- Subtract 26 = 64 from n, so now n = 0.\nSo the minimum number of operations is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def minOperations(self, n: int) -> int:\n```\n", "cluster": 4, "prediction": "3", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [68, 68, 68, 142, 68]}
{"id": "LeetCode/240", "prompt": "# Find the String with LCP\n\nWe define the `lcp` matrix of any **0-indexed** string `word` of `n` lowercase English letters as an `n x n` grid such that:\n\n\n* `lcp[i][j]` is equal to the length of the **longest common prefix** between the substrings `word[i,n-1]` and `word[j,n-1]`.\n\n\nGiven an\u00a0`n x n` matrix `lcp`, return the alphabetically smallest string `word` that corresponds to `lcp`. If there is no such string, return an empty string.\n\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"aabd\"` is lexicographically smaller than `\"aaca\"` because the first position they differ is at the third letter, and `'b'` comes before `'c'`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\n**Output:** \"abab\"\n**Explanation:** lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\n**Output:** \"aaaa\"\n**Explanation:** lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\". \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]\n**Output:** \"\"\n**Explanation:** lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n ==``lcp.length ==` `lcp[i].length`\u00a0`<= 1000`\n* `0 <= lcp[i][j] <= n`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n```\n", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [127, 165, 178, 106, 115]}
{"id": "LeetCode/246", "prompt": "# Count the Number of Fair Pairs\n\nGiven a **0-indexed** integer array `nums` of size `n` and two integers `lower` and `upper`, return *the number of fair pairs*.\n\n\nA pair `(i, j)` is **fair** if:\n\n\n* `0 <= i < j < n`, and\n* `lower <= nums[i] + nums[j] <= upper`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,7,4,4,5], lower = 3, upper = 6\n**Output:** 6\n**Explanation:** There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,7,9,2,5], lower = 11, upper = 11\n**Output:** 1\n**Explanation:** There is a single fair pair: (2,3).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `nums.length == n`\n* `-109\u00a0<= nums[i] <= 109`\n* `-109\u00a0<= lower <= upper <= 109`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n```\n", "cluster": 1, "prediction": "4", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [86, 100, 85, 93, 86]}
{"id": "LeetCode/250", "prompt": "# Count Vowel Strings in Ranges\n\nYou are given a **0-indexed** array of strings `words` and a 2D array of integers `queries`.\n\n\nEach query `queries[i] = [li, ri]` asks us to find the number of strings present in the range `li` to `ri` (both **inclusive**) of `words` that start and end with a vowel.\n\n\nReturn *an array* `ans` *of size* `queries.length`*, where* `ans[i]` *is the answer to the* `i`th *query*.\n\n\n**Note** that the vowel letters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]]\n**Output:** [2,3,0]\n**Explanation:** The strings starting and ending with a vowel are \"aba\", \"ece\", \"aa\" and \"e\".\nThe answer to the query [0,2] is 2 (strings \"aba\" and \"ece\").\nto query [1,4] is 3 (strings \"ece\", \"aa\", \"e\").\nto query [1,1] is 0.\nWe return [2,3,0].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]]\n**Output:** [3,2,1]\n**Explanation:** Every string satisfies the conditions, so we return [3,2,1].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 105`\n* `1 <= words[i].length <= 40`\n* `words[i]` consists only of lowercase English letters.\n* `sum(words[i].length) <= 3 * 105`\n* `1 <= queries.length <= 105`\n* `0 <= li <= ri <\u00a0words.length`\n\n\n\n\nPlease make sure your answer follows the type signature below:\n\n```python3\nclass Solution:\n    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:\n```\n", "cluster": 3, "prediction": "3", "pass_in_1": true, "pass_in_5": true, "output_token_counts": [148, 145, 128, 117, 154]}
{"id": "code_contests/26", "prompt": "# CQXYM Count Permutations\n\nCQXYM is counting permutations length of 2n.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA permutation p(length of 2n) will be counted only if the number of i satisfying p_i<p_{i+1} is no less than n. For example:\n\n  * Permutation [1, 2, 3, 4] will count, because the number of such i that p_i<p_{i+1} equals 3 (i = 1, i = 2, i = 3).\n  * Permutation [3, 2, 1, 4] won't count, because the number of such i that p_i<p_{i+1} equals 1 (i = 3). \n\n\n\nCQXYM wants you to help him to count the number of such permutations modulo 1000000007 (10^9+7).\n\nIn addition, [modulo operation](https://en.wikipedia.org/wiki/Modulo_operation) is to get the remainder. For example:\n\n  * 7 mod 3=1, because 7 = 3 \u22c5 2 + 1, \n  * 15 mod 4=3, because 15 = 4 \u22c5 3 + 3. \n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (t \u2265 1) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains an integer n(1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5\n\nOutput\n\nFor each test case, print the answer in a single line.\n\nExample\n\nInput\n\n\n4\n1\n2\n9\n91234\n\n\nOutput\n\n\n1\n12\n830455698\n890287984\n\nNote\n\nn=1, there is only one permutation that satisfies the condition: [1,2].\n\nIn permutation [1,2], p_1<p_2, and there is one i=1 satisfy the condition. Since 1 \u2265 n, this permutation should be counted. In permutation [2,1], p_1>p_2. Because 0<n, this permutation should not be counted.\n\nn=2, there are 12 permutations: [1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[2,1,3,4],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,4,1,2],[4,1,2,3].\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [249, 115, 91, 81, 83]}
{"id": "code_contests/33", "prompt": "# Korney Korneevich and XOR (easy version)\n\nThis is an easier version of the problem with smaller constraints.\n\nKorney Korneevich dag up an array a of length n. Korney Korneevich has recently read about the operation [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR), so he wished to experiment with it. For this purpose, he decided to find all integers x \u2265 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x.\n\nIt didn't take a long time for Korney Korneevich to find all such x, and he wants to check his result. That's why he asked you to solve this problem!\n\nA sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA sequence s_1, s_2, \u2026 , s_m is called increasing if s_1 < s_2 < \u2026 < s_m.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 500) \u2014 the elements of the array a.\n\nOutput\n\nIn the first line print a single integer k \u2014 the number of found x values.\n\nIn the second line print k integers in increasing order x_1, x_2, \u2026 x_k (0 \u2264 x_1 < \u2026 < x_k) \u2014 found x values.\n\nExamples\n\nInput\n\n\n4\n4 2 2 4\n\n\nOutput\n\n\n4\n0 2 4 6 \n\n\nInput\n\n\n8\n1 0 1 7 12 5 3 2\n\n\nOutput\n\n\n12\n0 1 2 3 4 5 6 7 10 11 12 13 \n\nNote\n\nIn the first test case:\n\n  * To get value x = 0 it is possible to choose and empty subsequence \n  * To get value x = 2 it is possible to choose a subsequence [2] \n  * To get value x = 4 it is possible to choose a subsequence [4] \n  * To get value x = 6 it is possible to choose a subsequence [2, 4] \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [131, 115, 100, 139, 92]}
{"id": "code_contests/51", "prompt": "# Consecutive Sum Riddle\n\nTheofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n6\n100\n25\n3000000000000\n\n\nOutput\n\n\n0 1\n-1 2 \n1 2 \n1 3 \n18 22\n-2 7\n999999999999 1000000000001\n\nNote\n\nIn the first test case, 0 + 1 = 1.\n\nIn the second test case, (-1) + 0 + 1 + 2 = 2.\n\nIn the fourth test case, 1 + 2 + 3 = 6.\n\nIn the fifth test case, 18 + 19 + 20 + 21 + 22 = 100.\n\nIn the sixth test case, (-2) + (-1) + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 = 25.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [134, 82, 131, 91, 49]}
{"id": "code_contests/74", "prompt": "# Bob's Beautiful Array\n\nBob really likes playing with arrays of numbers. That's why for his birthday, his friends bought him a really interesting machine \u2013 an array beautifier. \n\nThe array beautifier takes an array A consisting of N integers, and it outputs a new array B of length N that it constructed based on the array given to it. The array beautifier constructs the new array in the following way: it takes two numbers at different indices from the original array and writes their sum to the end of the new array. It does this step N times - resulting in an output array of length N. During this process, the machine can take the same index multiple times in different steps. \n\nBob was very excited about the gift that his friends gave him, so he put his favorite array in the machine. However, when the machine finished, Bob was not happy with the resulting array. He misses his favorite array very much, and hopes to get it back. \n\nGiven the array that the machine outputted, help Bob find an array that could be the original array that he put in the machine. Sometimes the machine makes mistakes, so it is possible that no appropriate input array exists for the array it has outputted. In such case, let Bob know that his array is forever lost.\n\nInput\n\nThe first line contains one positive integer N (2 \u2264 N \u2264 10^3) \u2013 the length of Bob's array.\n\nThe second line contains N integers B_1, B_2, ..., B_N (1 \u2264 B_i \u2264 10^6) \u2013 the elements of the array the machine outputted.\n\nOutput\n\nIf an appropriate input array exists, print \"YES\", followed by the input array A_1, A_2, ..., A_N (-10^9 \u2264 A_i \u2264 10^9) in the next line. Otherwise, print \"NO\".\n\nExamples\n\nInput\n\n\n2\n5 5\n\n\nOutput\n\n\nYES\n2 3\n\n\nInput\n\n\n3\n1 2 3\n\n\nOutput\n\n\nYES\n0 1 2\n\n\nInput\n\n\n3\n2 4 5\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n4\n1 3 5 7\n\n\nOutput\n\n\nYES\n6 -3 4 1\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [179, 169, 150, 165, 167]}
{"id": "code_contests/77", "prompt": "# Robot Factory\n\nYou have received data from a Bubble bot. You know your task is to make factory facilities, but before you even start, you need to know how big the factory is and how many rooms it has. When you look at the data you see that you have the dimensions of the construction, which is in rectangle shape: N x M. \n\nThen in the next N lines you have M numbers. These numbers represent factory tiles and they can go from 0 to 15. Each of these numbers should be looked in its binary form. Because from each number you know on which side the tile has walls. For example number 10 in it's binary form is 1010, which means that it has a wall from the North side, it doesn't have a wall from the East, it has a wall on the South side and it doesn't have a wall on the West side. So it goes North, East, South, West. \n\nIt is guaranteed that the construction always has walls on it's edges. The input will be correct. \n\nYour task is to print the size of the rooms from biggest to smallest. \n\nInput\n\nThe first line has two numbers which are N and M, the size of the construction. Both are integers: \n\nn (1 \u2264 n \u2264 10^3)\n\nm (1 \u2264 m \u2264 10^3)\n\nNext N x M numbers represent each tile of construction.\n\nOutput\n\nOnce you finish processing the data your output consists of one line sorted from biggest to smallest room sizes. \n\nExample\n\nInput\n\n\n4 5\n9 14 11 12 13\n5 15 11 6 7\n5 9 14 9 14\n3 2 14 3 14\n\n\nOutput\n\n\n9 4 4 2 1 \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [336, 284, 295, 273, 211]}
{"id": "code_contests/124", "prompt": "# LEGOndary Grandmaster\n\nAfter getting bored by playing with crayons, you decided to switch to Legos! Today, you're working with a long strip, with height 1 and length n, some positions of which are occupied by 1 by 1 Lego pieces.\n\nIn one second, you can either remove two adjacent Lego pieces from the strip (if both are present), or add two Lego pieces to adjacent positions (if both are absent). You can only add or remove Lego's at two adjacent positions at the same time, as otherwise your chubby fingers run into precision issues.\n\nYou want to know exactly how much time you'll spend playing with Legos. You value efficiency, so given some starting state and some ending state, you'll always spend the least number of seconds to transform the starting state into the ending state. If it's impossible to transform the starting state into the ending state, you just skip it (so you spend 0 seconds).\n\nThe issue is that, for some positions, you don't remember whether there were Legos there or not (in either the starting state, the ending state, or both). Over all pairs of (starting state, ending state) that are consistent with your memory, find the total amount of time it will take to transform the starting state to the ending state. Print this value modulo 1 000 000 007 (10^9 + 7). \n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 2000) \u2014 the size of the Lego strip.\n\nThe second line of each test case contains a string s of length n, consisting of the characters 0, 1, and ? \u2014 your memory of the starting state: \n\n  * 1 represents a position that definitely has a Lego piece, \n  * 0 represents a position that definitely does not have a Lego piece, \n  * and ? represents a position that you don't remember. \n\n\n\nThe third line of each test case contains a string t of length n, consisting of the characters 0, 1, and ? \u2014 your memory of the ending state. It follows a similar format to the starting state.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 2000.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem modulo 1 000 000 007 (10^9 + 7). \n\nExample\n\nInput\n\n\n6\n2\n00\n11\n3\n???\n???\n3\n??1\n0?0\n4\n??0?\n??11\n5\n?????\n0??1?\n10\n?01??01?1?\n??100?1???\n\n\nOutput\n\n\n1\n16\n1\n14\n101\n1674\n\nNote\n\nFor the first test case, 00 is the only possible starting state, and 11 is the only possible ending state. It takes exactly one operation to change 00 to 11.\n\nFor the second test case, some of the possible starting and ending state pairs are: \n\n  * (000, 011) \u2014 takes 1 operation. \n  * (001, 100) \u2014 takes 2 operations. \n  * (010, 000) \u2014 takes 0 operations, as it's impossible to achieve the ending state. \n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [268, 425, 404, 266, 639]}
{"id": "code_contests/131", "prompt": "# Christmas Chocolates\n\nChristmas is coming, Icy has just received a box of chocolates from her grandparents! The box contains n chocolates. The i-th chocolate has a non-negative integer type a_i.\n\nIcy believes that good things come in pairs. Unfortunately, all types of chocolates are distinct (all a_i are distinct). Icy wants to make at least one pair of chocolates the same type. \n\nAs a result, she asks her grandparents to perform some chocolate exchanges. Before performing any chocolate exchanges, Icy chooses two chocolates with indices x and y (1 \u2264 x, y \u2264 n, x \u2260 y).\n\nIn a chocolate exchange, Icy's grandparents choose a non-negative integer k, such that 2^k \u2265 a_x, and change the type of the chocolate x from a_x to 2^k - a_x (that is, perform a_x := 2^k - a_x).\n\nThe chocolate exchanges will be stopped only when a_x = a_y. Note that other pairs of equal chocolate types do not stop the procedure.\n\nIcy's grandparents are smart, so they would choose the sequence of chocolate exchanges that minimizes the number of exchanges needed. Since Icy likes causing trouble, she wants to maximize the minimum number of exchanges needed by choosing x and y appropriately. She wonders what is the optimal pair (x, y) such that the minimum number of exchanges needed is maximized across all possible choices of (x, y).\n\nSince Icy is not good at math, she hopes that you can help her solve the problem.\n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of chocolates.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that all a_i are distinct.\n\nOutput\n\nOutput three integers x, y, and m.\n\nx and y are indices of the optimal chocolates to perform exchanges on. Your output must satisfy 1 \u2264 x, y \u2264 n, x \u2260 y.\n\nm is the number of exchanges needed to obtain a_x = a_y. We can show that m \u2264 10^9 for any pair of chocolates.\n\nIf there are multiple solutions, output any.\n\nExamples\n\nInput\n\n\n5\n5 6 7 8 9\n\n\nOutput\n\n\n2 5 5\n\n\nInput\n\n\n2\n4 8\n\n\nOutput\n\n\n1 2 2\n\nNote\n\nIn the first test case, the minimum number of exchanges needed to exchange a chocolate of type 6 to a chocolate of type 9 is 5. The sequence of exchanges is as follows: 6 \u2192 2 \u2192 0 \u2192 1 \u2192 7 \u2192 9.\n\nIn the second test case, the minimum number of exchanges needed to exchange a chocolate of type 4 to a chocolate of type 8 is 2. The sequence of exchanges is as follows: 4 \u2192 0 \u2192 8.\n\nPlease implement a complete Python script. Your program should read input from standard input and write output to standard output.", "cluster": 5, "prediction": "4", "pass_in_1": false, "pass_in_5": false, "output_token_counts": [59, 152, 102, 143, 132]}
